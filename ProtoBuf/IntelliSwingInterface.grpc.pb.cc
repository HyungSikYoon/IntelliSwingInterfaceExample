// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: IntelliSwingInterface.proto

#include "IntelliSwingInterface.pb.h"
#include "IntelliSwingInterface.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace IntelliSwing {

static const char* IntelliSwingProtocol_method_names[] = {
  "/IntelliSwing.IntelliSwingProtocol/Initialize",
  "/IntelliSwing.IntelliSwingProtocol/Release",
  "/IntelliSwing.IntelliSwingProtocol/Reboot",
  "/IntelliSwing.IntelliSwingProtocol/Start",
  "/IntelliSwing.IntelliSwingProtocol/Stop",
  "/IntelliSwing.IntelliSwingProtocol/GetClubImage",
  "/IntelliSwing.IntelliSwingProtocol/GetBallImage",
  "/IntelliSwing.IntelliSwingProtocol/GetDeviceInfo",
  "/IntelliSwing.IntelliSwingProtocol/GetDeviceStatus",
  "/IntelliSwing.IntelliSwingProtocol/GetLog",
  "/IntelliSwing.IntelliSwingProtocol/GetStatistics",
  "/IntelliSwing.IntelliSwingProtocol/RunSiteCalibration",
  "/IntelliSwing.IntelliSwingProtocol/UpdateFirmware",
  "/IntelliSwing.IntelliSwingProtocol/GetImage",
  "/IntelliSwing.IntelliSwingProtocol/GetDebugImage",
  "/IntelliSwing.IntelliSwingProtocol/Ping",
  "/IntelliSwing.IntelliSwingProtocol/SendCommand",
  "/IntelliSwing.IntelliSwingProtocol/SetTime",
};

std::unique_ptr< IntelliSwingProtocol::Stub> IntelliSwingProtocol::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< IntelliSwingProtocol::Stub> stub(new IntelliSwingProtocol::Stub(channel, options));
  return stub;
}

IntelliSwingProtocol::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Initialize_(IntelliSwingProtocol_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Release_(IntelliSwingProtocol_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Reboot_(IntelliSwingProtocol_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Start_(IntelliSwingProtocol_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Stop_(IntelliSwingProtocol_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetClubImage_(IntelliSwingProtocol_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBallImage_(IntelliSwingProtocol_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDeviceInfo_(IntelliSwingProtocol_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDeviceStatus_(IntelliSwingProtocol_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLog_(IntelliSwingProtocol_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStatistics_(IntelliSwingProtocol_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RunSiteCalibration_(IntelliSwingProtocol_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateFirmware_(IntelliSwingProtocol_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetImage_(IntelliSwingProtocol_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDebugImage_(IntelliSwingProtocol_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Ping_(IntelliSwingProtocol_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendCommand_(IntelliSwingProtocol_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTime_(IntelliSwingProtocol_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status IntelliSwingProtocol::Stub::Initialize(::grpc::ClientContext* context, const ::IntelliSwing::InitializeMsg& request, ::IntelliSwing::ReturnMsg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IntelliSwing::InitializeMsg, ::IntelliSwing::ReturnMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Initialize_, context, request, response);
}

void IntelliSwingProtocol::Stub::experimental_async::Initialize(::grpc::ClientContext* context, const ::IntelliSwing::InitializeMsg* request, ::IntelliSwing::ReturnMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IntelliSwing::InitializeMsg, ::IntelliSwing::ReturnMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Initialize_, context, request, response, std::move(f));
}

void IntelliSwingProtocol::Stub::experimental_async::Initialize(::grpc::ClientContext* context, const ::IntelliSwing::InitializeMsg* request, ::IntelliSwing::ReturnMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Initialize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>* IntelliSwingProtocol::Stub::PrepareAsyncInitializeRaw(::grpc::ClientContext* context, const ::IntelliSwing::InitializeMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IntelliSwing::ReturnMsg, ::IntelliSwing::InitializeMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Initialize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>* IntelliSwingProtocol::Stub::AsyncInitializeRaw(::grpc::ClientContext* context, const ::IntelliSwing::InitializeMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitializeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IntelliSwingProtocol::Stub::Release(::grpc::ClientContext* context, const ::IntelliSwing::ReleaseMsg& request, ::IntelliSwing::ReturnMsg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IntelliSwing::ReleaseMsg, ::IntelliSwing::ReturnMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Release_, context, request, response);
}

void IntelliSwingProtocol::Stub::experimental_async::Release(::grpc::ClientContext* context, const ::IntelliSwing::ReleaseMsg* request, ::IntelliSwing::ReturnMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IntelliSwing::ReleaseMsg, ::IntelliSwing::ReturnMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Release_, context, request, response, std::move(f));
}

void IntelliSwingProtocol::Stub::experimental_async::Release(::grpc::ClientContext* context, const ::IntelliSwing::ReleaseMsg* request, ::IntelliSwing::ReturnMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Release_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>* IntelliSwingProtocol::Stub::PrepareAsyncReleaseRaw(::grpc::ClientContext* context, const ::IntelliSwing::ReleaseMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IntelliSwing::ReturnMsg, ::IntelliSwing::ReleaseMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Release_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>* IntelliSwingProtocol::Stub::AsyncReleaseRaw(::grpc::ClientContext* context, const ::IntelliSwing::ReleaseMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReleaseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IntelliSwingProtocol::Stub::Reboot(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::IntelliSwing::ReturnMsg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::IntelliSwing::ReturnMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Reboot_, context, request, response);
}

void IntelliSwingProtocol::Stub::experimental_async::Reboot(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::ReturnMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::IntelliSwing::ReturnMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Reboot_, context, request, response, std::move(f));
}

void IntelliSwingProtocol::Stub::experimental_async::Reboot(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::ReturnMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Reboot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>* IntelliSwingProtocol::Stub::PrepareAsyncRebootRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IntelliSwing::ReturnMsg, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Reboot_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>* IntelliSwingProtocol::Stub::AsyncRebootRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRebootRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::IntelliSwing::SensorRunningMsg>* IntelliSwingProtocol::Stub::StartRaw(::grpc::ClientContext* context, const ::IntelliSwing::StartMsg& request) {
  return ::grpc::internal::ClientReaderFactory< ::IntelliSwing::SensorRunningMsg>::Create(channel_.get(), rpcmethod_Start_, context, request);
}

void IntelliSwingProtocol::Stub::experimental_async::Start(::grpc::ClientContext* context, const ::IntelliSwing::StartMsg* request, ::grpc::experimental::ClientReadReactor< ::IntelliSwing::SensorRunningMsg>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::IntelliSwing::SensorRunningMsg>::Create(stub_->channel_.get(), stub_->rpcmethod_Start_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::IntelliSwing::SensorRunningMsg>* IntelliSwingProtocol::Stub::AsyncStartRaw(::grpc::ClientContext* context, const ::IntelliSwing::StartMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::IntelliSwing::SensorRunningMsg>::Create(channel_.get(), cq, rpcmethod_Start_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::IntelliSwing::SensorRunningMsg>* IntelliSwingProtocol::Stub::PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::IntelliSwing::StartMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::IntelliSwing::SensorRunningMsg>::Create(channel_.get(), cq, rpcmethod_Start_, context, request, false, nullptr);
}

::grpc::Status IntelliSwingProtocol::Stub::Stop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::IntelliSwing::ReturnMsg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::IntelliSwing::ReturnMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Stop_, context, request, response);
}

void IntelliSwingProtocol::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::ReturnMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::IntelliSwing::ReturnMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void IntelliSwingProtocol::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::ReturnMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>* IntelliSwingProtocol::Stub::PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IntelliSwing::ReturnMsg, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Stop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>* IntelliSwingProtocol::Stub::AsyncStopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IntelliSwingProtocol::Stub::GetClubImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::IntelliSwing::ImageData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IntelliSwing::ShotImageRequest, ::IntelliSwing::ImageData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetClubImage_, context, request, response);
}

void IntelliSwingProtocol::Stub::experimental_async::GetClubImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest* request, ::IntelliSwing::ImageData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IntelliSwing::ShotImageRequest, ::IntelliSwing::ImageData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetClubImage_, context, request, response, std::move(f));
}

void IntelliSwingProtocol::Stub::experimental_async::GetClubImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest* request, ::IntelliSwing::ImageData* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetClubImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::ImageData>* IntelliSwingProtocol::Stub::PrepareAsyncGetClubImageRaw(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IntelliSwing::ImageData, ::IntelliSwing::ShotImageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetClubImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::ImageData>* IntelliSwingProtocol::Stub::AsyncGetClubImageRaw(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetClubImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IntelliSwingProtocol::Stub::GetBallImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::IntelliSwing::ImageData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IntelliSwing::ShotImageRequest, ::IntelliSwing::ImageData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBallImage_, context, request, response);
}

void IntelliSwingProtocol::Stub::experimental_async::GetBallImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest* request, ::IntelliSwing::ImageData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IntelliSwing::ShotImageRequest, ::IntelliSwing::ImageData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBallImage_, context, request, response, std::move(f));
}

void IntelliSwingProtocol::Stub::experimental_async::GetBallImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest* request, ::IntelliSwing::ImageData* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBallImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::ImageData>* IntelliSwingProtocol::Stub::PrepareAsyncGetBallImageRaw(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IntelliSwing::ImageData, ::IntelliSwing::ShotImageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBallImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::ImageData>* IntelliSwingProtocol::Stub::AsyncGetBallImageRaw(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBallImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IntelliSwingProtocol::Stub::GetDeviceInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::IntelliSwing::DeviceInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::IntelliSwing::DeviceInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDeviceInfo_, context, request, response);
}

void IntelliSwingProtocol::Stub::experimental_async::GetDeviceInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::DeviceInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::IntelliSwing::DeviceInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceInfo_, context, request, response, std::move(f));
}

void IntelliSwingProtocol::Stub::experimental_async::GetDeviceInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::DeviceInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::DeviceInfo>* IntelliSwingProtocol::Stub::PrepareAsyncGetDeviceInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IntelliSwing::DeviceInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDeviceInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::DeviceInfo>* IntelliSwingProtocol::Stub::AsyncGetDeviceInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDeviceInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IntelliSwingProtocol::Stub::GetDeviceStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::IntelliSwing::DeviceStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::IntelliSwing::DeviceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDeviceStatus_, context, request, response);
}

void IntelliSwingProtocol::Stub::experimental_async::GetDeviceStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::DeviceStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::IntelliSwing::DeviceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceStatus_, context, request, response, std::move(f));
}

void IntelliSwingProtocol::Stub::experimental_async::GetDeviceStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::DeviceStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::DeviceStatus>* IntelliSwingProtocol::Stub::PrepareAsyncGetDeviceStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IntelliSwing::DeviceStatus, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDeviceStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::DeviceStatus>* IntelliSwingProtocol::Stub::AsyncGetDeviceStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDeviceStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IntelliSwingProtocol::Stub::GetLog(::grpc::ClientContext* context, const ::IntelliSwing::LogRequest& request, ::IntelliSwing::LogMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IntelliSwing::LogRequest, ::IntelliSwing::LogMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLog_, context, request, response);
}

void IntelliSwingProtocol::Stub::experimental_async::GetLog(::grpc::ClientContext* context, const ::IntelliSwing::LogRequest* request, ::IntelliSwing::LogMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IntelliSwing::LogRequest, ::IntelliSwing::LogMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLog_, context, request, response, std::move(f));
}

void IntelliSwingProtocol::Stub::experimental_async::GetLog(::grpc::ClientContext* context, const ::IntelliSwing::LogRequest* request, ::IntelliSwing::LogMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLog_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::LogMessage>* IntelliSwingProtocol::Stub::PrepareAsyncGetLogRaw(::grpc::ClientContext* context, const ::IntelliSwing::LogRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IntelliSwing::LogMessage, ::IntelliSwing::LogRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLog_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::LogMessage>* IntelliSwingProtocol::Stub::AsyncGetLogRaw(::grpc::ClientContext* context, const ::IntelliSwing::LogRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLogRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IntelliSwingProtocol::Stub::GetStatistics(::grpc::ClientContext* context, const ::IntelliSwing::StatisticsRequest& request, ::IntelliSwing::SensorStatistics* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IntelliSwing::StatisticsRequest, ::IntelliSwing::SensorStatistics, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetStatistics_, context, request, response);
}

void IntelliSwingProtocol::Stub::experimental_async::GetStatistics(::grpc::ClientContext* context, const ::IntelliSwing::StatisticsRequest* request, ::IntelliSwing::SensorStatistics* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IntelliSwing::StatisticsRequest, ::IntelliSwing::SensorStatistics, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStatistics_, context, request, response, std::move(f));
}

void IntelliSwingProtocol::Stub::experimental_async::GetStatistics(::grpc::ClientContext* context, const ::IntelliSwing::StatisticsRequest* request, ::IntelliSwing::SensorStatistics* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStatistics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::SensorStatistics>* IntelliSwingProtocol::Stub::PrepareAsyncGetStatisticsRaw(::grpc::ClientContext* context, const ::IntelliSwing::StatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IntelliSwing::SensorStatistics, ::IntelliSwing::StatisticsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetStatistics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::SensorStatistics>* IntelliSwingProtocol::Stub::AsyncGetStatisticsRaw(::grpc::ClientContext* context, const ::IntelliSwing::StatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStatisticsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IntelliSwingProtocol::Stub::RunSiteCalibration(::grpc::ClientContext* context, const ::IntelliSwing::SiteCalibrationRequest& request, ::IntelliSwing::SiteCalibrationResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IntelliSwing::SiteCalibrationRequest, ::IntelliSwing::SiteCalibrationResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RunSiteCalibration_, context, request, response);
}

void IntelliSwingProtocol::Stub::experimental_async::RunSiteCalibration(::grpc::ClientContext* context, const ::IntelliSwing::SiteCalibrationRequest* request, ::IntelliSwing::SiteCalibrationResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IntelliSwing::SiteCalibrationRequest, ::IntelliSwing::SiteCalibrationResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RunSiteCalibration_, context, request, response, std::move(f));
}

void IntelliSwingProtocol::Stub::experimental_async::RunSiteCalibration(::grpc::ClientContext* context, const ::IntelliSwing::SiteCalibrationRequest* request, ::IntelliSwing::SiteCalibrationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RunSiteCalibration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::SiteCalibrationResult>* IntelliSwingProtocol::Stub::PrepareAsyncRunSiteCalibrationRaw(::grpc::ClientContext* context, const ::IntelliSwing::SiteCalibrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IntelliSwing::SiteCalibrationResult, ::IntelliSwing::SiteCalibrationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RunSiteCalibration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::SiteCalibrationResult>* IntelliSwingProtocol::Stub::AsyncRunSiteCalibrationRaw(::grpc::ClientContext* context, const ::IntelliSwing::SiteCalibrationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRunSiteCalibrationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IntelliSwingProtocol::Stub::UpdateFirmware(::grpc::ClientContext* context, const ::IntelliSwing::UpdateFirmwareRequest& request, ::IntelliSwing::UpdateFirmwareResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IntelliSwing::UpdateFirmwareRequest, ::IntelliSwing::UpdateFirmwareResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateFirmware_, context, request, response);
}

void IntelliSwingProtocol::Stub::experimental_async::UpdateFirmware(::grpc::ClientContext* context, const ::IntelliSwing::UpdateFirmwareRequest* request, ::IntelliSwing::UpdateFirmwareResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IntelliSwing::UpdateFirmwareRequest, ::IntelliSwing::UpdateFirmwareResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateFirmware_, context, request, response, std::move(f));
}

void IntelliSwingProtocol::Stub::experimental_async::UpdateFirmware(::grpc::ClientContext* context, const ::IntelliSwing::UpdateFirmwareRequest* request, ::IntelliSwing::UpdateFirmwareResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateFirmware_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::UpdateFirmwareResult>* IntelliSwingProtocol::Stub::PrepareAsyncUpdateFirmwareRaw(::grpc::ClientContext* context, const ::IntelliSwing::UpdateFirmwareRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IntelliSwing::UpdateFirmwareResult, ::IntelliSwing::UpdateFirmwareRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateFirmware_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::UpdateFirmwareResult>* IntelliSwingProtocol::Stub::AsyncUpdateFirmwareRaw(::grpc::ClientContext* context, const ::IntelliSwing::UpdateFirmwareRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateFirmwareRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IntelliSwingProtocol::Stub::GetImage(::grpc::ClientContext* context, const ::IntelliSwing::CameraImageRequest& request, ::IntelliSwing::ImageData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IntelliSwing::CameraImageRequest, ::IntelliSwing::ImageData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetImage_, context, request, response);
}

void IntelliSwingProtocol::Stub::experimental_async::GetImage(::grpc::ClientContext* context, const ::IntelliSwing::CameraImageRequest* request, ::IntelliSwing::ImageData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IntelliSwing::CameraImageRequest, ::IntelliSwing::ImageData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImage_, context, request, response, std::move(f));
}

void IntelliSwingProtocol::Stub::experimental_async::GetImage(::grpc::ClientContext* context, const ::IntelliSwing::CameraImageRequest* request, ::IntelliSwing::ImageData* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::ImageData>* IntelliSwingProtocol::Stub::PrepareAsyncGetImageRaw(::grpc::ClientContext* context, const ::IntelliSwing::CameraImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IntelliSwing::ImageData, ::IntelliSwing::CameraImageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::ImageData>* IntelliSwingProtocol::Stub::AsyncGetImageRaw(::grpc::ClientContext* context, const ::IntelliSwing::CameraImageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IntelliSwingProtocol::Stub::GetDebugImage(::grpc::ClientContext* context, const ::IntelliSwing::DebugImageRequest& request, ::IntelliSwing::DebugImage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IntelliSwing::DebugImageRequest, ::IntelliSwing::DebugImage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDebugImage_, context, request, response);
}

void IntelliSwingProtocol::Stub::experimental_async::GetDebugImage(::grpc::ClientContext* context, const ::IntelliSwing::DebugImageRequest* request, ::IntelliSwing::DebugImage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IntelliSwing::DebugImageRequest, ::IntelliSwing::DebugImage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDebugImage_, context, request, response, std::move(f));
}

void IntelliSwingProtocol::Stub::experimental_async::GetDebugImage(::grpc::ClientContext* context, const ::IntelliSwing::DebugImageRequest* request, ::IntelliSwing::DebugImage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDebugImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::DebugImage>* IntelliSwingProtocol::Stub::PrepareAsyncGetDebugImageRaw(::grpc::ClientContext* context, const ::IntelliSwing::DebugImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IntelliSwing::DebugImage, ::IntelliSwing::DebugImageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDebugImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::DebugImage>* IntelliSwingProtocol::Stub::AsyncGetDebugImageRaw(::grpc::ClientContext* context, const ::IntelliSwing::DebugImageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDebugImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IntelliSwingProtocol::Stub::Ping(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Ping_, context, request, response);
}

void IntelliSwingProtocol::Stub::experimental_async::Ping(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, std::move(f));
}

void IntelliSwingProtocol::Stub::experimental_async::Ping(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* IntelliSwingProtocol::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* IntelliSwingProtocol::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IntelliSwingProtocol::Stub::SendCommand(::grpc::ClientContext* context, const ::IntelliSwing::CMessage& request, ::IntelliSwing::CMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IntelliSwing::CMessage, ::IntelliSwing::CMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendCommand_, context, request, response);
}

void IntelliSwingProtocol::Stub::experimental_async::SendCommand(::grpc::ClientContext* context, const ::IntelliSwing::CMessage* request, ::IntelliSwing::CMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IntelliSwing::CMessage, ::IntelliSwing::CMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendCommand_, context, request, response, std::move(f));
}

void IntelliSwingProtocol::Stub::experimental_async::SendCommand(::grpc::ClientContext* context, const ::IntelliSwing::CMessage* request, ::IntelliSwing::CMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::CMessage>* IntelliSwingProtocol::Stub::PrepareAsyncSendCommandRaw(::grpc::ClientContext* context, const ::IntelliSwing::CMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::IntelliSwing::CMessage, ::IntelliSwing::CMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendCommand_, context, request);
}

::grpc::ClientAsyncResponseReader< ::IntelliSwing::CMessage>* IntelliSwingProtocol::Stub::AsyncSendCommandRaw(::grpc::ClientContext* context, const ::IntelliSwing::CMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendCommandRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IntelliSwingProtocol::Stub::SetTime(::grpc::ClientContext* context, const ::IntelliSwing::TimeRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::IntelliSwing::TimeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTime_, context, request, response);
}

void IntelliSwingProtocol::Stub::experimental_async::SetTime(::grpc::ClientContext* context, const ::IntelliSwing::TimeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::IntelliSwing::TimeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTime_, context, request, response, std::move(f));
}

void IntelliSwingProtocol::Stub::experimental_async::SetTime(::grpc::ClientContext* context, const ::IntelliSwing::TimeRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* IntelliSwingProtocol::Stub::PrepareAsyncSetTimeRaw(::grpc::ClientContext* context, const ::IntelliSwing::TimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::IntelliSwing::TimeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTime_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* IntelliSwingProtocol::Stub::AsyncSetTimeRaw(::grpc::ClientContext* context, const ::IntelliSwing::TimeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTimeRaw(context, request, cq);
  result->StartCall();
  return result;
}

IntelliSwingProtocol::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntelliSwingProtocol_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntelliSwingProtocol::Service, ::IntelliSwing::InitializeMsg, ::IntelliSwing::ReturnMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IntelliSwingProtocol::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IntelliSwing::InitializeMsg* req,
             ::IntelliSwing::ReturnMsg* resp) {
               return service->Initialize(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntelliSwingProtocol_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntelliSwingProtocol::Service, ::IntelliSwing::ReleaseMsg, ::IntelliSwing::ReturnMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IntelliSwingProtocol::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IntelliSwing::ReleaseMsg* req,
             ::IntelliSwing::ReturnMsg* resp) {
               return service->Release(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntelliSwingProtocol_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntelliSwingProtocol::Service, ::google::protobuf::Empty, ::IntelliSwing::ReturnMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IntelliSwingProtocol::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::IntelliSwing::ReturnMsg* resp) {
               return service->Reboot(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntelliSwingProtocol_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< IntelliSwingProtocol::Service, ::IntelliSwing::StartMsg, ::IntelliSwing::SensorRunningMsg>(
          [](IntelliSwingProtocol::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IntelliSwing::StartMsg* req,
             ::grpc::ServerWriter<::IntelliSwing::SensorRunningMsg>* writer) {
               return service->Start(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntelliSwingProtocol_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntelliSwingProtocol::Service, ::google::protobuf::Empty, ::IntelliSwing::ReturnMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IntelliSwingProtocol::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::IntelliSwing::ReturnMsg* resp) {
               return service->Stop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntelliSwingProtocol_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntelliSwingProtocol::Service, ::IntelliSwing::ShotImageRequest, ::IntelliSwing::ImageData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IntelliSwingProtocol::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IntelliSwing::ShotImageRequest* req,
             ::IntelliSwing::ImageData* resp) {
               return service->GetClubImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntelliSwingProtocol_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntelliSwingProtocol::Service, ::IntelliSwing::ShotImageRequest, ::IntelliSwing::ImageData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IntelliSwingProtocol::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IntelliSwing::ShotImageRequest* req,
             ::IntelliSwing::ImageData* resp) {
               return service->GetBallImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntelliSwingProtocol_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntelliSwingProtocol::Service, ::google::protobuf::Empty, ::IntelliSwing::DeviceInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IntelliSwingProtocol::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::IntelliSwing::DeviceInfo* resp) {
               return service->GetDeviceInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntelliSwingProtocol_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntelliSwingProtocol::Service, ::google::protobuf::Empty, ::IntelliSwing::DeviceStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IntelliSwingProtocol::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::IntelliSwing::DeviceStatus* resp) {
               return service->GetDeviceStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntelliSwingProtocol_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntelliSwingProtocol::Service, ::IntelliSwing::LogRequest, ::IntelliSwing::LogMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IntelliSwingProtocol::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IntelliSwing::LogRequest* req,
             ::IntelliSwing::LogMessage* resp) {
               return service->GetLog(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntelliSwingProtocol_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntelliSwingProtocol::Service, ::IntelliSwing::StatisticsRequest, ::IntelliSwing::SensorStatistics, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IntelliSwingProtocol::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IntelliSwing::StatisticsRequest* req,
             ::IntelliSwing::SensorStatistics* resp) {
               return service->GetStatistics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntelliSwingProtocol_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntelliSwingProtocol::Service, ::IntelliSwing::SiteCalibrationRequest, ::IntelliSwing::SiteCalibrationResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IntelliSwingProtocol::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IntelliSwing::SiteCalibrationRequest* req,
             ::IntelliSwing::SiteCalibrationResult* resp) {
               return service->RunSiteCalibration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntelliSwingProtocol_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntelliSwingProtocol::Service, ::IntelliSwing::UpdateFirmwareRequest, ::IntelliSwing::UpdateFirmwareResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IntelliSwingProtocol::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IntelliSwing::UpdateFirmwareRequest* req,
             ::IntelliSwing::UpdateFirmwareResult* resp) {
               return service->UpdateFirmware(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntelliSwingProtocol_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntelliSwingProtocol::Service, ::IntelliSwing::CameraImageRequest, ::IntelliSwing::ImageData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IntelliSwingProtocol::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IntelliSwing::CameraImageRequest* req,
             ::IntelliSwing::ImageData* resp) {
               return service->GetImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntelliSwingProtocol_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntelliSwingProtocol::Service, ::IntelliSwing::DebugImageRequest, ::IntelliSwing::DebugImage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IntelliSwingProtocol::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IntelliSwing::DebugImageRequest* req,
             ::IntelliSwing::DebugImage* resp) {
               return service->GetDebugImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntelliSwingProtocol_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntelliSwingProtocol::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IntelliSwingProtocol::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->Ping(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntelliSwingProtocol_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntelliSwingProtocol::Service, ::IntelliSwing::CMessage, ::IntelliSwing::CMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IntelliSwingProtocol::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IntelliSwing::CMessage* req,
             ::IntelliSwing::CMessage* resp) {
               return service->SendCommand(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IntelliSwingProtocol_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IntelliSwingProtocol::Service, ::IntelliSwing::TimeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IntelliSwingProtocol::Service* service,
             ::grpc::ServerContext* ctx,
             const ::IntelliSwing::TimeRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetTime(ctx, req, resp);
             }, this)));
}

IntelliSwingProtocol::Service::~Service() {
}

::grpc::Status IntelliSwingProtocol::Service::Initialize(::grpc::ServerContext* context, const ::IntelliSwing::InitializeMsg* request, ::IntelliSwing::ReturnMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntelliSwingProtocol::Service::Release(::grpc::ServerContext* context, const ::IntelliSwing::ReleaseMsg* request, ::IntelliSwing::ReturnMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntelliSwingProtocol::Service::Reboot(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::ReturnMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntelliSwingProtocol::Service::Start(::grpc::ServerContext* context, const ::IntelliSwing::StartMsg* request, ::grpc::ServerWriter< ::IntelliSwing::SensorRunningMsg>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntelliSwingProtocol::Service::Stop(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::ReturnMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntelliSwingProtocol::Service::GetClubImage(::grpc::ServerContext* context, const ::IntelliSwing::ShotImageRequest* request, ::IntelliSwing::ImageData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntelliSwingProtocol::Service::GetBallImage(::grpc::ServerContext* context, const ::IntelliSwing::ShotImageRequest* request, ::IntelliSwing::ImageData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntelliSwingProtocol::Service::GetDeviceInfo(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::DeviceInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntelliSwingProtocol::Service::GetDeviceStatus(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::DeviceStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntelliSwingProtocol::Service::GetLog(::grpc::ServerContext* context, const ::IntelliSwing::LogRequest* request, ::IntelliSwing::LogMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntelliSwingProtocol::Service::GetStatistics(::grpc::ServerContext* context, const ::IntelliSwing::StatisticsRequest* request, ::IntelliSwing::SensorStatistics* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntelliSwingProtocol::Service::RunSiteCalibration(::grpc::ServerContext* context, const ::IntelliSwing::SiteCalibrationRequest* request, ::IntelliSwing::SiteCalibrationResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntelliSwingProtocol::Service::UpdateFirmware(::grpc::ServerContext* context, const ::IntelliSwing::UpdateFirmwareRequest* request, ::IntelliSwing::UpdateFirmwareResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntelliSwingProtocol::Service::GetImage(::grpc::ServerContext* context, const ::IntelliSwing::CameraImageRequest* request, ::IntelliSwing::ImageData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntelliSwingProtocol::Service::GetDebugImage(::grpc::ServerContext* context, const ::IntelliSwing::DebugImageRequest* request, ::IntelliSwing::DebugImage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntelliSwingProtocol::Service::Ping(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntelliSwingProtocol::Service::SendCommand(::grpc::ServerContext* context, const ::IntelliSwing::CMessage* request, ::IntelliSwing::CMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IntelliSwingProtocol::Service::SetTime(::grpc::ServerContext* context, const ::IntelliSwing::TimeRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace IntelliSwing

