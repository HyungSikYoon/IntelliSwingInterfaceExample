// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: IntelliSwingInterface.proto
#ifndef GRPC_IntelliSwingInterface_2eproto__INCLUDED
#define GRPC_IntelliSwingInterface_2eproto__INCLUDED

#include "IntelliSwingInterface.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace IntelliSwing {

class IntelliSwingProtocol final {
 public:
  static constexpr char const* service_full_name() {
    return "IntelliSwing.IntelliSwingProtocol";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Common
    virtual ::grpc::Status Initialize(::grpc::ClientContext* context, const ::IntelliSwing::InitializeMsg& request, ::IntelliSwing::ReturnMsg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ReturnMsg>> AsyncInitialize(::grpc::ClientContext* context, const ::IntelliSwing::InitializeMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ReturnMsg>>(AsyncInitializeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ReturnMsg>> PrepareAsyncInitialize(::grpc::ClientContext* context, const ::IntelliSwing::InitializeMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ReturnMsg>>(PrepareAsyncInitializeRaw(context, request, cq));
    }
    virtual ::grpc::Status Release(::grpc::ClientContext* context, const ::IntelliSwing::ReleaseMsg& request, ::IntelliSwing::ReturnMsg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ReturnMsg>> AsyncRelease(::grpc::ClientContext* context, const ::IntelliSwing::ReleaseMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ReturnMsg>>(AsyncReleaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ReturnMsg>> PrepareAsyncRelease(::grpc::ClientContext* context, const ::IntelliSwing::ReleaseMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ReturnMsg>>(PrepareAsyncReleaseRaw(context, request, cq));
    }
    virtual ::grpc::Status Reboot(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::IntelliSwing::ReturnMsg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ReturnMsg>> AsyncReboot(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ReturnMsg>>(AsyncRebootRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ReturnMsg>> PrepareAsyncReboot(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ReturnMsg>>(PrepareAsyncRebootRaw(context, request, cq));
    }
    // Sensor
    std::unique_ptr< ::grpc::ClientReaderInterface< ::IntelliSwing::SensorRunningMsg>> Start(::grpc::ClientContext* context, const ::IntelliSwing::StartMsg& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::IntelliSwing::SensorRunningMsg>>(StartRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::IntelliSwing::SensorRunningMsg>> AsyncStart(::grpc::ClientContext* context, const ::IntelliSwing::StartMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::IntelliSwing::SensorRunningMsg>>(AsyncStartRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::IntelliSwing::SensorRunningMsg>> PrepareAsyncStart(::grpc::ClientContext* context, const ::IntelliSwing::StartMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::IntelliSwing::SensorRunningMsg>>(PrepareAsyncStartRaw(context, request, cq));
    }
    virtual ::grpc::Status Stop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::IntelliSwing::ReturnMsg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ReturnMsg>> AsyncStop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ReturnMsg>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ReturnMsg>> PrepareAsyncStop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ReturnMsg>>(PrepareAsyncStopRaw(context, request, cq));
    }
    virtual ::grpc::Status GetClubImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::IntelliSwing::ImageData* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ImageData>> AsyncGetClubImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ImageData>>(AsyncGetClubImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ImageData>> PrepareAsyncGetClubImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ImageData>>(PrepareAsyncGetClubImageRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBallImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::IntelliSwing::ImageData* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ImageData>> AsyncGetBallImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ImageData>>(AsyncGetBallImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ImageData>> PrepareAsyncGetBallImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ImageData>>(PrepareAsyncGetBallImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::IntelliSwing::ImageData>> GetClubImageStream(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::IntelliSwing::ImageData>>(GetClubImageStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::IntelliSwing::ImageData>> AsyncGetClubImageStream(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::IntelliSwing::ImageData>>(AsyncGetClubImageStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::IntelliSwing::ImageData>> PrepareAsyncGetClubImageStream(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::IntelliSwing::ImageData>>(PrepareAsyncGetClubImageStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::IntelliSwing::ImageData>> GetBallImageStream(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::IntelliSwing::ImageData>>(GetBallImageStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::IntelliSwing::ImageData>> AsyncGetBallImageStream(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::IntelliSwing::ImageData>>(AsyncGetBallImageStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::IntelliSwing::ImageData>> PrepareAsyncGetBallImageStream(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::IntelliSwing::ImageData>>(PrepareAsyncGetBallImageStreamRaw(context, request, cq));
    }
    // Service
    virtual ::grpc::Status GetDeviceInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::IntelliSwing::DeviceInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::DeviceInfo>> AsyncGetDeviceInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::DeviceInfo>>(AsyncGetDeviceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::DeviceInfo>> PrepareAsyncGetDeviceInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::DeviceInfo>>(PrepareAsyncGetDeviceInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDeviceStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::IntelliSwing::DeviceStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::DeviceStatus>> AsyncGetDeviceStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::DeviceStatus>>(AsyncGetDeviceStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::DeviceStatus>> PrepareAsyncGetDeviceStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::DeviceStatus>>(PrepareAsyncGetDeviceStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status GetLog(::grpc::ClientContext* context, const ::IntelliSwing::LogRequest& request, ::IntelliSwing::LogMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::LogMessage>> AsyncGetLog(::grpc::ClientContext* context, const ::IntelliSwing::LogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::LogMessage>>(AsyncGetLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::LogMessage>> PrepareAsyncGetLog(::grpc::ClientContext* context, const ::IntelliSwing::LogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::LogMessage>>(PrepareAsyncGetLogRaw(context, request, cq));
    }
    virtual ::grpc::Status GetStatistics(::grpc::ClientContext* context, const ::IntelliSwing::StatisticsRequest& request, ::IntelliSwing::SensorStatistics* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::SensorStatistics>> AsyncGetStatistics(::grpc::ClientContext* context, const ::IntelliSwing::StatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::SensorStatistics>>(AsyncGetStatisticsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::SensorStatistics>> PrepareAsyncGetStatistics(::grpc::ClientContext* context, const ::IntelliSwing::StatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::SensorStatistics>>(PrepareAsyncGetStatisticsRaw(context, request, cq));
    }
    virtual ::grpc::Status RunSiteCalibration(::grpc::ClientContext* context, const ::IntelliSwing::SiteCalibrationRequest& request, ::IntelliSwing::SiteCalibrationResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::SiteCalibrationResult>> AsyncRunSiteCalibration(::grpc::ClientContext* context, const ::IntelliSwing::SiteCalibrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::SiteCalibrationResult>>(AsyncRunSiteCalibrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::SiteCalibrationResult>> PrepareAsyncRunSiteCalibration(::grpc::ClientContext* context, const ::IntelliSwing::SiteCalibrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::SiteCalibrationResult>>(PrepareAsyncRunSiteCalibrationRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateFirmware(::grpc::ClientContext* context, const ::IntelliSwing::UpdateFirmwareRequest& request, ::IntelliSwing::UpdateFirmwareResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::UpdateFirmwareResult>> AsyncUpdateFirmware(::grpc::ClientContext* context, const ::IntelliSwing::UpdateFirmwareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::UpdateFirmwareResult>>(AsyncUpdateFirmwareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::UpdateFirmwareResult>> PrepareAsyncUpdateFirmware(::grpc::ClientContext* context, const ::IntelliSwing::UpdateFirmwareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::UpdateFirmwareResult>>(PrepareAsyncUpdateFirmwareRaw(context, request, cq));
    }
    virtual ::grpc::Status GetImage(::grpc::ClientContext* context, const ::IntelliSwing::CameraImageRequest& request, ::IntelliSwing::ImageData* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ImageData>> AsyncGetImage(::grpc::ClientContext* context, const ::IntelliSwing::CameraImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ImageData>>(AsyncGetImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ImageData>> PrepareAsyncGetImage(::grpc::ClientContext* context, const ::IntelliSwing::CameraImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ImageData>>(PrepareAsyncGetImageRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDebugImage(::grpc::ClientContext* context, const ::IntelliSwing::DebugImageRequest& request, ::IntelliSwing::DebugImage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::DebugImage>> AsyncGetDebugImage(::grpc::ClientContext* context, const ::IntelliSwing::DebugImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::DebugImage>>(AsyncGetDebugImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::DebugImage>> PrepareAsyncGetDebugImage(::grpc::ClientContext* context, const ::IntelliSwing::DebugImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::DebugImage>>(PrepareAsyncGetDebugImageRaw(context, request, cq));
    }
    virtual ::grpc::Status Ping(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncPing(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncPing(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncPingRaw(context, request, cq));
    }
    virtual ::grpc::Status SendCommand(::grpc::ClientContext* context, const ::IntelliSwing::CMessage& request, ::IntelliSwing::CMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::CMessage>> AsyncSendCommand(::grpc::ClientContext* context, const ::IntelliSwing::CMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::CMessage>>(AsyncSendCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::CMessage>> PrepareAsyncSendCommand(::grpc::ClientContext* context, const ::IntelliSwing::CMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::CMessage>>(PrepareAsyncSendCommandRaw(context, request, cq));
    }
    virtual ::grpc::Status SetTime(::grpc::ClientContext* context, const ::IntelliSwing::TimeRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncSetTime(::grpc::ClientContext* context, const ::IntelliSwing::TimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncSetTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncSetTime(::grpc::ClientContext* context, const ::IntelliSwing::TimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncSetTimeRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Common
      virtual void Initialize(::grpc::ClientContext* context, const ::IntelliSwing::InitializeMsg* request, ::IntelliSwing::ReturnMsg* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Initialize(::grpc::ClientContext* context, const ::IntelliSwing::InitializeMsg* request, ::IntelliSwing::ReturnMsg* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Initialize(::grpc::ClientContext* context, const ::IntelliSwing::InitializeMsg* request, ::IntelliSwing::ReturnMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Release(::grpc::ClientContext* context, const ::IntelliSwing::ReleaseMsg* request, ::IntelliSwing::ReturnMsg* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Release(::grpc::ClientContext* context, const ::IntelliSwing::ReleaseMsg* request, ::IntelliSwing::ReturnMsg* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Release(::grpc::ClientContext* context, const ::IntelliSwing::ReleaseMsg* request, ::IntelliSwing::ReturnMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Reboot(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::ReturnMsg* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Reboot(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::ReturnMsg* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Reboot(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::ReturnMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Sensor
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Start(::grpc::ClientContext* context, const ::IntelliSwing::StartMsg* request, ::grpc::ClientReadReactor< ::IntelliSwing::SensorRunningMsg>* reactor) = 0;
      #else
      virtual void Start(::grpc::ClientContext* context, const ::IntelliSwing::StartMsg* request, ::grpc::experimental::ClientReadReactor< ::IntelliSwing::SensorRunningMsg>* reactor) = 0;
      #endif
      virtual void Stop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::ReturnMsg* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Stop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::ReturnMsg* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Stop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::ReturnMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetClubImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest* request, ::IntelliSwing::ImageData* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetClubImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest* request, ::IntelliSwing::ImageData* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetClubImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest* request, ::IntelliSwing::ImageData* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetBallImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest* request, ::IntelliSwing::ImageData* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetBallImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest* request, ::IntelliSwing::ImageData* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetBallImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest* request, ::IntelliSwing::ImageData* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetClubImageStream(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest* request, ::grpc::ClientReadReactor< ::IntelliSwing::ImageData>* reactor) = 0;
      #else
      virtual void GetClubImageStream(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest* request, ::grpc::experimental::ClientReadReactor< ::IntelliSwing::ImageData>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetBallImageStream(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest* request, ::grpc::ClientReadReactor< ::IntelliSwing::ImageData>* reactor) = 0;
      #else
      virtual void GetBallImageStream(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest* request, ::grpc::experimental::ClientReadReactor< ::IntelliSwing::ImageData>* reactor) = 0;
      #endif
      // Service
      virtual void GetDeviceInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::DeviceInfo* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetDeviceInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::DeviceInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetDeviceInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::DeviceInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetDeviceStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::DeviceStatus* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetDeviceStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::DeviceStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetDeviceStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::DeviceStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetLog(::grpc::ClientContext* context, const ::IntelliSwing::LogRequest* request, ::IntelliSwing::LogMessage* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetLog(::grpc::ClientContext* context, const ::IntelliSwing::LogRequest* request, ::IntelliSwing::LogMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetLog(::grpc::ClientContext* context, const ::IntelliSwing::LogRequest* request, ::IntelliSwing::LogMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetStatistics(::grpc::ClientContext* context, const ::IntelliSwing::StatisticsRequest* request, ::IntelliSwing::SensorStatistics* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetStatistics(::grpc::ClientContext* context, const ::IntelliSwing::StatisticsRequest* request, ::IntelliSwing::SensorStatistics* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetStatistics(::grpc::ClientContext* context, const ::IntelliSwing::StatisticsRequest* request, ::IntelliSwing::SensorStatistics* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RunSiteCalibration(::grpc::ClientContext* context, const ::IntelliSwing::SiteCalibrationRequest* request, ::IntelliSwing::SiteCalibrationResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RunSiteCalibration(::grpc::ClientContext* context, const ::IntelliSwing::SiteCalibrationRequest* request, ::IntelliSwing::SiteCalibrationResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RunSiteCalibration(::grpc::ClientContext* context, const ::IntelliSwing::SiteCalibrationRequest* request, ::IntelliSwing::SiteCalibrationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void UpdateFirmware(::grpc::ClientContext* context, const ::IntelliSwing::UpdateFirmwareRequest* request, ::IntelliSwing::UpdateFirmwareResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateFirmware(::grpc::ClientContext* context, const ::IntelliSwing::UpdateFirmwareRequest* request, ::IntelliSwing::UpdateFirmwareResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateFirmware(::grpc::ClientContext* context, const ::IntelliSwing::UpdateFirmwareRequest* request, ::IntelliSwing::UpdateFirmwareResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetImage(::grpc::ClientContext* context, const ::IntelliSwing::CameraImageRequest* request, ::IntelliSwing::ImageData* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetImage(::grpc::ClientContext* context, const ::IntelliSwing::CameraImageRequest* request, ::IntelliSwing::ImageData* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetImage(::grpc::ClientContext* context, const ::IntelliSwing::CameraImageRequest* request, ::IntelliSwing::ImageData* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetDebugImage(::grpc::ClientContext* context, const ::IntelliSwing::DebugImageRequest* request, ::IntelliSwing::DebugImage* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetDebugImage(::grpc::ClientContext* context, const ::IntelliSwing::DebugImageRequest* request, ::IntelliSwing::DebugImage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetDebugImage(::grpc::ClientContext* context, const ::IntelliSwing::DebugImageRequest* request, ::IntelliSwing::DebugImage* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Ping(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Ping(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Ping(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SendCommand(::grpc::ClientContext* context, const ::IntelliSwing::CMessage* request, ::IntelliSwing::CMessage* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendCommand(::grpc::ClientContext* context, const ::IntelliSwing::CMessage* request, ::IntelliSwing::CMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendCommand(::grpc::ClientContext* context, const ::IntelliSwing::CMessage* request, ::IntelliSwing::CMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SetTime(::grpc::ClientContext* context, const ::IntelliSwing::TimeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetTime(::grpc::ClientContext* context, const ::IntelliSwing::TimeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetTime(::grpc::ClientContext* context, const ::IntelliSwing::TimeRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ReturnMsg>* AsyncInitializeRaw(::grpc::ClientContext* context, const ::IntelliSwing::InitializeMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ReturnMsg>* PrepareAsyncInitializeRaw(::grpc::ClientContext* context, const ::IntelliSwing::InitializeMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ReturnMsg>* AsyncReleaseRaw(::grpc::ClientContext* context, const ::IntelliSwing::ReleaseMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ReturnMsg>* PrepareAsyncReleaseRaw(::grpc::ClientContext* context, const ::IntelliSwing::ReleaseMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ReturnMsg>* AsyncRebootRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ReturnMsg>* PrepareAsyncRebootRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::IntelliSwing::SensorRunningMsg>* StartRaw(::grpc::ClientContext* context, const ::IntelliSwing::StartMsg& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::IntelliSwing::SensorRunningMsg>* AsyncStartRaw(::grpc::ClientContext* context, const ::IntelliSwing::StartMsg& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::IntelliSwing::SensorRunningMsg>* PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::IntelliSwing::StartMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ReturnMsg>* AsyncStopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ReturnMsg>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ImageData>* AsyncGetClubImageRaw(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ImageData>* PrepareAsyncGetClubImageRaw(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ImageData>* AsyncGetBallImageRaw(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ImageData>* PrepareAsyncGetBallImageRaw(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::IntelliSwing::ImageData>* GetClubImageStreamRaw(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::IntelliSwing::ImageData>* AsyncGetClubImageStreamRaw(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::IntelliSwing::ImageData>* PrepareAsyncGetClubImageStreamRaw(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::IntelliSwing::ImageData>* GetBallImageStreamRaw(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::IntelliSwing::ImageData>* AsyncGetBallImageStreamRaw(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::IntelliSwing::ImageData>* PrepareAsyncGetBallImageStreamRaw(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::DeviceInfo>* AsyncGetDeviceInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::DeviceInfo>* PrepareAsyncGetDeviceInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::DeviceStatus>* AsyncGetDeviceStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::DeviceStatus>* PrepareAsyncGetDeviceStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::LogMessage>* AsyncGetLogRaw(::grpc::ClientContext* context, const ::IntelliSwing::LogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::LogMessage>* PrepareAsyncGetLogRaw(::grpc::ClientContext* context, const ::IntelliSwing::LogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::SensorStatistics>* AsyncGetStatisticsRaw(::grpc::ClientContext* context, const ::IntelliSwing::StatisticsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::SensorStatistics>* PrepareAsyncGetStatisticsRaw(::grpc::ClientContext* context, const ::IntelliSwing::StatisticsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::SiteCalibrationResult>* AsyncRunSiteCalibrationRaw(::grpc::ClientContext* context, const ::IntelliSwing::SiteCalibrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::SiteCalibrationResult>* PrepareAsyncRunSiteCalibrationRaw(::grpc::ClientContext* context, const ::IntelliSwing::SiteCalibrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::UpdateFirmwareResult>* AsyncUpdateFirmwareRaw(::grpc::ClientContext* context, const ::IntelliSwing::UpdateFirmwareRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::UpdateFirmwareResult>* PrepareAsyncUpdateFirmwareRaw(::grpc::ClientContext* context, const ::IntelliSwing::UpdateFirmwareRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ImageData>* AsyncGetImageRaw(::grpc::ClientContext* context, const ::IntelliSwing::CameraImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::ImageData>* PrepareAsyncGetImageRaw(::grpc::ClientContext* context, const ::IntelliSwing::CameraImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::DebugImage>* AsyncGetDebugImageRaw(::grpc::ClientContext* context, const ::IntelliSwing::DebugImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::DebugImage>* PrepareAsyncGetDebugImageRaw(::grpc::ClientContext* context, const ::IntelliSwing::DebugImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncPingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::CMessage>* AsyncSendCommandRaw(::grpc::ClientContext* context, const ::IntelliSwing::CMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::IntelliSwing::CMessage>* PrepareAsyncSendCommandRaw(::grpc::ClientContext* context, const ::IntelliSwing::CMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncSetTimeRaw(::grpc::ClientContext* context, const ::IntelliSwing::TimeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncSetTimeRaw(::grpc::ClientContext* context, const ::IntelliSwing::TimeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Initialize(::grpc::ClientContext* context, const ::IntelliSwing::InitializeMsg& request, ::IntelliSwing::ReturnMsg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>> AsyncInitialize(::grpc::ClientContext* context, const ::IntelliSwing::InitializeMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>>(AsyncInitializeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>> PrepareAsyncInitialize(::grpc::ClientContext* context, const ::IntelliSwing::InitializeMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>>(PrepareAsyncInitializeRaw(context, request, cq));
    }
    ::grpc::Status Release(::grpc::ClientContext* context, const ::IntelliSwing::ReleaseMsg& request, ::IntelliSwing::ReturnMsg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>> AsyncRelease(::grpc::ClientContext* context, const ::IntelliSwing::ReleaseMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>>(AsyncReleaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>> PrepareAsyncRelease(::grpc::ClientContext* context, const ::IntelliSwing::ReleaseMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>>(PrepareAsyncReleaseRaw(context, request, cq));
    }
    ::grpc::Status Reboot(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::IntelliSwing::ReturnMsg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>> AsyncReboot(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>>(AsyncRebootRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>> PrepareAsyncReboot(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>>(PrepareAsyncRebootRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::IntelliSwing::SensorRunningMsg>> Start(::grpc::ClientContext* context, const ::IntelliSwing::StartMsg& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::IntelliSwing::SensorRunningMsg>>(StartRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::IntelliSwing::SensorRunningMsg>> AsyncStart(::grpc::ClientContext* context, const ::IntelliSwing::StartMsg& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::IntelliSwing::SensorRunningMsg>>(AsyncStartRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::IntelliSwing::SensorRunningMsg>> PrepareAsyncStart(::grpc::ClientContext* context, const ::IntelliSwing::StartMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::IntelliSwing::SensorRunningMsg>>(PrepareAsyncStartRaw(context, request, cq));
    }
    ::grpc::Status Stop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::IntelliSwing::ReturnMsg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>> AsyncStop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>> PrepareAsyncStop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>>(PrepareAsyncStopRaw(context, request, cq));
    }
    ::grpc::Status GetClubImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::IntelliSwing::ImageData* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ImageData>> AsyncGetClubImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ImageData>>(AsyncGetClubImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ImageData>> PrepareAsyncGetClubImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ImageData>>(PrepareAsyncGetClubImageRaw(context, request, cq));
    }
    ::grpc::Status GetBallImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::IntelliSwing::ImageData* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ImageData>> AsyncGetBallImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ImageData>>(AsyncGetBallImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ImageData>> PrepareAsyncGetBallImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ImageData>>(PrepareAsyncGetBallImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::IntelliSwing::ImageData>> GetClubImageStream(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::IntelliSwing::ImageData>>(GetClubImageStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::IntelliSwing::ImageData>> AsyncGetClubImageStream(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::IntelliSwing::ImageData>>(AsyncGetClubImageStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::IntelliSwing::ImageData>> PrepareAsyncGetClubImageStream(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::IntelliSwing::ImageData>>(PrepareAsyncGetClubImageStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::IntelliSwing::ImageData>> GetBallImageStream(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::IntelliSwing::ImageData>>(GetBallImageStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::IntelliSwing::ImageData>> AsyncGetBallImageStream(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::IntelliSwing::ImageData>>(AsyncGetBallImageStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::IntelliSwing::ImageData>> PrepareAsyncGetBallImageStream(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::IntelliSwing::ImageData>>(PrepareAsyncGetBallImageStreamRaw(context, request, cq));
    }
    ::grpc::Status GetDeviceInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::IntelliSwing::DeviceInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::DeviceInfo>> AsyncGetDeviceInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::DeviceInfo>>(AsyncGetDeviceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::DeviceInfo>> PrepareAsyncGetDeviceInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::DeviceInfo>>(PrepareAsyncGetDeviceInfoRaw(context, request, cq));
    }
    ::grpc::Status GetDeviceStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::IntelliSwing::DeviceStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::DeviceStatus>> AsyncGetDeviceStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::DeviceStatus>>(AsyncGetDeviceStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::DeviceStatus>> PrepareAsyncGetDeviceStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::DeviceStatus>>(PrepareAsyncGetDeviceStatusRaw(context, request, cq));
    }
    ::grpc::Status GetLog(::grpc::ClientContext* context, const ::IntelliSwing::LogRequest& request, ::IntelliSwing::LogMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::LogMessage>> AsyncGetLog(::grpc::ClientContext* context, const ::IntelliSwing::LogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::LogMessage>>(AsyncGetLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::LogMessage>> PrepareAsyncGetLog(::grpc::ClientContext* context, const ::IntelliSwing::LogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::LogMessage>>(PrepareAsyncGetLogRaw(context, request, cq));
    }
    ::grpc::Status GetStatistics(::grpc::ClientContext* context, const ::IntelliSwing::StatisticsRequest& request, ::IntelliSwing::SensorStatistics* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::SensorStatistics>> AsyncGetStatistics(::grpc::ClientContext* context, const ::IntelliSwing::StatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::SensorStatistics>>(AsyncGetStatisticsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::SensorStatistics>> PrepareAsyncGetStatistics(::grpc::ClientContext* context, const ::IntelliSwing::StatisticsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::SensorStatistics>>(PrepareAsyncGetStatisticsRaw(context, request, cq));
    }
    ::grpc::Status RunSiteCalibration(::grpc::ClientContext* context, const ::IntelliSwing::SiteCalibrationRequest& request, ::IntelliSwing::SiteCalibrationResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::SiteCalibrationResult>> AsyncRunSiteCalibration(::grpc::ClientContext* context, const ::IntelliSwing::SiteCalibrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::SiteCalibrationResult>>(AsyncRunSiteCalibrationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::SiteCalibrationResult>> PrepareAsyncRunSiteCalibration(::grpc::ClientContext* context, const ::IntelliSwing::SiteCalibrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::SiteCalibrationResult>>(PrepareAsyncRunSiteCalibrationRaw(context, request, cq));
    }
    ::grpc::Status UpdateFirmware(::grpc::ClientContext* context, const ::IntelliSwing::UpdateFirmwareRequest& request, ::IntelliSwing::UpdateFirmwareResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::UpdateFirmwareResult>> AsyncUpdateFirmware(::grpc::ClientContext* context, const ::IntelliSwing::UpdateFirmwareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::UpdateFirmwareResult>>(AsyncUpdateFirmwareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::UpdateFirmwareResult>> PrepareAsyncUpdateFirmware(::grpc::ClientContext* context, const ::IntelliSwing::UpdateFirmwareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::UpdateFirmwareResult>>(PrepareAsyncUpdateFirmwareRaw(context, request, cq));
    }
    ::grpc::Status GetImage(::grpc::ClientContext* context, const ::IntelliSwing::CameraImageRequest& request, ::IntelliSwing::ImageData* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ImageData>> AsyncGetImage(::grpc::ClientContext* context, const ::IntelliSwing::CameraImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ImageData>>(AsyncGetImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ImageData>> PrepareAsyncGetImage(::grpc::ClientContext* context, const ::IntelliSwing::CameraImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ImageData>>(PrepareAsyncGetImageRaw(context, request, cq));
    }
    ::grpc::Status GetDebugImage(::grpc::ClientContext* context, const ::IntelliSwing::DebugImageRequest& request, ::IntelliSwing::DebugImage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::DebugImage>> AsyncGetDebugImage(::grpc::ClientContext* context, const ::IntelliSwing::DebugImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::DebugImage>>(AsyncGetDebugImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::DebugImage>> PrepareAsyncGetDebugImage(::grpc::ClientContext* context, const ::IntelliSwing::DebugImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::DebugImage>>(PrepareAsyncGetDebugImageRaw(context, request, cq));
    }
    ::grpc::Status Ping(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncPing(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncPing(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncPingRaw(context, request, cq));
    }
    ::grpc::Status SendCommand(::grpc::ClientContext* context, const ::IntelliSwing::CMessage& request, ::IntelliSwing::CMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::CMessage>> AsyncSendCommand(::grpc::ClientContext* context, const ::IntelliSwing::CMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::CMessage>>(AsyncSendCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::CMessage>> PrepareAsyncSendCommand(::grpc::ClientContext* context, const ::IntelliSwing::CMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::IntelliSwing::CMessage>>(PrepareAsyncSendCommandRaw(context, request, cq));
    }
    ::grpc::Status SetTime(::grpc::ClientContext* context, const ::IntelliSwing::TimeRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncSetTime(::grpc::ClientContext* context, const ::IntelliSwing::TimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncSetTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncSetTime(::grpc::ClientContext* context, const ::IntelliSwing::TimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncSetTimeRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Initialize(::grpc::ClientContext* context, const ::IntelliSwing::InitializeMsg* request, ::IntelliSwing::ReturnMsg* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Initialize(::grpc::ClientContext* context, const ::IntelliSwing::InitializeMsg* request, ::IntelliSwing::ReturnMsg* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Initialize(::grpc::ClientContext* context, const ::IntelliSwing::InitializeMsg* request, ::IntelliSwing::ReturnMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Release(::grpc::ClientContext* context, const ::IntelliSwing::ReleaseMsg* request, ::IntelliSwing::ReturnMsg* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Release(::grpc::ClientContext* context, const ::IntelliSwing::ReleaseMsg* request, ::IntelliSwing::ReturnMsg* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Release(::grpc::ClientContext* context, const ::IntelliSwing::ReleaseMsg* request, ::IntelliSwing::ReturnMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Reboot(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::ReturnMsg* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Reboot(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::ReturnMsg* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Reboot(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::ReturnMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Start(::grpc::ClientContext* context, const ::IntelliSwing::StartMsg* request, ::grpc::ClientReadReactor< ::IntelliSwing::SensorRunningMsg>* reactor) override;
      #else
      void Start(::grpc::ClientContext* context, const ::IntelliSwing::StartMsg* request, ::grpc::experimental::ClientReadReactor< ::IntelliSwing::SensorRunningMsg>* reactor) override;
      #endif
      void Stop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::ReturnMsg* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Stop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::ReturnMsg* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Stop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::ReturnMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetClubImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest* request, ::IntelliSwing::ImageData* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetClubImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest* request, ::IntelliSwing::ImageData* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetClubImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest* request, ::IntelliSwing::ImageData* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetBallImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest* request, ::IntelliSwing::ImageData* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetBallImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest* request, ::IntelliSwing::ImageData* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetBallImage(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest* request, ::IntelliSwing::ImageData* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetClubImageStream(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest* request, ::grpc::ClientReadReactor< ::IntelliSwing::ImageData>* reactor) override;
      #else
      void GetClubImageStream(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest* request, ::grpc::experimental::ClientReadReactor< ::IntelliSwing::ImageData>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetBallImageStream(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest* request, ::grpc::ClientReadReactor< ::IntelliSwing::ImageData>* reactor) override;
      #else
      void GetBallImageStream(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest* request, ::grpc::experimental::ClientReadReactor< ::IntelliSwing::ImageData>* reactor) override;
      #endif
      void GetDeviceInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::DeviceInfo* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetDeviceInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::DeviceInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetDeviceInfo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::DeviceInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetDeviceStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::DeviceStatus* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetDeviceStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::DeviceStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetDeviceStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::DeviceStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetLog(::grpc::ClientContext* context, const ::IntelliSwing::LogRequest* request, ::IntelliSwing::LogMessage* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetLog(::grpc::ClientContext* context, const ::IntelliSwing::LogRequest* request, ::IntelliSwing::LogMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetLog(::grpc::ClientContext* context, const ::IntelliSwing::LogRequest* request, ::IntelliSwing::LogMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetStatistics(::grpc::ClientContext* context, const ::IntelliSwing::StatisticsRequest* request, ::IntelliSwing::SensorStatistics* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetStatistics(::grpc::ClientContext* context, const ::IntelliSwing::StatisticsRequest* request, ::IntelliSwing::SensorStatistics* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetStatistics(::grpc::ClientContext* context, const ::IntelliSwing::StatisticsRequest* request, ::IntelliSwing::SensorStatistics* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RunSiteCalibration(::grpc::ClientContext* context, const ::IntelliSwing::SiteCalibrationRequest* request, ::IntelliSwing::SiteCalibrationResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RunSiteCalibration(::grpc::ClientContext* context, const ::IntelliSwing::SiteCalibrationRequest* request, ::IntelliSwing::SiteCalibrationResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RunSiteCalibration(::grpc::ClientContext* context, const ::IntelliSwing::SiteCalibrationRequest* request, ::IntelliSwing::SiteCalibrationResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateFirmware(::grpc::ClientContext* context, const ::IntelliSwing::UpdateFirmwareRequest* request, ::IntelliSwing::UpdateFirmwareResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateFirmware(::grpc::ClientContext* context, const ::IntelliSwing::UpdateFirmwareRequest* request, ::IntelliSwing::UpdateFirmwareResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateFirmware(::grpc::ClientContext* context, const ::IntelliSwing::UpdateFirmwareRequest* request, ::IntelliSwing::UpdateFirmwareResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetImage(::grpc::ClientContext* context, const ::IntelliSwing::CameraImageRequest* request, ::IntelliSwing::ImageData* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetImage(::grpc::ClientContext* context, const ::IntelliSwing::CameraImageRequest* request, ::IntelliSwing::ImageData* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetImage(::grpc::ClientContext* context, const ::IntelliSwing::CameraImageRequest* request, ::IntelliSwing::ImageData* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetDebugImage(::grpc::ClientContext* context, const ::IntelliSwing::DebugImageRequest* request, ::IntelliSwing::DebugImage* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetDebugImage(::grpc::ClientContext* context, const ::IntelliSwing::DebugImageRequest* request, ::IntelliSwing::DebugImage* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetDebugImage(::grpc::ClientContext* context, const ::IntelliSwing::DebugImageRequest* request, ::IntelliSwing::DebugImage* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Ping(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Ping(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Ping(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SendCommand(::grpc::ClientContext* context, const ::IntelliSwing::CMessage* request, ::IntelliSwing::CMessage* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendCommand(::grpc::ClientContext* context, const ::IntelliSwing::CMessage* request, ::IntelliSwing::CMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendCommand(::grpc::ClientContext* context, const ::IntelliSwing::CMessage* request, ::IntelliSwing::CMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetTime(::grpc::ClientContext* context, const ::IntelliSwing::TimeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetTime(::grpc::ClientContext* context, const ::IntelliSwing::TimeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetTime(::grpc::ClientContext* context, const ::IntelliSwing::TimeRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>* AsyncInitializeRaw(::grpc::ClientContext* context, const ::IntelliSwing::InitializeMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>* PrepareAsyncInitializeRaw(::grpc::ClientContext* context, const ::IntelliSwing::InitializeMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>* AsyncReleaseRaw(::grpc::ClientContext* context, const ::IntelliSwing::ReleaseMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>* PrepareAsyncReleaseRaw(::grpc::ClientContext* context, const ::IntelliSwing::ReleaseMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>* AsyncRebootRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>* PrepareAsyncRebootRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::IntelliSwing::SensorRunningMsg>* StartRaw(::grpc::ClientContext* context, const ::IntelliSwing::StartMsg& request) override;
    ::grpc::ClientAsyncReader< ::IntelliSwing::SensorRunningMsg>* AsyncStartRaw(::grpc::ClientContext* context, const ::IntelliSwing::StartMsg& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::IntelliSwing::SensorRunningMsg>* PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::IntelliSwing::StartMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>* AsyncStopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ReturnMsg>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ImageData>* AsyncGetClubImageRaw(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ImageData>* PrepareAsyncGetClubImageRaw(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ImageData>* AsyncGetBallImageRaw(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ImageData>* PrepareAsyncGetBallImageRaw(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::IntelliSwing::ImageData>* GetClubImageStreamRaw(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request) override;
    ::grpc::ClientAsyncReader< ::IntelliSwing::ImageData>* AsyncGetClubImageStreamRaw(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::IntelliSwing::ImageData>* PrepareAsyncGetClubImageStreamRaw(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::IntelliSwing::ImageData>* GetBallImageStreamRaw(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request) override;
    ::grpc::ClientAsyncReader< ::IntelliSwing::ImageData>* AsyncGetBallImageStreamRaw(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::IntelliSwing::ImageData>* PrepareAsyncGetBallImageStreamRaw(::grpc::ClientContext* context, const ::IntelliSwing::ShotImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::DeviceInfo>* AsyncGetDeviceInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::DeviceInfo>* PrepareAsyncGetDeviceInfoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::DeviceStatus>* AsyncGetDeviceStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::DeviceStatus>* PrepareAsyncGetDeviceStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::LogMessage>* AsyncGetLogRaw(::grpc::ClientContext* context, const ::IntelliSwing::LogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::LogMessage>* PrepareAsyncGetLogRaw(::grpc::ClientContext* context, const ::IntelliSwing::LogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::SensorStatistics>* AsyncGetStatisticsRaw(::grpc::ClientContext* context, const ::IntelliSwing::StatisticsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::SensorStatistics>* PrepareAsyncGetStatisticsRaw(::grpc::ClientContext* context, const ::IntelliSwing::StatisticsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::SiteCalibrationResult>* AsyncRunSiteCalibrationRaw(::grpc::ClientContext* context, const ::IntelliSwing::SiteCalibrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::SiteCalibrationResult>* PrepareAsyncRunSiteCalibrationRaw(::grpc::ClientContext* context, const ::IntelliSwing::SiteCalibrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::UpdateFirmwareResult>* AsyncUpdateFirmwareRaw(::grpc::ClientContext* context, const ::IntelliSwing::UpdateFirmwareRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::UpdateFirmwareResult>* PrepareAsyncUpdateFirmwareRaw(::grpc::ClientContext* context, const ::IntelliSwing::UpdateFirmwareRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ImageData>* AsyncGetImageRaw(::grpc::ClientContext* context, const ::IntelliSwing::CameraImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::ImageData>* PrepareAsyncGetImageRaw(::grpc::ClientContext* context, const ::IntelliSwing::CameraImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::DebugImage>* AsyncGetDebugImageRaw(::grpc::ClientContext* context, const ::IntelliSwing::DebugImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::DebugImage>* PrepareAsyncGetDebugImageRaw(::grpc::ClientContext* context, const ::IntelliSwing::DebugImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncPingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::CMessage>* AsyncSendCommandRaw(::grpc::ClientContext* context, const ::IntelliSwing::CMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::IntelliSwing::CMessage>* PrepareAsyncSendCommandRaw(::grpc::ClientContext* context, const ::IntelliSwing::CMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncSetTimeRaw(::grpc::ClientContext* context, const ::IntelliSwing::TimeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncSetTimeRaw(::grpc::ClientContext* context, const ::IntelliSwing::TimeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Initialize_;
    const ::grpc::internal::RpcMethod rpcmethod_Release_;
    const ::grpc::internal::RpcMethod rpcmethod_Reboot_;
    const ::grpc::internal::RpcMethod rpcmethod_Start_;
    const ::grpc::internal::RpcMethod rpcmethod_Stop_;
    const ::grpc::internal::RpcMethod rpcmethod_GetClubImage_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBallImage_;
    const ::grpc::internal::RpcMethod rpcmethod_GetClubImageStream_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBallImageStream_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDeviceInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDeviceStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLog_;
    const ::grpc::internal::RpcMethod rpcmethod_GetStatistics_;
    const ::grpc::internal::RpcMethod rpcmethod_RunSiteCalibration_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateFirmware_;
    const ::grpc::internal::RpcMethod rpcmethod_GetImage_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDebugImage_;
    const ::grpc::internal::RpcMethod rpcmethod_Ping_;
    const ::grpc::internal::RpcMethod rpcmethod_SendCommand_;
    const ::grpc::internal::RpcMethod rpcmethod_SetTime_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Common
    virtual ::grpc::Status Initialize(::grpc::ServerContext* context, const ::IntelliSwing::InitializeMsg* request, ::IntelliSwing::ReturnMsg* response);
    virtual ::grpc::Status Release(::grpc::ServerContext* context, const ::IntelliSwing::ReleaseMsg* request, ::IntelliSwing::ReturnMsg* response);
    virtual ::grpc::Status Reboot(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::ReturnMsg* response);
    // Sensor
    virtual ::grpc::Status Start(::grpc::ServerContext* context, const ::IntelliSwing::StartMsg* request, ::grpc::ServerWriter< ::IntelliSwing::SensorRunningMsg>* writer);
    virtual ::grpc::Status Stop(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::ReturnMsg* response);
    virtual ::grpc::Status GetClubImage(::grpc::ServerContext* context, const ::IntelliSwing::ShotImageRequest* request, ::IntelliSwing::ImageData* response);
    virtual ::grpc::Status GetBallImage(::grpc::ServerContext* context, const ::IntelliSwing::ShotImageRequest* request, ::IntelliSwing::ImageData* response);
    virtual ::grpc::Status GetClubImageStream(::grpc::ServerContext* context, const ::IntelliSwing::ShotImageRequest* request, ::grpc::ServerWriter< ::IntelliSwing::ImageData>* writer);
    virtual ::grpc::Status GetBallImageStream(::grpc::ServerContext* context, const ::IntelliSwing::ShotImageRequest* request, ::grpc::ServerWriter< ::IntelliSwing::ImageData>* writer);
    // Service
    virtual ::grpc::Status GetDeviceInfo(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::DeviceInfo* response);
    virtual ::grpc::Status GetDeviceStatus(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::IntelliSwing::DeviceStatus* response);
    virtual ::grpc::Status GetLog(::grpc::ServerContext* context, const ::IntelliSwing::LogRequest* request, ::IntelliSwing::LogMessage* response);
    virtual ::grpc::Status GetStatistics(::grpc::ServerContext* context, const ::IntelliSwing::StatisticsRequest* request, ::IntelliSwing::SensorStatistics* response);
    virtual ::grpc::Status RunSiteCalibration(::grpc::ServerContext* context, const ::IntelliSwing::SiteCalibrationRequest* request, ::IntelliSwing::SiteCalibrationResult* response);
    virtual ::grpc::Status UpdateFirmware(::grpc::ServerContext* context, const ::IntelliSwing::UpdateFirmwareRequest* request, ::IntelliSwing::UpdateFirmwareResult* response);
    virtual ::grpc::Status GetImage(::grpc::ServerContext* context, const ::IntelliSwing::CameraImageRequest* request, ::IntelliSwing::ImageData* response);
    virtual ::grpc::Status GetDebugImage(::grpc::ServerContext* context, const ::IntelliSwing::DebugImageRequest* request, ::IntelliSwing::DebugImage* response);
    virtual ::grpc::Status Ping(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status SendCommand(::grpc::ServerContext* context, const ::IntelliSwing::CMessage* request, ::IntelliSwing::CMessage* response);
    virtual ::grpc::Status SetTime(::grpc::ServerContext* context, const ::IntelliSwing::TimeRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Initialize() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, const ::IntelliSwing::InitializeMsg* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitialize(::grpc::ServerContext* context, ::IntelliSwing::InitializeMsg* request, ::grpc::ServerAsyncResponseWriter< ::IntelliSwing::ReturnMsg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Release : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Release() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Release() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Release(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ReleaseMsg* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRelease(::grpc::ServerContext* context, ::IntelliSwing::ReleaseMsg* request, ::grpc::ServerAsyncResponseWriter< ::IntelliSwing::ReturnMsg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Reboot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Reboot() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Reboot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reboot(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReboot(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::IntelliSwing::ReturnMsg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Start() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::IntelliSwing::StartMsg* /*request*/, ::grpc::ServerWriter< ::IntelliSwing::SensorRunningMsg>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStart(::grpc::ServerContext* context, ::IntelliSwing::StartMsg* request, ::grpc::ServerAsyncWriter< ::IntelliSwing::SensorRunningMsg>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Stop() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::IntelliSwing::ReturnMsg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetClubImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetClubImage() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetClubImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClubImage(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::IntelliSwing::ImageData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetClubImage(::grpc::ServerContext* context, ::IntelliSwing::ShotImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::IntelliSwing::ImageData>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBallImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBallImage() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetBallImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBallImage(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::IntelliSwing::ImageData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBallImage(::grpc::ServerContext* context, ::IntelliSwing::ShotImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::IntelliSwing::ImageData>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetClubImageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetClubImageStream() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetClubImageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClubImageStream(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::grpc::ServerWriter< ::IntelliSwing::ImageData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetClubImageStream(::grpc::ServerContext* context, ::IntelliSwing::ShotImageRequest* request, ::grpc::ServerAsyncWriter< ::IntelliSwing::ImageData>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBallImageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBallImageStream() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetBallImageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBallImageStream(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::grpc::ServerWriter< ::IntelliSwing::ImageData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBallImageStream(::grpc::ServerContext* context, ::IntelliSwing::ShotImageRequest* request, ::grpc::ServerAsyncWriter< ::IntelliSwing::ImageData>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDeviceInfo() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::DeviceInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceInfo(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::IntelliSwing::DeviceInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDeviceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDeviceStatus() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetDeviceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceStatus(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::DeviceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceStatus(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::IntelliSwing::DeviceStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLog() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLog(::grpc::ServerContext* /*context*/, const ::IntelliSwing::LogRequest* /*request*/, ::IntelliSwing::LogMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLog(::grpc::ServerContext* context, ::IntelliSwing::LogRequest* request, ::grpc::ServerAsyncResponseWriter< ::IntelliSwing::LogMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStatistics() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatistics(::grpc::ServerContext* /*context*/, const ::IntelliSwing::StatisticsRequest* /*request*/, ::IntelliSwing::SensorStatistics* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatistics(::grpc::ServerContext* context, ::IntelliSwing::StatisticsRequest* request, ::grpc::ServerAsyncResponseWriter< ::IntelliSwing::SensorStatistics>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RunSiteCalibration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RunSiteCalibration() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_RunSiteCalibration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunSiteCalibration(::grpc::ServerContext* /*context*/, const ::IntelliSwing::SiteCalibrationRequest* /*request*/, ::IntelliSwing::SiteCalibrationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunSiteCalibration(::grpc::ServerContext* context, ::IntelliSwing::SiteCalibrationRequest* request, ::grpc::ServerAsyncResponseWriter< ::IntelliSwing::SiteCalibrationResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateFirmware : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateFirmware() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_UpdateFirmware() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFirmware(::grpc::ServerContext* /*context*/, const ::IntelliSwing::UpdateFirmwareRequest* /*request*/, ::IntelliSwing::UpdateFirmwareResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateFirmware(::grpc::ServerContext* context, ::IntelliSwing::UpdateFirmwareRequest* request, ::grpc::ServerAsyncResponseWriter< ::IntelliSwing::UpdateFirmwareResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetImage() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::IntelliSwing::CameraImageRequest* /*request*/, ::IntelliSwing::ImageData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImage(::grpc::ServerContext* context, ::IntelliSwing::CameraImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::IntelliSwing::ImageData>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDebugImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDebugImage() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_GetDebugImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDebugImage(::grpc::ServerContext* /*context*/, const ::IntelliSwing::DebugImageRequest* /*request*/, ::IntelliSwing::DebugImage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDebugImage(::grpc::ServerContext* context, ::IntelliSwing::DebugImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::IntelliSwing::DebugImage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Ping() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendCommand() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_SendCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCommand(::grpc::ServerContext* /*context*/, const ::IntelliSwing::CMessage* /*request*/, ::IntelliSwing::CMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendCommand(::grpc::ServerContext* context, ::IntelliSwing::CMessage* request, ::grpc::ServerAsyncResponseWriter< ::IntelliSwing::CMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetTime() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_SetTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTime(::grpc::ServerContext* /*context*/, const ::IntelliSwing::TimeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTime(::grpc::ServerContext* context, ::IntelliSwing::TimeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Initialize<WithAsyncMethod_Release<WithAsyncMethod_Reboot<WithAsyncMethod_Start<WithAsyncMethod_Stop<WithAsyncMethod_GetClubImage<WithAsyncMethod_GetBallImage<WithAsyncMethod_GetClubImageStream<WithAsyncMethod_GetBallImageStream<WithAsyncMethod_GetDeviceInfo<WithAsyncMethod_GetDeviceStatus<WithAsyncMethod_GetLog<WithAsyncMethod_GetStatistics<WithAsyncMethod_RunSiteCalibration<WithAsyncMethod_UpdateFirmware<WithAsyncMethod_GetImage<WithAsyncMethod_GetDebugImage<WithAsyncMethod_Ping<WithAsyncMethod_SendCommand<WithAsyncMethod_SetTime<Service > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Initialize() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::IntelliSwing::InitializeMsg, ::IntelliSwing::ReturnMsg>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::IntelliSwing::InitializeMsg* request, ::IntelliSwing::ReturnMsg* response) { return this->Initialize(context, request, response); }));}
    void SetMessageAllocatorFor_Initialize(
        ::grpc::experimental::MessageAllocator< ::IntelliSwing::InitializeMsg, ::IntelliSwing::ReturnMsg>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::IntelliSwing::InitializeMsg, ::IntelliSwing::ReturnMsg>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, const ::IntelliSwing::InitializeMsg* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Initialize(
      ::grpc::CallbackServerContext* /*context*/, const ::IntelliSwing::InitializeMsg* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Initialize(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::IntelliSwing::InitializeMsg* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Release : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Release() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::IntelliSwing::ReleaseMsg, ::IntelliSwing::ReturnMsg>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::IntelliSwing::ReleaseMsg* request, ::IntelliSwing::ReturnMsg* response) { return this->Release(context, request, response); }));}
    void SetMessageAllocatorFor_Release(
        ::grpc::experimental::MessageAllocator< ::IntelliSwing::ReleaseMsg, ::IntelliSwing::ReturnMsg>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::IntelliSwing::ReleaseMsg, ::IntelliSwing::ReturnMsg>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Release() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Release(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ReleaseMsg* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Release(
      ::grpc::CallbackServerContext* /*context*/, const ::IntelliSwing::ReleaseMsg* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Release(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::IntelliSwing::ReleaseMsg* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Reboot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Reboot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::IntelliSwing::ReturnMsg>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::IntelliSwing::ReturnMsg* response) { return this->Reboot(context, request, response); }));}
    void SetMessageAllocatorFor_Reboot(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::IntelliSwing::ReturnMsg>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::IntelliSwing::ReturnMsg>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Reboot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reboot(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Reboot(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Reboot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Start() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::IntelliSwing::StartMsg, ::IntelliSwing::SensorRunningMsg>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::IntelliSwing::StartMsg* request) { return this->Start(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::IntelliSwing::StartMsg* /*request*/, ::grpc::ServerWriter< ::IntelliSwing::SensorRunningMsg>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::IntelliSwing::SensorRunningMsg>* Start(
      ::grpc::CallbackServerContext* /*context*/, const ::IntelliSwing::StartMsg* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::IntelliSwing::SensorRunningMsg>* Start(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::IntelliSwing::StartMsg* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Stop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::IntelliSwing::ReturnMsg>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::IntelliSwing::ReturnMsg* response) { return this->Stop(context, request, response); }));}
    void SetMessageAllocatorFor_Stop(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::IntelliSwing::ReturnMsg>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::IntelliSwing::ReturnMsg>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Stop(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Stop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetClubImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetClubImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::IntelliSwing::ShotImageRequest, ::IntelliSwing::ImageData>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::IntelliSwing::ShotImageRequest* request, ::IntelliSwing::ImageData* response) { return this->GetClubImage(context, request, response); }));}
    void SetMessageAllocatorFor_GetClubImage(
        ::grpc::experimental::MessageAllocator< ::IntelliSwing::ShotImageRequest, ::IntelliSwing::ImageData>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::IntelliSwing::ShotImageRequest, ::IntelliSwing::ImageData>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetClubImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClubImage(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::IntelliSwing::ImageData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetClubImage(
      ::grpc::CallbackServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::IntelliSwing::ImageData* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetClubImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::IntelliSwing::ImageData* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetBallImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetBallImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::IntelliSwing::ShotImageRequest, ::IntelliSwing::ImageData>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::IntelliSwing::ShotImageRequest* request, ::IntelliSwing::ImageData* response) { return this->GetBallImage(context, request, response); }));}
    void SetMessageAllocatorFor_GetBallImage(
        ::grpc::experimental::MessageAllocator< ::IntelliSwing::ShotImageRequest, ::IntelliSwing::ImageData>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::IntelliSwing::ShotImageRequest, ::IntelliSwing::ImageData>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetBallImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBallImage(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::IntelliSwing::ImageData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBallImage(
      ::grpc::CallbackServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::IntelliSwing::ImageData* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBallImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::IntelliSwing::ImageData* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetClubImageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetClubImageStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackServerStreamingHandler< ::IntelliSwing::ShotImageRequest, ::IntelliSwing::ImageData>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::IntelliSwing::ShotImageRequest* request) { return this->GetClubImageStream(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetClubImageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClubImageStream(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::grpc::ServerWriter< ::IntelliSwing::ImageData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::IntelliSwing::ImageData>* GetClubImageStream(
      ::grpc::CallbackServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::IntelliSwing::ImageData>* GetClubImageStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetBallImageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetBallImageStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackServerStreamingHandler< ::IntelliSwing::ShotImageRequest, ::IntelliSwing::ImageData>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::IntelliSwing::ShotImageRequest* request) { return this->GetBallImageStream(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetBallImageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBallImageStream(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::grpc::ServerWriter< ::IntelliSwing::ImageData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::IntelliSwing::ImageData>* GetBallImageStream(
      ::grpc::CallbackServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::IntelliSwing::ImageData>* GetBallImageStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetDeviceInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::IntelliSwing::DeviceInfo>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::IntelliSwing::DeviceInfo* response) { return this->GetDeviceInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetDeviceInfo(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::IntelliSwing::DeviceInfo>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::IntelliSwing::DeviceInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::DeviceInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDeviceInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::DeviceInfo* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDeviceInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::DeviceInfo* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetDeviceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetDeviceStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::IntelliSwing::DeviceStatus>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::IntelliSwing::DeviceStatus* response) { return this->GetDeviceStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetDeviceStatus(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::IntelliSwing::DeviceStatus>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::IntelliSwing::DeviceStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetDeviceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceStatus(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::DeviceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDeviceStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::DeviceStatus* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDeviceStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::DeviceStatus* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetLog() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::IntelliSwing::LogRequest, ::IntelliSwing::LogMessage>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::IntelliSwing::LogRequest* request, ::IntelliSwing::LogMessage* response) { return this->GetLog(context, request, response); }));}
    void SetMessageAllocatorFor_GetLog(
        ::grpc::experimental::MessageAllocator< ::IntelliSwing::LogRequest, ::IntelliSwing::LogMessage>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(11);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::IntelliSwing::LogRequest, ::IntelliSwing::LogMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLog(::grpc::ServerContext* /*context*/, const ::IntelliSwing::LogRequest* /*request*/, ::IntelliSwing::LogMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetLog(
      ::grpc::CallbackServerContext* /*context*/, const ::IntelliSwing::LogRequest* /*request*/, ::IntelliSwing::LogMessage* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetLog(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::IntelliSwing::LogRequest* /*request*/, ::IntelliSwing::LogMessage* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetStatistics() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::IntelliSwing::StatisticsRequest, ::IntelliSwing::SensorStatistics>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::IntelliSwing::StatisticsRequest* request, ::IntelliSwing::SensorStatistics* response) { return this->GetStatistics(context, request, response); }));}
    void SetMessageAllocatorFor_GetStatistics(
        ::grpc::experimental::MessageAllocator< ::IntelliSwing::StatisticsRequest, ::IntelliSwing::SensorStatistics>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(12);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::IntelliSwing::StatisticsRequest, ::IntelliSwing::SensorStatistics>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatistics(::grpc::ServerContext* /*context*/, const ::IntelliSwing::StatisticsRequest* /*request*/, ::IntelliSwing::SensorStatistics* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetStatistics(
      ::grpc::CallbackServerContext* /*context*/, const ::IntelliSwing::StatisticsRequest* /*request*/, ::IntelliSwing::SensorStatistics* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetStatistics(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::IntelliSwing::StatisticsRequest* /*request*/, ::IntelliSwing::SensorStatistics* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RunSiteCalibration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RunSiteCalibration() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::IntelliSwing::SiteCalibrationRequest, ::IntelliSwing::SiteCalibrationResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::IntelliSwing::SiteCalibrationRequest* request, ::IntelliSwing::SiteCalibrationResult* response) { return this->RunSiteCalibration(context, request, response); }));}
    void SetMessageAllocatorFor_RunSiteCalibration(
        ::grpc::experimental::MessageAllocator< ::IntelliSwing::SiteCalibrationRequest, ::IntelliSwing::SiteCalibrationResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(13);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::IntelliSwing::SiteCalibrationRequest, ::IntelliSwing::SiteCalibrationResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RunSiteCalibration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunSiteCalibration(::grpc::ServerContext* /*context*/, const ::IntelliSwing::SiteCalibrationRequest* /*request*/, ::IntelliSwing::SiteCalibrationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RunSiteCalibration(
      ::grpc::CallbackServerContext* /*context*/, const ::IntelliSwing::SiteCalibrationRequest* /*request*/, ::IntelliSwing::SiteCalibrationResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RunSiteCalibration(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::IntelliSwing::SiteCalibrationRequest* /*request*/, ::IntelliSwing::SiteCalibrationResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateFirmware : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateFirmware() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::IntelliSwing::UpdateFirmwareRequest, ::IntelliSwing::UpdateFirmwareResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::IntelliSwing::UpdateFirmwareRequest* request, ::IntelliSwing::UpdateFirmwareResult* response) { return this->UpdateFirmware(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateFirmware(
        ::grpc::experimental::MessageAllocator< ::IntelliSwing::UpdateFirmwareRequest, ::IntelliSwing::UpdateFirmwareResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(14);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::IntelliSwing::UpdateFirmwareRequest, ::IntelliSwing::UpdateFirmwareResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateFirmware() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFirmware(::grpc::ServerContext* /*context*/, const ::IntelliSwing::UpdateFirmwareRequest* /*request*/, ::IntelliSwing::UpdateFirmwareResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateFirmware(
      ::grpc::CallbackServerContext* /*context*/, const ::IntelliSwing::UpdateFirmwareRequest* /*request*/, ::IntelliSwing::UpdateFirmwareResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateFirmware(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::IntelliSwing::UpdateFirmwareRequest* /*request*/, ::IntelliSwing::UpdateFirmwareResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::IntelliSwing::CameraImageRequest, ::IntelliSwing::ImageData>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::IntelliSwing::CameraImageRequest* request, ::IntelliSwing::ImageData* response) { return this->GetImage(context, request, response); }));}
    void SetMessageAllocatorFor_GetImage(
        ::grpc::experimental::MessageAllocator< ::IntelliSwing::CameraImageRequest, ::IntelliSwing::ImageData>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(15);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::IntelliSwing::CameraImageRequest, ::IntelliSwing::ImageData>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::IntelliSwing::CameraImageRequest* /*request*/, ::IntelliSwing::ImageData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetImage(
      ::grpc::CallbackServerContext* /*context*/, const ::IntelliSwing::CameraImageRequest* /*request*/, ::IntelliSwing::ImageData* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::IntelliSwing::CameraImageRequest* /*request*/, ::IntelliSwing::ImageData* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetDebugImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetDebugImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::IntelliSwing::DebugImageRequest, ::IntelliSwing::DebugImage>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::IntelliSwing::DebugImageRequest* request, ::IntelliSwing::DebugImage* response) { return this->GetDebugImage(context, request, response); }));}
    void SetMessageAllocatorFor_GetDebugImage(
        ::grpc::experimental::MessageAllocator< ::IntelliSwing::DebugImageRequest, ::IntelliSwing::DebugImage>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(16);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::IntelliSwing::DebugImageRequest, ::IntelliSwing::DebugImage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetDebugImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDebugImage(::grpc::ServerContext* /*context*/, const ::IntelliSwing::DebugImageRequest* /*request*/, ::IntelliSwing::DebugImage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDebugImage(
      ::grpc::CallbackServerContext* /*context*/, const ::IntelliSwing::DebugImageRequest* /*request*/, ::IntelliSwing::DebugImage* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDebugImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::IntelliSwing::DebugImageRequest* /*request*/, ::IntelliSwing::DebugImage* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Ping() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) { return this->Ping(context, request, response); }));}
    void SetMessageAllocatorFor_Ping(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(17);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Ping(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendCommand() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::IntelliSwing::CMessage, ::IntelliSwing::CMessage>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::IntelliSwing::CMessage* request, ::IntelliSwing::CMessage* response) { return this->SendCommand(context, request, response); }));}
    void SetMessageAllocatorFor_SendCommand(
        ::grpc::experimental::MessageAllocator< ::IntelliSwing::CMessage, ::IntelliSwing::CMessage>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(18);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::IntelliSwing::CMessage, ::IntelliSwing::CMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCommand(::grpc::ServerContext* /*context*/, const ::IntelliSwing::CMessage* /*request*/, ::IntelliSwing::CMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::IntelliSwing::CMessage* /*request*/, ::IntelliSwing::CMessage* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendCommand(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::IntelliSwing::CMessage* /*request*/, ::IntelliSwing::CMessage* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetTime() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::IntelliSwing::TimeRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::IntelliSwing::TimeRequest* request, ::google::protobuf::Empty* response) { return this->SetTime(context, request, response); }));}
    void SetMessageAllocatorFor_SetTime(
        ::grpc::experimental::MessageAllocator< ::IntelliSwing::TimeRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(19);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::IntelliSwing::TimeRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTime(::grpc::ServerContext* /*context*/, const ::IntelliSwing::TimeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetTime(
      ::grpc::CallbackServerContext* /*context*/, const ::IntelliSwing::TimeRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetTime(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::IntelliSwing::TimeRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Initialize<ExperimentalWithCallbackMethod_Release<ExperimentalWithCallbackMethod_Reboot<ExperimentalWithCallbackMethod_Start<ExperimentalWithCallbackMethod_Stop<ExperimentalWithCallbackMethod_GetClubImage<ExperimentalWithCallbackMethod_GetBallImage<ExperimentalWithCallbackMethod_GetClubImageStream<ExperimentalWithCallbackMethod_GetBallImageStream<ExperimentalWithCallbackMethod_GetDeviceInfo<ExperimentalWithCallbackMethod_GetDeviceStatus<ExperimentalWithCallbackMethod_GetLog<ExperimentalWithCallbackMethod_GetStatistics<ExperimentalWithCallbackMethod_RunSiteCalibration<ExperimentalWithCallbackMethod_UpdateFirmware<ExperimentalWithCallbackMethod_GetImage<ExperimentalWithCallbackMethod_GetDebugImage<ExperimentalWithCallbackMethod_Ping<ExperimentalWithCallbackMethod_SendCommand<ExperimentalWithCallbackMethod_SetTime<Service > > > > > > > > > > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Initialize<ExperimentalWithCallbackMethod_Release<ExperimentalWithCallbackMethod_Reboot<ExperimentalWithCallbackMethod_Start<ExperimentalWithCallbackMethod_Stop<ExperimentalWithCallbackMethod_GetClubImage<ExperimentalWithCallbackMethod_GetBallImage<ExperimentalWithCallbackMethod_GetClubImageStream<ExperimentalWithCallbackMethod_GetBallImageStream<ExperimentalWithCallbackMethod_GetDeviceInfo<ExperimentalWithCallbackMethod_GetDeviceStatus<ExperimentalWithCallbackMethod_GetLog<ExperimentalWithCallbackMethod_GetStatistics<ExperimentalWithCallbackMethod_RunSiteCalibration<ExperimentalWithCallbackMethod_UpdateFirmware<ExperimentalWithCallbackMethod_GetImage<ExperimentalWithCallbackMethod_GetDebugImage<ExperimentalWithCallbackMethod_Ping<ExperimentalWithCallbackMethod_SendCommand<ExperimentalWithCallbackMethod_SetTime<Service > > > > > > > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Initialize() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, const ::IntelliSwing::InitializeMsg* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Release : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Release() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Release() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Release(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ReleaseMsg* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Reboot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Reboot() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Reboot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reboot(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Start() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::IntelliSwing::StartMsg* /*request*/, ::grpc::ServerWriter< ::IntelliSwing::SensorRunningMsg>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Stop() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetClubImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetClubImage() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetClubImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClubImage(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::IntelliSwing::ImageData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBallImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBallImage() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetBallImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBallImage(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::IntelliSwing::ImageData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetClubImageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetClubImageStream() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetClubImageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClubImageStream(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::grpc::ServerWriter< ::IntelliSwing::ImageData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBallImageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBallImageStream() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetBallImageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBallImageStream(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::grpc::ServerWriter< ::IntelliSwing::ImageData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDeviceInfo() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::DeviceInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDeviceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDeviceStatus() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetDeviceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceStatus(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::DeviceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLog() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLog(::grpc::ServerContext* /*context*/, const ::IntelliSwing::LogRequest* /*request*/, ::IntelliSwing::LogMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStatistics() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatistics(::grpc::ServerContext* /*context*/, const ::IntelliSwing::StatisticsRequest* /*request*/, ::IntelliSwing::SensorStatistics* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RunSiteCalibration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RunSiteCalibration() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_RunSiteCalibration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunSiteCalibration(::grpc::ServerContext* /*context*/, const ::IntelliSwing::SiteCalibrationRequest* /*request*/, ::IntelliSwing::SiteCalibrationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateFirmware : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateFirmware() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_UpdateFirmware() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFirmware(::grpc::ServerContext* /*context*/, const ::IntelliSwing::UpdateFirmwareRequest* /*request*/, ::IntelliSwing::UpdateFirmwareResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetImage() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::IntelliSwing::CameraImageRequest* /*request*/, ::IntelliSwing::ImageData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDebugImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDebugImage() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_GetDebugImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDebugImage(::grpc::ServerContext* /*context*/, const ::IntelliSwing::DebugImageRequest* /*request*/, ::IntelliSwing::DebugImage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Ping() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendCommand() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_SendCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCommand(::grpc::ServerContext* /*context*/, const ::IntelliSwing::CMessage* /*request*/, ::IntelliSwing::CMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetTime() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_SetTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTime(::grpc::ServerContext* /*context*/, const ::IntelliSwing::TimeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Initialize() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, const ::IntelliSwing::InitializeMsg* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitialize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Release : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Release() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Release() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Release(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ReleaseMsg* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRelease(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Reboot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Reboot() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Reboot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reboot(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReboot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Start() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::IntelliSwing::StartMsg* /*request*/, ::grpc::ServerWriter< ::IntelliSwing::SensorRunningMsg>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Stop() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetClubImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetClubImage() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetClubImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClubImage(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::IntelliSwing::ImageData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetClubImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBallImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBallImage() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetBallImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBallImage(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::IntelliSwing::ImageData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBallImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetClubImageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetClubImageStream() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetClubImageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClubImageStream(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::grpc::ServerWriter< ::IntelliSwing::ImageData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetClubImageStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBallImageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBallImageStream() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetBallImageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBallImageStream(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::grpc::ServerWriter< ::IntelliSwing::ImageData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBallImageStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDeviceInfo() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::DeviceInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDeviceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDeviceStatus() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetDeviceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceStatus(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::DeviceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLog() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLog(::grpc::ServerContext* /*context*/, const ::IntelliSwing::LogRequest* /*request*/, ::IntelliSwing::LogMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStatistics() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatistics(::grpc::ServerContext* /*context*/, const ::IntelliSwing::StatisticsRequest* /*request*/, ::IntelliSwing::SensorStatistics* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatistics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RunSiteCalibration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RunSiteCalibration() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_RunSiteCalibration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunSiteCalibration(::grpc::ServerContext* /*context*/, const ::IntelliSwing::SiteCalibrationRequest* /*request*/, ::IntelliSwing::SiteCalibrationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunSiteCalibration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateFirmware : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateFirmware() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_UpdateFirmware() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFirmware(::grpc::ServerContext* /*context*/, const ::IntelliSwing::UpdateFirmwareRequest* /*request*/, ::IntelliSwing::UpdateFirmwareResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateFirmware(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetImage() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::IntelliSwing::CameraImageRequest* /*request*/, ::IntelliSwing::ImageData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDebugImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDebugImage() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_GetDebugImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDebugImage(::grpc::ServerContext* /*context*/, const ::IntelliSwing::DebugImageRequest* /*request*/, ::IntelliSwing::DebugImage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDebugImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Ping() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendCommand() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_SendCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCommand(::grpc::ServerContext* /*context*/, const ::IntelliSwing::CMessage* /*request*/, ::IntelliSwing::CMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendCommand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetTime() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_SetTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTime(::grpc::ServerContext* /*context*/, const ::IntelliSwing::TimeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTime(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Initialize() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Initialize(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, const ::IntelliSwing::InitializeMsg* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Initialize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Initialize(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Release : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Release() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Release(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Release() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Release(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ReleaseMsg* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Release(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Release(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Reboot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Reboot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Reboot(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Reboot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reboot(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Reboot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Reboot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Start() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->Start(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::IntelliSwing::StartMsg* /*request*/, ::grpc::ServerWriter< ::IntelliSwing::SensorRunningMsg>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Start(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* Start(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Stop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Stop(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Stop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetClubImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetClubImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetClubImage(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetClubImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClubImage(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::IntelliSwing::ImageData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetClubImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetClubImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetBallImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetBallImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBallImage(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetBallImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBallImage(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::IntelliSwing::ImageData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBallImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBallImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetClubImageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetClubImageStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetClubImageStream(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetClubImageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClubImageStream(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::grpc::ServerWriter< ::IntelliSwing::ImageData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetClubImageStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetClubImageStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetBallImageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetBallImageStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetBallImageStream(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetBallImageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBallImageStream(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::grpc::ServerWriter< ::IntelliSwing::ImageData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetBallImageStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetBallImageStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetDeviceInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDeviceInfo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::DeviceInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDeviceInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDeviceInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetDeviceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetDeviceStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDeviceStatus(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetDeviceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceStatus(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::DeviceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDeviceStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDeviceStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetLog() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLog(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLog(::grpc::ServerContext* /*context*/, const ::IntelliSwing::LogRequest* /*request*/, ::IntelliSwing::LogMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetLog(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetLog(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetStatistics() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetStatistics(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatistics(::grpc::ServerContext* /*context*/, const ::IntelliSwing::StatisticsRequest* /*request*/, ::IntelliSwing::SensorStatistics* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetStatistics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetStatistics(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RunSiteCalibration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RunSiteCalibration() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RunSiteCalibration(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RunSiteCalibration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunSiteCalibration(::grpc::ServerContext* /*context*/, const ::IntelliSwing::SiteCalibrationRequest* /*request*/, ::IntelliSwing::SiteCalibrationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RunSiteCalibration(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RunSiteCalibration(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateFirmware : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateFirmware() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateFirmware(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateFirmware() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFirmware(::grpc::ServerContext* /*context*/, const ::IntelliSwing::UpdateFirmwareRequest* /*request*/, ::IntelliSwing::UpdateFirmwareResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateFirmware(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateFirmware(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetImage(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::IntelliSwing::CameraImageRequest* /*request*/, ::IntelliSwing::ImageData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetDebugImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetDebugImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDebugImage(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetDebugImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDebugImage(::grpc::ServerContext* /*context*/, const ::IntelliSwing::DebugImageRequest* /*request*/, ::IntelliSwing::DebugImage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDebugImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDebugImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Ping() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Ping(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Ping(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendCommand() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendCommand(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCommand(::grpc::ServerContext* /*context*/, const ::IntelliSwing::CMessage* /*request*/, ::IntelliSwing::CMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendCommand(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetTime() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetTime(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTime(::grpc::ServerContext* /*context*/, const ::IntelliSwing::TimeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetTime(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetTime(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Initialize() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::IntelliSwing::InitializeMsg, ::IntelliSwing::ReturnMsg>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::IntelliSwing::InitializeMsg, ::IntelliSwing::ReturnMsg>* streamer) {
                       return this->StreamedInitialize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, const ::IntelliSwing::InitializeMsg* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInitialize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IntelliSwing::InitializeMsg,::IntelliSwing::ReturnMsg>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Release : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Release() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::IntelliSwing::ReleaseMsg, ::IntelliSwing::ReturnMsg>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::IntelliSwing::ReleaseMsg, ::IntelliSwing::ReturnMsg>* streamer) {
                       return this->StreamedRelease(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Release() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Release(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ReleaseMsg* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRelease(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IntelliSwing::ReleaseMsg,::IntelliSwing::ReturnMsg>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Reboot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Reboot() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::IntelliSwing::ReturnMsg>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::IntelliSwing::ReturnMsg>* streamer) {
                       return this->StreamedReboot(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Reboot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Reboot(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReboot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::IntelliSwing::ReturnMsg>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Stop() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::IntelliSwing::ReturnMsg>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::IntelliSwing::ReturnMsg>* streamer) {
                       return this->StreamedStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::ReturnMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::IntelliSwing::ReturnMsg>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetClubImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetClubImage() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::IntelliSwing::ShotImageRequest, ::IntelliSwing::ImageData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::IntelliSwing::ShotImageRequest, ::IntelliSwing::ImageData>* streamer) {
                       return this->StreamedGetClubImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetClubImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetClubImage(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::IntelliSwing::ImageData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetClubImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IntelliSwing::ShotImageRequest,::IntelliSwing::ImageData>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBallImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBallImage() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::IntelliSwing::ShotImageRequest, ::IntelliSwing::ImageData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::IntelliSwing::ShotImageRequest, ::IntelliSwing::ImageData>* streamer) {
                       return this->StreamedGetBallImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBallImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBallImage(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::IntelliSwing::ImageData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBallImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IntelliSwing::ShotImageRequest,::IntelliSwing::ImageData>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDeviceInfo() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::IntelliSwing::DeviceInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::IntelliSwing::DeviceInfo>* streamer) {
                       return this->StreamedGetDeviceInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDeviceInfo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::DeviceInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDeviceInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::IntelliSwing::DeviceInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDeviceStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDeviceStatus() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::IntelliSwing::DeviceStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::IntelliSwing::DeviceStatus>* streamer) {
                       return this->StreamedGetDeviceStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDeviceStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDeviceStatus(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::IntelliSwing::DeviceStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDeviceStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::IntelliSwing::DeviceStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLog() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::IntelliSwing::LogRequest, ::IntelliSwing::LogMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::IntelliSwing::LogRequest, ::IntelliSwing::LogMessage>* streamer) {
                       return this->StreamedGetLog(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLog(::grpc::ServerContext* /*context*/, const ::IntelliSwing::LogRequest* /*request*/, ::IntelliSwing::LogMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IntelliSwing::LogRequest,::IntelliSwing::LogMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStatistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetStatistics() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::IntelliSwing::StatisticsRequest, ::IntelliSwing::SensorStatistics>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::IntelliSwing::StatisticsRequest, ::IntelliSwing::SensorStatistics>* streamer) {
                       return this->StreamedGetStatistics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetStatistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStatistics(::grpc::ServerContext* /*context*/, const ::IntelliSwing::StatisticsRequest* /*request*/, ::IntelliSwing::SensorStatistics* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStatistics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IntelliSwing::StatisticsRequest,::IntelliSwing::SensorStatistics>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RunSiteCalibration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RunSiteCalibration() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::IntelliSwing::SiteCalibrationRequest, ::IntelliSwing::SiteCalibrationResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::IntelliSwing::SiteCalibrationRequest, ::IntelliSwing::SiteCalibrationResult>* streamer) {
                       return this->StreamedRunSiteCalibration(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RunSiteCalibration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RunSiteCalibration(::grpc::ServerContext* /*context*/, const ::IntelliSwing::SiteCalibrationRequest* /*request*/, ::IntelliSwing::SiteCalibrationResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRunSiteCalibration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IntelliSwing::SiteCalibrationRequest,::IntelliSwing::SiteCalibrationResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateFirmware : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateFirmware() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::IntelliSwing::UpdateFirmwareRequest, ::IntelliSwing::UpdateFirmwareResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::IntelliSwing::UpdateFirmwareRequest, ::IntelliSwing::UpdateFirmwareResult>* streamer) {
                       return this->StreamedUpdateFirmware(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateFirmware() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateFirmware(::grpc::ServerContext* /*context*/, const ::IntelliSwing::UpdateFirmwareRequest* /*request*/, ::IntelliSwing::UpdateFirmwareResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateFirmware(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IntelliSwing::UpdateFirmwareRequest,::IntelliSwing::UpdateFirmwareResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetImage() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::IntelliSwing::CameraImageRequest, ::IntelliSwing::ImageData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::IntelliSwing::CameraImageRequest, ::IntelliSwing::ImageData>* streamer) {
                       return this->StreamedGetImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::IntelliSwing::CameraImageRequest* /*request*/, ::IntelliSwing::ImageData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IntelliSwing::CameraImageRequest,::IntelliSwing::ImageData>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDebugImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDebugImage() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::IntelliSwing::DebugImageRequest, ::IntelliSwing::DebugImage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::IntelliSwing::DebugImageRequest, ::IntelliSwing::DebugImage>* streamer) {
                       return this->StreamedGetDebugImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDebugImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDebugImage(::grpc::ServerContext* /*context*/, const ::IntelliSwing::DebugImageRequest* /*request*/, ::IntelliSwing::DebugImage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDebugImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IntelliSwing::DebugImageRequest,::IntelliSwing::DebugImage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Ping() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedPing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendCommand() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::IntelliSwing::CMessage, ::IntelliSwing::CMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::IntelliSwing::CMessage, ::IntelliSwing::CMessage>* streamer) {
                       return this->StreamedSendCommand(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendCommand(::grpc::ServerContext* /*context*/, const ::IntelliSwing::CMessage* /*request*/, ::IntelliSwing::CMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IntelliSwing::CMessage,::IntelliSwing::CMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetTime() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::IntelliSwing::TimeRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::IntelliSwing::TimeRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedSetTime(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetTime(::grpc::ServerContext* /*context*/, const ::IntelliSwing::TimeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetTime(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::IntelliSwing::TimeRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Initialize<WithStreamedUnaryMethod_Release<WithStreamedUnaryMethod_Reboot<WithStreamedUnaryMethod_Stop<WithStreamedUnaryMethod_GetClubImage<WithStreamedUnaryMethod_GetBallImage<WithStreamedUnaryMethod_GetDeviceInfo<WithStreamedUnaryMethod_GetDeviceStatus<WithStreamedUnaryMethod_GetLog<WithStreamedUnaryMethod_GetStatistics<WithStreamedUnaryMethod_RunSiteCalibration<WithStreamedUnaryMethod_UpdateFirmware<WithStreamedUnaryMethod_GetImage<WithStreamedUnaryMethod_GetDebugImage<WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_SendCommand<WithStreamedUnaryMethod_SetTime<Service > > > > > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Start() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::IntelliSwing::StartMsg, ::IntelliSwing::SensorRunningMsg>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::IntelliSwing::StartMsg, ::IntelliSwing::SensorRunningMsg>* streamer) {
                       return this->StreamedStart(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::IntelliSwing::StartMsg* /*request*/, ::grpc::ServerWriter< ::IntelliSwing::SensorRunningMsg>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStart(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::IntelliSwing::StartMsg,::IntelliSwing::SensorRunningMsg>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetClubImageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetClubImageStream() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::IntelliSwing::ShotImageRequest, ::IntelliSwing::ImageData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::IntelliSwing::ShotImageRequest, ::IntelliSwing::ImageData>* streamer) {
                       return this->StreamedGetClubImageStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetClubImageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetClubImageStream(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::grpc::ServerWriter< ::IntelliSwing::ImageData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetClubImageStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::IntelliSwing::ShotImageRequest,::IntelliSwing::ImageData>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetBallImageStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetBallImageStream() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::IntelliSwing::ShotImageRequest, ::IntelliSwing::ImageData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::IntelliSwing::ShotImageRequest, ::IntelliSwing::ImageData>* streamer) {
                       return this->StreamedGetBallImageStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetBallImageStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBallImageStream(::grpc::ServerContext* /*context*/, const ::IntelliSwing::ShotImageRequest* /*request*/, ::grpc::ServerWriter< ::IntelliSwing::ImageData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetBallImageStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::IntelliSwing::ShotImageRequest,::IntelliSwing::ImageData>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Start<WithSplitStreamingMethod_GetClubImageStream<WithSplitStreamingMethod_GetBallImageStream<Service > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Initialize<WithStreamedUnaryMethod_Release<WithStreamedUnaryMethod_Reboot<WithSplitStreamingMethod_Start<WithStreamedUnaryMethod_Stop<WithStreamedUnaryMethod_GetClubImage<WithStreamedUnaryMethod_GetBallImage<WithSplitStreamingMethod_GetClubImageStream<WithSplitStreamingMethod_GetBallImageStream<WithStreamedUnaryMethod_GetDeviceInfo<WithStreamedUnaryMethod_GetDeviceStatus<WithStreamedUnaryMethod_GetLog<WithStreamedUnaryMethod_GetStatistics<WithStreamedUnaryMethod_RunSiteCalibration<WithStreamedUnaryMethod_UpdateFirmware<WithStreamedUnaryMethod_GetImage<WithStreamedUnaryMethod_GetDebugImage<WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_SendCommand<WithStreamedUnaryMethod_SetTime<Service > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace IntelliSwing


#endif  // GRPC_IntelliSwingInterface_2eproto__INCLUDED
