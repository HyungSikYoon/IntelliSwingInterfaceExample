// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IntelliSwingInterface.proto

#include "IntelliSwingInterface.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace IntelliSwing {
constexpr InitializeMsg::InitializeMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_(0)
{}
struct InitializeMsgDefaultTypeInternal {
  constexpr InitializeMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitializeMsgDefaultTypeInternal() {}
  union {
    InitializeMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitializeMsgDefaultTypeInternal _InitializeMsg_default_instance_;
constexpr ReleaseMsg::ReleaseMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0){}
struct ReleaseMsgDefaultTypeInternal {
  constexpr ReleaseMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReleaseMsgDefaultTypeInternal() {}
  union {
    ReleaseMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReleaseMsgDefaultTypeInternal _ReleaseMsg_default_instance_;
constexpr StartMsg::StartMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clubinformation_(0)

  , goundattribution_(0)
{}
struct StartMsgDefaultTypeInternal {
  constexpr StartMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartMsgDefaultTypeInternal() {}
  union {
    StartMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartMsgDefaultTypeInternal _StartMsg_default_instance_;
constexpr SensorRunningMsg_Ready::SensorRunningMsg_Ready(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , istee_(false)
  , goundattribution_(0)
{}
struct SensorRunningMsg_ReadyDefaultTypeInternal {
  constexpr SensorRunningMsg_ReadyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SensorRunningMsg_ReadyDefaultTypeInternal() {}
  union {
    SensorRunningMsg_Ready _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SensorRunningMsg_ReadyDefaultTypeInternal _SensorRunningMsg_Ready_default_instance_;
constexpr SensorRunningMsg_NotReady::SensorRunningMsg_NotReady(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : notreadycause_(0)
{}
struct SensorRunningMsg_NotReadyDefaultTypeInternal {
  constexpr SensorRunningMsg_NotReadyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SensorRunningMsg_NotReadyDefaultTypeInternal() {}
  union {
    SensorRunningMsg_NotReady _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SensorRunningMsg_NotReadyDefaultTypeInternal _SensorRunningMsg_NotReady_default_instance_;
constexpr SensorRunningMsg_ShortTriggered::SensorRunningMsg_ShortTriggered(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(uint64_t{0u})
  , shotid_(0){}
struct SensorRunningMsg_ShortTriggeredDefaultTypeInternal {
  constexpr SensorRunningMsg_ShortTriggeredDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SensorRunningMsg_ShortTriggeredDefaultTypeInternal() {}
  union {
    SensorRunningMsg_ShortTriggered _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SensorRunningMsg_ShortTriggeredDefaultTypeInternal _SensorRunningMsg_ShortTriggered_default_instance_;
constexpr SensorRunningMsg_BallFlightInfo::SensorRunningMsg_BallFlightInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shotid_(0)
  , ballspeed_(0)
  , incidence_(0)
  , direction_(0)
  , backspin_(0)
  , sidespin_(0){}
struct SensorRunningMsg_BallFlightInfoDefaultTypeInternal {
  constexpr SensorRunningMsg_BallFlightInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SensorRunningMsg_BallFlightInfoDefaultTypeInternal() {}
  union {
    SensorRunningMsg_BallFlightInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SensorRunningMsg_BallFlightInfoDefaultTypeInternal _SensorRunningMsg_BallFlightInfo_default_instance_;
constexpr SensorRunningMsg_ClubPathInfo_Path::SensorRunningMsg_ClubPathInfo_Path(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gaclubpath_(0){}
struct SensorRunningMsg_ClubPathInfo_PathDefaultTypeInternal {
  constexpr SensorRunningMsg_ClubPathInfo_PathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SensorRunningMsg_ClubPathInfo_PathDefaultTypeInternal() {}
  union {
    SensorRunningMsg_ClubPathInfo_Path _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SensorRunningMsg_ClubPathInfo_PathDefaultTypeInternal _SensorRunningMsg_ClubPathInfo_Path_default_instance_;
constexpr SensorRunningMsg_ClubPathInfo_ImpactPoint::SensorRunningMsg_ClubPathInfo_ImpactPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gaclubimpactpoint_hor_(0)
  , gaclubimpactpoint_ver_(0){}
struct SensorRunningMsg_ClubPathInfo_ImpactPointDefaultTypeInternal {
  constexpr SensorRunningMsg_ClubPathInfo_ImpactPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SensorRunningMsg_ClubPathInfo_ImpactPointDefaultTypeInternal() {}
  union {
    SensorRunningMsg_ClubPathInfo_ImpactPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SensorRunningMsg_ClubPathInfo_ImpactPointDefaultTypeInternal _SensorRunningMsg_ClubPathInfo_ImpactPoint_default_instance_;
constexpr SensorRunningMsg_ClubPathInfo::SensorRunningMsg_ClubPathInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(nullptr)
  , impactpoint_(nullptr)
  , shotid_(0)
  , headspeed_(0)
  , faceangle_(0)
  , attackangle_(0){}
struct SensorRunningMsg_ClubPathInfoDefaultTypeInternal {
  constexpr SensorRunningMsg_ClubPathInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SensorRunningMsg_ClubPathInfoDefaultTypeInternal() {}
  union {
    SensorRunningMsg_ClubPathInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SensorRunningMsg_ClubPathInfoDefaultTypeInternal _SensorRunningMsg_ClubPathInfo_default_instance_;
constexpr SensorRunningMsg::SensorRunningMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(nullptr)
  , _oneof_case_{}{}
struct SensorRunningMsgDefaultTypeInternal {
  constexpr SensorRunningMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SensorRunningMsgDefaultTypeInternal() {}
  union {
    SensorRunningMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SensorRunningMsgDefaultTypeInternal _SensorRunningMsg_default_instance_;
constexpr ShotImageRequest::ShotImageRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shotid_(0){}
struct ShotImageRequestDefaultTypeInternal {
  constexpr ShotImageRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShotImageRequestDefaultTypeInternal() {}
  union {
    ShotImageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShotImageRequestDefaultTypeInternal _ShotImageRequest_default_instance_;
constexpr ImageData_Image_Marker::ImageData_Image_Marker(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , position_(nullptr){}
struct ImageData_Image_MarkerDefaultTypeInternal {
  constexpr ImageData_Image_MarkerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageData_Image_MarkerDefaultTypeInternal() {}
  union {
    ImageData_Image_Marker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageData_Image_MarkerDefaultTypeInternal _ImageData_Image_Marker_default_instance_;
constexpr ImageData_Image::ImageData_Image(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : markers_()
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(uint64_t{0u}){}
struct ImageData_ImageDefaultTypeInternal {
  constexpr ImageData_ImageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageData_ImageDefaultTypeInternal() {}
  union {
    ImageData_Image _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageData_ImageDefaultTypeInternal _ImageData_Image_default_instance_;
constexpr ImageData::ImageData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : datas_()
  , width_(0)
  , height_(0)
  , channel_(0)
  , data_type_(0)
  , image_type_(0)
  , fps_(0){}
struct ImageDataDefaultTypeInternal {
  constexpr ImageDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageDataDefaultTypeInternal() {}
  union {
    ImageData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageDataDefaultTypeInternal _ImageData_default_instance_;
}  // namespace IntelliSwing
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_IntelliSwingInterface_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_IntelliSwingInterface_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_IntelliSwingInterface_2eproto = nullptr;

const uint32_t TableStruct_IntelliSwingInterface_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::InitializeMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::InitializeMsg, client_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::ReleaseMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::ReleaseMsg, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::StartMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::StartMsg, clubinformation_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::StartMsg, goundattribution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_Ready, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_Ready, position_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_Ready, istee_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_Ready, goundattribution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_NotReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_NotReady, notreadycause_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_ShortTriggered, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_ShortTriggered, shotid_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_ShortTriggered, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_BallFlightInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_BallFlightInfo, shotid_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_BallFlightInfo, ballspeed_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_BallFlightInfo, incidence_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_BallFlightInfo, direction_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_BallFlightInfo, backspin_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_BallFlightInfo, sidespin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_ClubPathInfo_Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_ClubPathInfo_Path, gaclubpath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_ClubPathInfo_ImpactPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_ClubPathInfo_ImpactPoint, gaclubimpactpoint_hor_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_ClubPathInfo_ImpactPoint, gaclubimpactpoint_ver_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_ClubPathInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_ClubPathInfo, shotid_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_ClubPathInfo, headspeed_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_ClubPathInfo, path_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_ClubPathInfo, faceangle_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_ClubPathInfo, attackangle_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg_ClubPathInfo, impactpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg, timestamp_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorRunningMsg, runState_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::ShotImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::ShotImageRequest, shotid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::ImageData_Image_Marker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::ImageData_Image_Marker, position_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::ImageData_Image_Marker, tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::ImageData_Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::ImageData_Image, data_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::ImageData_Image, timestamp_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::ImageData_Image, tag_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::ImageData_Image, markers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::ImageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::ImageData, width_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::ImageData, height_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::ImageData, channel_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::ImageData, data_type_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::ImageData, image_type_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::ImageData, fps_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::ImageData, datas_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::IntelliSwing::InitializeMsg)},
  { 7, -1, -1, sizeof(::IntelliSwing::ReleaseMsg)},
  { 14, -1, -1, sizeof(::IntelliSwing::StartMsg)},
  { 22, -1, -1, sizeof(::IntelliSwing::SensorRunningMsg_Ready)},
  { 31, -1, -1, sizeof(::IntelliSwing::SensorRunningMsg_NotReady)},
  { 38, -1, -1, sizeof(::IntelliSwing::SensorRunningMsg_ShortTriggered)},
  { 46, -1, -1, sizeof(::IntelliSwing::SensorRunningMsg_BallFlightInfo)},
  { 58, -1, -1, sizeof(::IntelliSwing::SensorRunningMsg_ClubPathInfo_Path)},
  { 65, -1, -1, sizeof(::IntelliSwing::SensorRunningMsg_ClubPathInfo_ImpactPoint)},
  { 73, -1, -1, sizeof(::IntelliSwing::SensorRunningMsg_ClubPathInfo)},
  { 85, -1, -1, sizeof(::IntelliSwing::SensorRunningMsg)},
  { 98, -1, -1, sizeof(::IntelliSwing::ShotImageRequest)},
  { 105, -1, -1, sizeof(::IntelliSwing::ImageData_Image_Marker)},
  { 113, -1, -1, sizeof(::IntelliSwing::ImageData_Image)},
  { 123, -1, -1, sizeof(::IntelliSwing::ImageData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_InitializeMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_ReleaseMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_StartMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_SensorRunningMsg_Ready_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_SensorRunningMsg_NotReady_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_SensorRunningMsg_ShortTriggered_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_SensorRunningMsg_BallFlightInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_SensorRunningMsg_ClubPathInfo_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_SensorRunningMsg_ClubPathInfo_ImpactPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_SensorRunningMsg_ClubPathInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_SensorRunningMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_ShotImageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_ImageData_Image_Marker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_ImageData_Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_ImageData_default_instance_),
};

const char descriptor_table_protodef_IntelliSwingInterface_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033IntelliSwingInterface.proto\022\014IntelliSw"
  "ing\032\037google/protobuf/timestamp.proto\032\033go"
  "ogle/protobuf/empty.proto\032\ntype.proto\032\031I"
  "ntelliSwingService.proto\"z\n\rInitializeMs"
  "g\0222\n\006client\030\004 \001(\0162\".IntelliSwing.Initial"
  "izeMsg.Client\"5\n\006Client\022\007\n\003GDR\020\000\022\013\n\007Next"
  "GDR\020\001\022\n\n\006Vision\020\002\022\t\n\005Ohter\020\003\"\030\n\nReleaseM"
  "sg\022\n\n\002id\030\001 \001(\005\"\334\003\n\010StartMsg\022\?\n\017clubInfor"
  "mation\030\001 \001(\0162&.IntelliSwing.StartMsg.Clu"
  "bInformation\0222\n\020goundAttribution\030\002 \001(\0162\030"
  ".IntelliSwing.GroundAttr\"\332\002\n\017ClubInforma"
  "tion\022\016\n\nNonPutting\020\000\022\013\n\007Putting\020\001\022\010\n\004Woo"
  "d\020d\022\006\n\002W1\020e\022\006\n\002W2\020f\022\006\n\002W3\020g\022\006\n\002W4\020h\022\006\n\002W"
  "5\020i\022\006\n\002W6\020j\022\006\n\002W7\020k\022\006\n\002W8\020l\022\006\n\002W9\020m\022\t\n\004I"
  "ron\020\310\001\022\007\n\002I2\020\312\001\022\007\n\002I3\020\313\001\022\007\n\002I4\020\314\001\022\007\n\002I5\020"
  "\315\001\022\007\n\002I6\020\316\001\022\007\n\002I7\020\317\001\022\007\n\002I8\020\320\001\022\007\n\002I9\020\321\001\022\n"
  "\n\005Wedge\020\254\002\022\007\n\002PW\020\266\002\022\007\n\002SW\020\300\002\022\007\n\002LW\020\312\002\022\013\n"
  "\006Hybrid\020\220\003\022\t\n\004UTIL\020\244\003\022\n\n\005UTIL2\020\246\003\022\n\n\005UTI"
  "L3\020\247\003\022\n\n\005UTIL4\020\250\003\022\n\n\005UTIL5\020\251\003\022\n\n\005UTIL6\020\252"
  "\003\022\n\n\005UTIL7\020\253\003\"\264\t\n\020SensorRunningMsg\022-\n\tti"
  "meStamp\030\001 \001(\0132\032.google.protobuf.Timestam"
  "p\0225\n\005ready\030\002 \001(\0132$.IntelliSwing.SensorRu"
  "nningMsg.ReadyH\000\022;\n\010notReady\030\003 \001(\0132\'.Int"
  "elliSwing.SensorRunningMsg.NotReadyH\000\022F\n"
  "\rshotTriggered\030\004 \001(\0132-.IntelliSwing.Sens"
  "orRunningMsg.ShortTriggeredH\000\022A\n\010ballInf"
  "o\030\005 \001(\0132-.IntelliSwing.SensorRunningMsg."
  "BallFlightInfoH\000\022\?\n\010clubInfo\030\006 \001(\0132+.Int"
  "elliSwing.SensorRunningMsg.ClubPathInfoH"
  "\000\032s\n\005Ready\022\'\n\010position\030\001 \001(\0132\025.IntelliSw"
  "ing.Point3f\022\r\n\005isTee\030\002 \001(\010\0222\n\020goundAttri"
  "bution\030\003 \001(\0162\030.IntelliSwing.GroundAttr\032\250"
  "\001\n\010NotReady\022L\n\rnotReadyCause\030\001 \001(\01625.Int"
  "elliSwing.SensorRunningMsg.NotReady.NotR"
  "eadyCause\"N\n\rNotReadyCause\022\016\n\nNotDefined"
  "\020\000\022\014\n\010OutBound\020\001\022\020\n\014BallNotFound\020\002\022\r\n\tMu"
  "ltiBall\020\003\0323\n\016ShortTriggered\022\016\n\006shotId\030\001 "
  "\001(\005\022\021\n\ttimestamp\030\002 \001(\004\032}\n\016BallFlightInfo"
  "\022\016\n\006shotId\030\001 \001(\005\022\021\n\tballSpeed\030\002 \001(\002\022\021\n\tI"
  "ncidence\030\003 \001(\002\022\021\n\tdirection\030\004 \001(\002\022\020\n\010bac"
  "kSpin\030\005 \001(\002\022\020\n\010sideSpin\030\006 \001(\002\032\320\002\n\014ClubPa"
  "thInfo\022\016\n\006shotId\030\001 \001(\005\022\021\n\theadSpeed\030\002 \001("
  "\002\022>\n\004path\030\003 \001(\01320.IntelliSwing.SensorRun"
  "ningMsg.ClubPathInfo.Path\022\021\n\tfaceAngle\030\004"
  " \001(\002\022\023\n\013attackAngle\030\005 \001(\002\022L\n\013impactPoint"
  "\030\006 \001(\01327.IntelliSwing.SensorRunningMsg.C"
  "lubPathInfo.ImpactPoint\032\032\n\004Path\022\022\n\nGAClu"
  "bPath\030\001 \001(\002\032K\n\013ImpactPoint\022\035\n\025GAClubImpa"
  "ctPoint_Hor\030\001 \001(\002\022\035\n\025GAClubImpactPoint_V"
  "er\030\002 \001(\002B\n\n\010runState\"\"\n\020ShotImageRequest"
  "\022\016\n\006shotId\030\001 \001(\005\"\314\002\n\tImageData\022\r\n\005width\030"
  "\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\017\n\007channel\030\003 \001(\005\022\021"
  "\n\tdata_type\030\004 \001(\005\022\022\n\nimage_type\030\005 \001(\005\022\013\n"
  "\003fps\030\006 \001(\002\022,\n\005datas\030\007 \003(\0132\035.IntelliSwing"
  ".ImageData.Image\032\254\001\n\005Image\022\014\n\004data\030\002 \001(\014"
  "\022\021\n\ttimeStamp\030\003 \001(\004\022\013\n\003tag\030\007 \001(\t\0225\n\007mark"
  "ers\030\010 \003(\0132$.IntelliSwing.ImageData.Image"
  ".Marker\032>\n\006Marker\022\'\n\010position\030\001 \001(\0132\025.In"
  "telliSwing.Point2i\022\013\n\003tag\030\002 \001(\t*N\n\nGroun"
  "dAttr\022\013\n\007FAIRWAY\020\000\022\t\n\005ROUGH\020\001\022\n\n\006BUNKER\020"
  "\002\022\007\n\003TEE\020\003\022\t\n\005GREEN\020\004\022\010\n\004NONE\020\0052\232\010\n\024Inte"
  "lliSwingProtocol\022D\n\nInitialize\022\033.Intelli"
  "Swing.InitializeMsg\032\027.IntelliSwing.Retur"
  "nMsg\"\000\022>\n\007Release\022\030.IntelliSwing.Release"
  "Msg\032\027.IntelliSwing.ReturnMsg\"\000\022;\n\006Reboot"
  "\022\026.google.protobuf.Empty\032\027.IntelliSwing."
  "ReturnMsg\"\000\022C\n\005Start\022\026.IntelliSwing.Star"
  "tMsg\032\036.IntelliSwing.SensorRunningMsg\"\0000\001"
  "\0229\n\004Stop\022\026.google.protobuf.Empty\032\027.Intel"
  "liSwing.ReturnMsg\"\000\022I\n\014GetClubImage\022\036.In"
  "telliSwing.ShotImageRequest\032\027.IntelliSwi"
  "ng.ImageData\"\000\022I\n\014GetBallImage\022\036.Intelli"
  "Swing.ShotImageRequest\032\027.IntelliSwing.Im"
  "ageData\"\000\022C\n\rGetDeviceInfo\022\026.google.prot"
  "obuf.Empty\032\030.IntelliSwing.DeviceInfo\"\000\022G"
  "\n\017GetDeviceStatus\022\026.google.protobuf.Empt"
  "y\032\032.IntelliSwing.DeviceStatus\"\000\022>\n\006GetLo"
  "g\022\030.IntelliSwing.LogRequest\032\030.IntelliSwi"
  "ng.LogMessage\"\000\022R\n\rGetStatistics\022\037.Intel"
  "liSwing.StatisticsRequest\032\036.IntelliSwing"
  ".SensorStatistics\"\000\022a\n\022RunSiteCalibratio"
  "n\022$.IntelliSwing.SiteCalibrationRequest\032"
  "#.IntelliSwing.SiteCalibrationResult\"\000\022["
  "\n\016UpdateFirmware\022#.IntelliSwing.UpdateFi"
  "rmwareRequest\032\".IntelliSwing.UpdateFirmw"
  "areResult\"\000\022G\n\010GetImage\022 .IntelliSwing.C"
  "ameraImageRequest\032\027.IntelliSwing.ImageDa"
  "ta\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_IntelliSwingInterface_2eproto_deps[4] = {
  &::descriptor_table_IntelliSwingService_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_type_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_IntelliSwingInterface_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IntelliSwingInterface_2eproto = {
  false, false, 3492, descriptor_table_protodef_IntelliSwingInterface_2eproto, "IntelliSwingInterface.proto", 
  &descriptor_table_IntelliSwingInterface_2eproto_once, descriptor_table_IntelliSwingInterface_2eproto_deps, 4, 15,
  schemas, file_default_instances, TableStruct_IntelliSwingInterface_2eproto::offsets,
  file_level_metadata_IntelliSwingInterface_2eproto, file_level_enum_descriptors_IntelliSwingInterface_2eproto, file_level_service_descriptors_IntelliSwingInterface_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_IntelliSwingInterface_2eproto_getter() {
  return &descriptor_table_IntelliSwingInterface_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_IntelliSwingInterface_2eproto(&descriptor_table_IntelliSwingInterface_2eproto);
namespace IntelliSwing {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InitializeMsg_Client_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_IntelliSwingInterface_2eproto);
  return file_level_enum_descriptors_IntelliSwingInterface_2eproto[0];
}
bool InitializeMsg_Client_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr InitializeMsg_Client InitializeMsg::GDR;
constexpr InitializeMsg_Client InitializeMsg::NextGDR;
constexpr InitializeMsg_Client InitializeMsg::Vision;
constexpr InitializeMsg_Client InitializeMsg::Ohter;
constexpr InitializeMsg_Client InitializeMsg::Client_MIN;
constexpr InitializeMsg_Client InitializeMsg::Client_MAX;
constexpr int InitializeMsg::Client_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StartMsg_ClubInformation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_IntelliSwingInterface_2eproto);
  return file_level_enum_descriptors_IntelliSwingInterface_2eproto[1];
}
bool StartMsg_ClubInformation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 200:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 300:
    case 310:
    case 320:
    case 330:
    case 400:
    case 420:
    case 422:
    case 423:
    case 424:
    case 425:
    case 426:
    case 427:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StartMsg_ClubInformation StartMsg::NonPutting;
constexpr StartMsg_ClubInformation StartMsg::Putting;
constexpr StartMsg_ClubInformation StartMsg::Wood;
constexpr StartMsg_ClubInformation StartMsg::W1;
constexpr StartMsg_ClubInformation StartMsg::W2;
constexpr StartMsg_ClubInformation StartMsg::W3;
constexpr StartMsg_ClubInformation StartMsg::W4;
constexpr StartMsg_ClubInformation StartMsg::W5;
constexpr StartMsg_ClubInformation StartMsg::W6;
constexpr StartMsg_ClubInformation StartMsg::W7;
constexpr StartMsg_ClubInformation StartMsg::W8;
constexpr StartMsg_ClubInformation StartMsg::W9;
constexpr StartMsg_ClubInformation StartMsg::Iron;
constexpr StartMsg_ClubInformation StartMsg::I2;
constexpr StartMsg_ClubInformation StartMsg::I3;
constexpr StartMsg_ClubInformation StartMsg::I4;
constexpr StartMsg_ClubInformation StartMsg::I5;
constexpr StartMsg_ClubInformation StartMsg::I6;
constexpr StartMsg_ClubInformation StartMsg::I7;
constexpr StartMsg_ClubInformation StartMsg::I8;
constexpr StartMsg_ClubInformation StartMsg::I9;
constexpr StartMsg_ClubInformation StartMsg::Wedge;
constexpr StartMsg_ClubInformation StartMsg::PW;
constexpr StartMsg_ClubInformation StartMsg::SW;
constexpr StartMsg_ClubInformation StartMsg::LW;
constexpr StartMsg_ClubInformation StartMsg::Hybrid;
constexpr StartMsg_ClubInformation StartMsg::UTIL;
constexpr StartMsg_ClubInformation StartMsg::UTIL2;
constexpr StartMsg_ClubInformation StartMsg::UTIL3;
constexpr StartMsg_ClubInformation StartMsg::UTIL4;
constexpr StartMsg_ClubInformation StartMsg::UTIL5;
constexpr StartMsg_ClubInformation StartMsg::UTIL6;
constexpr StartMsg_ClubInformation StartMsg::UTIL7;
constexpr StartMsg_ClubInformation StartMsg::ClubInformation_MIN;
constexpr StartMsg_ClubInformation StartMsg::ClubInformation_MAX;
constexpr int StartMsg::ClubInformation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorRunningMsg_NotReady_NotReadyCause_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_IntelliSwingInterface_2eproto);
  return file_level_enum_descriptors_IntelliSwingInterface_2eproto[2];
}
bool SensorRunningMsg_NotReady_NotReadyCause_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SensorRunningMsg_NotReady_NotReadyCause SensorRunningMsg_NotReady::NotDefined;
constexpr SensorRunningMsg_NotReady_NotReadyCause SensorRunningMsg_NotReady::OutBound;
constexpr SensorRunningMsg_NotReady_NotReadyCause SensorRunningMsg_NotReady::BallNotFound;
constexpr SensorRunningMsg_NotReady_NotReadyCause SensorRunningMsg_NotReady::MultiBall;
constexpr SensorRunningMsg_NotReady_NotReadyCause SensorRunningMsg_NotReady::NotReadyCause_MIN;
constexpr SensorRunningMsg_NotReady_NotReadyCause SensorRunningMsg_NotReady::NotReadyCause_MAX;
constexpr int SensorRunningMsg_NotReady::NotReadyCause_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroundAttr_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_IntelliSwingInterface_2eproto);
  return file_level_enum_descriptors_IntelliSwingInterface_2eproto[3];
}
bool GroundAttr_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class InitializeMsg::_Internal {
 public:
};

InitializeMsg::InitializeMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.InitializeMsg)
}
InitializeMsg::InitializeMsg(const InitializeMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_ = from.client_;
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.InitializeMsg)
}

inline void InitializeMsg::SharedCtor() {
client_ = 0;
}

InitializeMsg::~InitializeMsg() {
  // @@protoc_insertion_point(destructor:IntelliSwing.InitializeMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitializeMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InitializeMsg::ArenaDtor(void* object) {
  InitializeMsg* _this = reinterpret_cast< InitializeMsg* >(object);
  (void)_this;
}
void InitializeMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitializeMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitializeMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.InitializeMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitializeMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .IntelliSwing.InitializeMsg.Client client = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_client(static_cast<::IntelliSwing::InitializeMsg_Client>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitializeMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.InitializeMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .IntelliSwing.InitializeMsg.Client client = 4;
  if (this->_internal_client() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_client(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.InitializeMsg)
  return target;
}

size_t InitializeMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.InitializeMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IntelliSwing.InitializeMsg.Client client = 4;
  if (this->_internal_client() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_client());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitializeMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitializeMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitializeMsg::GetClassData() const { return &_class_data_; }

void InitializeMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitializeMsg *>(to)->MergeFrom(
      static_cast<const InitializeMsg &>(from));
}


void InitializeMsg::MergeFrom(const InitializeMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.InitializeMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_client() != 0) {
    _internal_set_client(from._internal_client());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitializeMsg::CopyFrom(const InitializeMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.InitializeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeMsg::IsInitialized() const {
  return true;
}

void InitializeMsg::InternalSwap(InitializeMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(client_, other->client_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitializeMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingInterface_2eproto_getter, &descriptor_table_IntelliSwingInterface_2eproto_once,
      file_level_metadata_IntelliSwingInterface_2eproto[0]);
}

// ===================================================================

class ReleaseMsg::_Internal {
 public:
};

ReleaseMsg::ReleaseMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.ReleaseMsg)
}
ReleaseMsg::ReleaseMsg(const ReleaseMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.ReleaseMsg)
}

inline void ReleaseMsg::SharedCtor() {
id_ = 0;
}

ReleaseMsg::~ReleaseMsg() {
  // @@protoc_insertion_point(destructor:IntelliSwing.ReleaseMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReleaseMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReleaseMsg::ArenaDtor(void* object) {
  ReleaseMsg* _this = reinterpret_cast< ReleaseMsg* >(object);
  (void)_this;
}
void ReleaseMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReleaseMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.ReleaseMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReleaseMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.ReleaseMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.ReleaseMsg)
  return target;
}

size_t ReleaseMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.ReleaseMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReleaseMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReleaseMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReleaseMsg::GetClassData() const { return &_class_data_; }

void ReleaseMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReleaseMsg *>(to)->MergeFrom(
      static_cast<const ReleaseMsg &>(from));
}


void ReleaseMsg::MergeFrom(const ReleaseMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.ReleaseMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReleaseMsg::CopyFrom(const ReleaseMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.ReleaseMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseMsg::IsInitialized() const {
  return true;
}

void ReleaseMsg::InternalSwap(ReleaseMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingInterface_2eproto_getter, &descriptor_table_IntelliSwingInterface_2eproto_once,
      file_level_metadata_IntelliSwingInterface_2eproto[1]);
}

// ===================================================================

class StartMsg::_Internal {
 public:
};

StartMsg::StartMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.StartMsg)
}
StartMsg::StartMsg(const StartMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&clubinformation_, &from.clubinformation_,
    static_cast<size_t>(reinterpret_cast<char*>(&goundattribution_) -
    reinterpret_cast<char*>(&clubinformation_)) + sizeof(goundattribution_));
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.StartMsg)
}

inline void StartMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&clubinformation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&goundattribution_) -
    reinterpret_cast<char*>(&clubinformation_)) + sizeof(goundattribution_));
}

StartMsg::~StartMsg() {
  // @@protoc_insertion_point(destructor:IntelliSwing.StartMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StartMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StartMsg::ArenaDtor(void* object) {
  StartMsg* _this = reinterpret_cast< StartMsg* >(object);
  (void)_this;
}
void StartMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.StartMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&clubinformation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goundattribution_) -
      reinterpret_cast<char*>(&clubinformation_)) + sizeof(goundattribution_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .IntelliSwing.StartMsg.ClubInformation clubInformation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_clubinformation(static_cast<::IntelliSwing::StartMsg_ClubInformation>(val));
        } else
          goto handle_unusual;
        continue;
      // .IntelliSwing.GroundAttr goundAttribution = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_goundattribution(static_cast<::IntelliSwing::GroundAttr>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.StartMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .IntelliSwing.StartMsg.ClubInformation clubInformation = 1;
  if (this->_internal_clubinformation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_clubinformation(), target);
  }

  // .IntelliSwing.GroundAttr goundAttribution = 2;
  if (this->_internal_goundattribution() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_goundattribution(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.StartMsg)
  return target;
}

size_t StartMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.StartMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IntelliSwing.StartMsg.ClubInformation clubInformation = 1;
  if (this->_internal_clubinformation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_clubinformation());
  }

  // .IntelliSwing.GroundAttr goundAttribution = 2;
  if (this->_internal_goundattribution() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_goundattribution());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartMsg::GetClassData() const { return &_class_data_; }

void StartMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartMsg *>(to)->MergeFrom(
      static_cast<const StartMsg &>(from));
}


void StartMsg::MergeFrom(const StartMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.StartMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_clubinformation() != 0) {
    _internal_set_clubinformation(from._internal_clubinformation());
  }
  if (from._internal_goundattribution() != 0) {
    _internal_set_goundattribution(from._internal_goundattribution());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartMsg::CopyFrom(const StartMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.StartMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartMsg::IsInitialized() const {
  return true;
}

void StartMsg::InternalSwap(StartMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartMsg, goundattribution_)
      + sizeof(StartMsg::goundattribution_)
      - PROTOBUF_FIELD_OFFSET(StartMsg, clubinformation_)>(
          reinterpret_cast<char*>(&clubinformation_),
          reinterpret_cast<char*>(&other->clubinformation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingInterface_2eproto_getter, &descriptor_table_IntelliSwingInterface_2eproto_once,
      file_level_metadata_IntelliSwingInterface_2eproto[2]);
}

// ===================================================================

class SensorRunningMsg_Ready::_Internal {
 public:
  static const ::IntelliSwing::Point3f& position(const SensorRunningMsg_Ready* msg);
};

const ::IntelliSwing::Point3f&
SensorRunningMsg_Ready::_Internal::position(const SensorRunningMsg_Ready* msg) {
  return *msg->position_;
}
void SensorRunningMsg_Ready::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
SensorRunningMsg_Ready::SensorRunningMsg_Ready(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.SensorRunningMsg.Ready)
}
SensorRunningMsg_Ready::SensorRunningMsg_Ready(const SensorRunningMsg_Ready& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::IntelliSwing::Point3f(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&istee_, &from.istee_,
    static_cast<size_t>(reinterpret_cast<char*>(&goundattribution_) -
    reinterpret_cast<char*>(&istee_)) + sizeof(goundattribution_));
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.SensorRunningMsg.Ready)
}

inline void SensorRunningMsg_Ready::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&goundattribution_) -
    reinterpret_cast<char*>(&position_)) + sizeof(goundattribution_));
}

SensorRunningMsg_Ready::~SensorRunningMsg_Ready() {
  // @@protoc_insertion_point(destructor:IntelliSwing.SensorRunningMsg.Ready)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SensorRunningMsg_Ready::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void SensorRunningMsg_Ready::ArenaDtor(void* object) {
  SensorRunningMsg_Ready* _this = reinterpret_cast< SensorRunningMsg_Ready* >(object);
  (void)_this;
}
void SensorRunningMsg_Ready::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorRunningMsg_Ready::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SensorRunningMsg_Ready::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.SensorRunningMsg.Ready)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&istee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goundattribution_) -
      reinterpret_cast<char*>(&istee_)) + sizeof(goundattribution_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorRunningMsg_Ready::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .IntelliSwing.Point3f position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isTee = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          istee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IntelliSwing.GroundAttr goundAttribution = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_goundattribution(static_cast<::IntelliSwing::GroundAttr>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorRunningMsg_Ready::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.SensorRunningMsg.Ready)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .IntelliSwing.Point3f position = 1;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // bool isTee = 2;
  if (this->_internal_istee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_istee(), target);
  }

  // .IntelliSwing.GroundAttr goundAttribution = 3;
  if (this->_internal_goundattribution() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_goundattribution(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.SensorRunningMsg.Ready)
  return target;
}

size_t SensorRunningMsg_Ready::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.SensorRunningMsg.Ready)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IntelliSwing.Point3f position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // bool isTee = 2;
  if (this->_internal_istee() != 0) {
    total_size += 1 + 1;
  }

  // .IntelliSwing.GroundAttr goundAttribution = 3;
  if (this->_internal_goundattribution() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_goundattribution());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorRunningMsg_Ready::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SensorRunningMsg_Ready::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorRunningMsg_Ready::GetClassData() const { return &_class_data_; }

void SensorRunningMsg_Ready::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SensorRunningMsg_Ready *>(to)->MergeFrom(
      static_cast<const SensorRunningMsg_Ready &>(from));
}


void SensorRunningMsg_Ready::MergeFrom(const SensorRunningMsg_Ready& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.SensorRunningMsg.Ready)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _internal_mutable_position()->::IntelliSwing::Point3f::MergeFrom(from._internal_position());
  }
  if (from._internal_istee() != 0) {
    _internal_set_istee(from._internal_istee());
  }
  if (from._internal_goundattribution() != 0) {
    _internal_set_goundattribution(from._internal_goundattribution());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorRunningMsg_Ready::CopyFrom(const SensorRunningMsg_Ready& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.SensorRunningMsg.Ready)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorRunningMsg_Ready::IsInitialized() const {
  return true;
}

void SensorRunningMsg_Ready::InternalSwap(SensorRunningMsg_Ready* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorRunningMsg_Ready, goundattribution_)
      + sizeof(SensorRunningMsg_Ready::goundattribution_)
      - PROTOBUF_FIELD_OFFSET(SensorRunningMsg_Ready, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorRunningMsg_Ready::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingInterface_2eproto_getter, &descriptor_table_IntelliSwingInterface_2eproto_once,
      file_level_metadata_IntelliSwingInterface_2eproto[3]);
}

// ===================================================================

class SensorRunningMsg_NotReady::_Internal {
 public:
};

SensorRunningMsg_NotReady::SensorRunningMsg_NotReady(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.SensorRunningMsg.NotReady)
}
SensorRunningMsg_NotReady::SensorRunningMsg_NotReady(const SensorRunningMsg_NotReady& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  notreadycause_ = from.notreadycause_;
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.SensorRunningMsg.NotReady)
}

inline void SensorRunningMsg_NotReady::SharedCtor() {
notreadycause_ = 0;
}

SensorRunningMsg_NotReady::~SensorRunningMsg_NotReady() {
  // @@protoc_insertion_point(destructor:IntelliSwing.SensorRunningMsg.NotReady)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SensorRunningMsg_NotReady::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SensorRunningMsg_NotReady::ArenaDtor(void* object) {
  SensorRunningMsg_NotReady* _this = reinterpret_cast< SensorRunningMsg_NotReady* >(object);
  (void)_this;
}
void SensorRunningMsg_NotReady::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorRunningMsg_NotReady::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SensorRunningMsg_NotReady::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.SensorRunningMsg.NotReady)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notreadycause_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorRunningMsg_NotReady::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .IntelliSwing.SensorRunningMsg.NotReady.NotReadyCause notReadyCause = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_notreadycause(static_cast<::IntelliSwing::SensorRunningMsg_NotReady_NotReadyCause>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorRunningMsg_NotReady::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.SensorRunningMsg.NotReady)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .IntelliSwing.SensorRunningMsg.NotReady.NotReadyCause notReadyCause = 1;
  if (this->_internal_notreadycause() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_notreadycause(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.SensorRunningMsg.NotReady)
  return target;
}

size_t SensorRunningMsg_NotReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.SensorRunningMsg.NotReady)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IntelliSwing.SensorRunningMsg.NotReady.NotReadyCause notReadyCause = 1;
  if (this->_internal_notreadycause() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_notreadycause());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorRunningMsg_NotReady::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SensorRunningMsg_NotReady::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorRunningMsg_NotReady::GetClassData() const { return &_class_data_; }

void SensorRunningMsg_NotReady::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SensorRunningMsg_NotReady *>(to)->MergeFrom(
      static_cast<const SensorRunningMsg_NotReady &>(from));
}


void SensorRunningMsg_NotReady::MergeFrom(const SensorRunningMsg_NotReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.SensorRunningMsg.NotReady)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_notreadycause() != 0) {
    _internal_set_notreadycause(from._internal_notreadycause());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorRunningMsg_NotReady::CopyFrom(const SensorRunningMsg_NotReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.SensorRunningMsg.NotReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorRunningMsg_NotReady::IsInitialized() const {
  return true;
}

void SensorRunningMsg_NotReady::InternalSwap(SensorRunningMsg_NotReady* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(notreadycause_, other->notreadycause_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorRunningMsg_NotReady::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingInterface_2eproto_getter, &descriptor_table_IntelliSwingInterface_2eproto_once,
      file_level_metadata_IntelliSwingInterface_2eproto[4]);
}

// ===================================================================

class SensorRunningMsg_ShortTriggered::_Internal {
 public:
};

SensorRunningMsg_ShortTriggered::SensorRunningMsg_ShortTriggered(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.SensorRunningMsg.ShortTriggered)
}
SensorRunningMsg_ShortTriggered::SensorRunningMsg_ShortTriggered(const SensorRunningMsg_ShortTriggered& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&shotid_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(shotid_));
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.SensorRunningMsg.ShortTriggered)
}

inline void SensorRunningMsg_ShortTriggered::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&shotid_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(shotid_));
}

SensorRunningMsg_ShortTriggered::~SensorRunningMsg_ShortTriggered() {
  // @@protoc_insertion_point(destructor:IntelliSwing.SensorRunningMsg.ShortTriggered)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SensorRunningMsg_ShortTriggered::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SensorRunningMsg_ShortTriggered::ArenaDtor(void* object) {
  SensorRunningMsg_ShortTriggered* _this = reinterpret_cast< SensorRunningMsg_ShortTriggered* >(object);
  (void)_this;
}
void SensorRunningMsg_ShortTriggered::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorRunningMsg_ShortTriggered::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SensorRunningMsg_ShortTriggered::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.SensorRunningMsg.ShortTriggered)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shotid_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(shotid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorRunningMsg_ShortTriggered::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 shotId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          shotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorRunningMsg_ShortTriggered::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.SensorRunningMsg.ShortTriggered)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 shotId = 1;
  if (this->_internal_shotid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_shotid(), target);
  }

  // uint64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.SensorRunningMsg.ShortTriggered)
  return target;
}

size_t SensorRunningMsg_ShortTriggered::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.SensorRunningMsg.ShortTriggered)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // int32 shotId = 1;
  if (this->_internal_shotid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_shotid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorRunningMsg_ShortTriggered::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SensorRunningMsg_ShortTriggered::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorRunningMsg_ShortTriggered::GetClassData() const { return &_class_data_; }

void SensorRunningMsg_ShortTriggered::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SensorRunningMsg_ShortTriggered *>(to)->MergeFrom(
      static_cast<const SensorRunningMsg_ShortTriggered &>(from));
}


void SensorRunningMsg_ShortTriggered::MergeFrom(const SensorRunningMsg_ShortTriggered& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.SensorRunningMsg.ShortTriggered)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_shotid() != 0) {
    _internal_set_shotid(from._internal_shotid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorRunningMsg_ShortTriggered::CopyFrom(const SensorRunningMsg_ShortTriggered& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.SensorRunningMsg.ShortTriggered)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorRunningMsg_ShortTriggered::IsInitialized() const {
  return true;
}

void SensorRunningMsg_ShortTriggered::InternalSwap(SensorRunningMsg_ShortTriggered* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorRunningMsg_ShortTriggered, shotid_)
      + sizeof(SensorRunningMsg_ShortTriggered::shotid_)
      - PROTOBUF_FIELD_OFFSET(SensorRunningMsg_ShortTriggered, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorRunningMsg_ShortTriggered::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingInterface_2eproto_getter, &descriptor_table_IntelliSwingInterface_2eproto_once,
      file_level_metadata_IntelliSwingInterface_2eproto[5]);
}

// ===================================================================

class SensorRunningMsg_BallFlightInfo::_Internal {
 public:
};

SensorRunningMsg_BallFlightInfo::SensorRunningMsg_BallFlightInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.SensorRunningMsg.BallFlightInfo)
}
SensorRunningMsg_BallFlightInfo::SensorRunningMsg_BallFlightInfo(const SensorRunningMsg_BallFlightInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&shotid_, &from.shotid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sidespin_) -
    reinterpret_cast<char*>(&shotid_)) + sizeof(sidespin_));
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.SensorRunningMsg.BallFlightInfo)
}

inline void SensorRunningMsg_BallFlightInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shotid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sidespin_) -
    reinterpret_cast<char*>(&shotid_)) + sizeof(sidespin_));
}

SensorRunningMsg_BallFlightInfo::~SensorRunningMsg_BallFlightInfo() {
  // @@protoc_insertion_point(destructor:IntelliSwing.SensorRunningMsg.BallFlightInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SensorRunningMsg_BallFlightInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SensorRunningMsg_BallFlightInfo::ArenaDtor(void* object) {
  SensorRunningMsg_BallFlightInfo* _this = reinterpret_cast< SensorRunningMsg_BallFlightInfo* >(object);
  (void)_this;
}
void SensorRunningMsg_BallFlightInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorRunningMsg_BallFlightInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SensorRunningMsg_BallFlightInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.SensorRunningMsg.BallFlightInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&shotid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sidespin_) -
      reinterpret_cast<char*>(&shotid_)) + sizeof(sidespin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorRunningMsg_BallFlightInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 shotId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          shotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float ballSpeed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ballspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Incidence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          incidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float backSpin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          backspin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float sideSpin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          sidespin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorRunningMsg_BallFlightInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.SensorRunningMsg.BallFlightInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 shotId = 1;
  if (this->_internal_shotid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_shotid(), target);
  }

  // float ballSpeed = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ballspeed = this->_internal_ballspeed();
  uint32_t raw_ballspeed;
  memcpy(&raw_ballspeed, &tmp_ballspeed, sizeof(tmp_ballspeed));
  if (raw_ballspeed != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_ballspeed(), target);
  }

  // float Incidence = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_incidence = this->_internal_incidence();
  uint32_t raw_incidence;
  memcpy(&raw_incidence, &tmp_incidence, sizeof(tmp_incidence));
  if (raw_incidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_incidence(), target);
  }

  // float direction = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_direction = this->_internal_direction();
  uint32_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_direction(), target);
  }

  // float backSpin = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_backspin = this->_internal_backspin();
  uint32_t raw_backspin;
  memcpy(&raw_backspin, &tmp_backspin, sizeof(tmp_backspin));
  if (raw_backspin != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_backspin(), target);
  }

  // float sideSpin = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sidespin = this->_internal_sidespin();
  uint32_t raw_sidespin;
  memcpy(&raw_sidespin, &tmp_sidespin, sizeof(tmp_sidespin));
  if (raw_sidespin != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_sidespin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.SensorRunningMsg.BallFlightInfo)
  return target;
}

size_t SensorRunningMsg_BallFlightInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.SensorRunningMsg.BallFlightInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 shotId = 1;
  if (this->_internal_shotid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_shotid());
  }

  // float ballSpeed = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ballspeed = this->_internal_ballspeed();
  uint32_t raw_ballspeed;
  memcpy(&raw_ballspeed, &tmp_ballspeed, sizeof(tmp_ballspeed));
  if (raw_ballspeed != 0) {
    total_size += 1 + 4;
  }

  // float Incidence = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_incidence = this->_internal_incidence();
  uint32_t raw_incidence;
  memcpy(&raw_incidence, &tmp_incidence, sizeof(tmp_incidence));
  if (raw_incidence != 0) {
    total_size += 1 + 4;
  }

  // float direction = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_direction = this->_internal_direction();
  uint32_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    total_size += 1 + 4;
  }

  // float backSpin = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_backspin = this->_internal_backspin();
  uint32_t raw_backspin;
  memcpy(&raw_backspin, &tmp_backspin, sizeof(tmp_backspin));
  if (raw_backspin != 0) {
    total_size += 1 + 4;
  }

  // float sideSpin = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sidespin = this->_internal_sidespin();
  uint32_t raw_sidespin;
  memcpy(&raw_sidespin, &tmp_sidespin, sizeof(tmp_sidespin));
  if (raw_sidespin != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorRunningMsg_BallFlightInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SensorRunningMsg_BallFlightInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorRunningMsg_BallFlightInfo::GetClassData() const { return &_class_data_; }

void SensorRunningMsg_BallFlightInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SensorRunningMsg_BallFlightInfo *>(to)->MergeFrom(
      static_cast<const SensorRunningMsg_BallFlightInfo &>(from));
}


void SensorRunningMsg_BallFlightInfo::MergeFrom(const SensorRunningMsg_BallFlightInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.SensorRunningMsg.BallFlightInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shotid() != 0) {
    _internal_set_shotid(from._internal_shotid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ballspeed = from._internal_ballspeed();
  uint32_t raw_ballspeed;
  memcpy(&raw_ballspeed, &tmp_ballspeed, sizeof(tmp_ballspeed));
  if (raw_ballspeed != 0) {
    _internal_set_ballspeed(from._internal_ballspeed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_incidence = from._internal_incidence();
  uint32_t raw_incidence;
  memcpy(&raw_incidence, &tmp_incidence, sizeof(tmp_incidence));
  if (raw_incidence != 0) {
    _internal_set_incidence(from._internal_incidence());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_direction = from._internal_direction();
  uint32_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    _internal_set_direction(from._internal_direction());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_backspin = from._internal_backspin();
  uint32_t raw_backspin;
  memcpy(&raw_backspin, &tmp_backspin, sizeof(tmp_backspin));
  if (raw_backspin != 0) {
    _internal_set_backspin(from._internal_backspin());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sidespin = from._internal_sidespin();
  uint32_t raw_sidespin;
  memcpy(&raw_sidespin, &tmp_sidespin, sizeof(tmp_sidespin));
  if (raw_sidespin != 0) {
    _internal_set_sidespin(from._internal_sidespin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorRunningMsg_BallFlightInfo::CopyFrom(const SensorRunningMsg_BallFlightInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.SensorRunningMsg.BallFlightInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorRunningMsg_BallFlightInfo::IsInitialized() const {
  return true;
}

void SensorRunningMsg_BallFlightInfo::InternalSwap(SensorRunningMsg_BallFlightInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorRunningMsg_BallFlightInfo, sidespin_)
      + sizeof(SensorRunningMsg_BallFlightInfo::sidespin_)
      - PROTOBUF_FIELD_OFFSET(SensorRunningMsg_BallFlightInfo, shotid_)>(
          reinterpret_cast<char*>(&shotid_),
          reinterpret_cast<char*>(&other->shotid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorRunningMsg_BallFlightInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingInterface_2eproto_getter, &descriptor_table_IntelliSwingInterface_2eproto_once,
      file_level_metadata_IntelliSwingInterface_2eproto[6]);
}

// ===================================================================

class SensorRunningMsg_ClubPathInfo_Path::_Internal {
 public:
};

SensorRunningMsg_ClubPathInfo_Path::SensorRunningMsg_ClubPathInfo_Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.SensorRunningMsg.ClubPathInfo.Path)
}
SensorRunningMsg_ClubPathInfo_Path::SensorRunningMsg_ClubPathInfo_Path(const SensorRunningMsg_ClubPathInfo_Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gaclubpath_ = from.gaclubpath_;
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.SensorRunningMsg.ClubPathInfo.Path)
}

inline void SensorRunningMsg_ClubPathInfo_Path::SharedCtor() {
gaclubpath_ = 0;
}

SensorRunningMsg_ClubPathInfo_Path::~SensorRunningMsg_ClubPathInfo_Path() {
  // @@protoc_insertion_point(destructor:IntelliSwing.SensorRunningMsg.ClubPathInfo.Path)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SensorRunningMsg_ClubPathInfo_Path::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SensorRunningMsg_ClubPathInfo_Path::ArenaDtor(void* object) {
  SensorRunningMsg_ClubPathInfo_Path* _this = reinterpret_cast< SensorRunningMsg_ClubPathInfo_Path* >(object);
  (void)_this;
}
void SensorRunningMsg_ClubPathInfo_Path::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorRunningMsg_ClubPathInfo_Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SensorRunningMsg_ClubPathInfo_Path::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.SensorRunningMsg.ClubPathInfo.Path)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gaclubpath_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorRunningMsg_ClubPathInfo_Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float GAClubPath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          gaclubpath_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorRunningMsg_ClubPathInfo_Path::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.SensorRunningMsg.ClubPathInfo.Path)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float GAClubPath = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gaclubpath = this->_internal_gaclubpath();
  uint32_t raw_gaclubpath;
  memcpy(&raw_gaclubpath, &tmp_gaclubpath, sizeof(tmp_gaclubpath));
  if (raw_gaclubpath != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_gaclubpath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.SensorRunningMsg.ClubPathInfo.Path)
  return target;
}

size_t SensorRunningMsg_ClubPathInfo_Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.SensorRunningMsg.ClubPathInfo.Path)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float GAClubPath = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gaclubpath = this->_internal_gaclubpath();
  uint32_t raw_gaclubpath;
  memcpy(&raw_gaclubpath, &tmp_gaclubpath, sizeof(tmp_gaclubpath));
  if (raw_gaclubpath != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorRunningMsg_ClubPathInfo_Path::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SensorRunningMsg_ClubPathInfo_Path::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorRunningMsg_ClubPathInfo_Path::GetClassData() const { return &_class_data_; }

void SensorRunningMsg_ClubPathInfo_Path::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SensorRunningMsg_ClubPathInfo_Path *>(to)->MergeFrom(
      static_cast<const SensorRunningMsg_ClubPathInfo_Path &>(from));
}


void SensorRunningMsg_ClubPathInfo_Path::MergeFrom(const SensorRunningMsg_ClubPathInfo_Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.SensorRunningMsg.ClubPathInfo.Path)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gaclubpath = from._internal_gaclubpath();
  uint32_t raw_gaclubpath;
  memcpy(&raw_gaclubpath, &tmp_gaclubpath, sizeof(tmp_gaclubpath));
  if (raw_gaclubpath != 0) {
    _internal_set_gaclubpath(from._internal_gaclubpath());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorRunningMsg_ClubPathInfo_Path::CopyFrom(const SensorRunningMsg_ClubPathInfo_Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.SensorRunningMsg.ClubPathInfo.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorRunningMsg_ClubPathInfo_Path::IsInitialized() const {
  return true;
}

void SensorRunningMsg_ClubPathInfo_Path::InternalSwap(SensorRunningMsg_ClubPathInfo_Path* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(gaclubpath_, other->gaclubpath_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorRunningMsg_ClubPathInfo_Path::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingInterface_2eproto_getter, &descriptor_table_IntelliSwingInterface_2eproto_once,
      file_level_metadata_IntelliSwingInterface_2eproto[7]);
}

// ===================================================================

class SensorRunningMsg_ClubPathInfo_ImpactPoint::_Internal {
 public:
};

SensorRunningMsg_ClubPathInfo_ImpactPoint::SensorRunningMsg_ClubPathInfo_ImpactPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.SensorRunningMsg.ClubPathInfo.ImpactPoint)
}
SensorRunningMsg_ClubPathInfo_ImpactPoint::SensorRunningMsg_ClubPathInfo_ImpactPoint(const SensorRunningMsg_ClubPathInfo_ImpactPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gaclubimpactpoint_hor_, &from.gaclubimpactpoint_hor_,
    static_cast<size_t>(reinterpret_cast<char*>(&gaclubimpactpoint_ver_) -
    reinterpret_cast<char*>(&gaclubimpactpoint_hor_)) + sizeof(gaclubimpactpoint_ver_));
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.SensorRunningMsg.ClubPathInfo.ImpactPoint)
}

inline void SensorRunningMsg_ClubPathInfo_ImpactPoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gaclubimpactpoint_hor_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gaclubimpactpoint_ver_) -
    reinterpret_cast<char*>(&gaclubimpactpoint_hor_)) + sizeof(gaclubimpactpoint_ver_));
}

SensorRunningMsg_ClubPathInfo_ImpactPoint::~SensorRunningMsg_ClubPathInfo_ImpactPoint() {
  // @@protoc_insertion_point(destructor:IntelliSwing.SensorRunningMsg.ClubPathInfo.ImpactPoint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SensorRunningMsg_ClubPathInfo_ImpactPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SensorRunningMsg_ClubPathInfo_ImpactPoint::ArenaDtor(void* object) {
  SensorRunningMsg_ClubPathInfo_ImpactPoint* _this = reinterpret_cast< SensorRunningMsg_ClubPathInfo_ImpactPoint* >(object);
  (void)_this;
}
void SensorRunningMsg_ClubPathInfo_ImpactPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorRunningMsg_ClubPathInfo_ImpactPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SensorRunningMsg_ClubPathInfo_ImpactPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.SensorRunningMsg.ClubPathInfo.ImpactPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gaclubimpactpoint_hor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gaclubimpactpoint_ver_) -
      reinterpret_cast<char*>(&gaclubimpactpoint_hor_)) + sizeof(gaclubimpactpoint_ver_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorRunningMsg_ClubPathInfo_ImpactPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float GAClubImpactPoint_Hor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          gaclubimpactpoint_hor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float GAClubImpactPoint_Ver = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          gaclubimpactpoint_ver_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorRunningMsg_ClubPathInfo_ImpactPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.SensorRunningMsg.ClubPathInfo.ImpactPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float GAClubImpactPoint_Hor = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gaclubimpactpoint_hor = this->_internal_gaclubimpactpoint_hor();
  uint32_t raw_gaclubimpactpoint_hor;
  memcpy(&raw_gaclubimpactpoint_hor, &tmp_gaclubimpactpoint_hor, sizeof(tmp_gaclubimpactpoint_hor));
  if (raw_gaclubimpactpoint_hor != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_gaclubimpactpoint_hor(), target);
  }

  // float GAClubImpactPoint_Ver = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gaclubimpactpoint_ver = this->_internal_gaclubimpactpoint_ver();
  uint32_t raw_gaclubimpactpoint_ver;
  memcpy(&raw_gaclubimpactpoint_ver, &tmp_gaclubimpactpoint_ver, sizeof(tmp_gaclubimpactpoint_ver));
  if (raw_gaclubimpactpoint_ver != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_gaclubimpactpoint_ver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.SensorRunningMsg.ClubPathInfo.ImpactPoint)
  return target;
}

size_t SensorRunningMsg_ClubPathInfo_ImpactPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.SensorRunningMsg.ClubPathInfo.ImpactPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float GAClubImpactPoint_Hor = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gaclubimpactpoint_hor = this->_internal_gaclubimpactpoint_hor();
  uint32_t raw_gaclubimpactpoint_hor;
  memcpy(&raw_gaclubimpactpoint_hor, &tmp_gaclubimpactpoint_hor, sizeof(tmp_gaclubimpactpoint_hor));
  if (raw_gaclubimpactpoint_hor != 0) {
    total_size += 1 + 4;
  }

  // float GAClubImpactPoint_Ver = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gaclubimpactpoint_ver = this->_internal_gaclubimpactpoint_ver();
  uint32_t raw_gaclubimpactpoint_ver;
  memcpy(&raw_gaclubimpactpoint_ver, &tmp_gaclubimpactpoint_ver, sizeof(tmp_gaclubimpactpoint_ver));
  if (raw_gaclubimpactpoint_ver != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorRunningMsg_ClubPathInfo_ImpactPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SensorRunningMsg_ClubPathInfo_ImpactPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorRunningMsg_ClubPathInfo_ImpactPoint::GetClassData() const { return &_class_data_; }

void SensorRunningMsg_ClubPathInfo_ImpactPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SensorRunningMsg_ClubPathInfo_ImpactPoint *>(to)->MergeFrom(
      static_cast<const SensorRunningMsg_ClubPathInfo_ImpactPoint &>(from));
}


void SensorRunningMsg_ClubPathInfo_ImpactPoint::MergeFrom(const SensorRunningMsg_ClubPathInfo_ImpactPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.SensorRunningMsg.ClubPathInfo.ImpactPoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gaclubimpactpoint_hor = from._internal_gaclubimpactpoint_hor();
  uint32_t raw_gaclubimpactpoint_hor;
  memcpy(&raw_gaclubimpactpoint_hor, &tmp_gaclubimpactpoint_hor, sizeof(tmp_gaclubimpactpoint_hor));
  if (raw_gaclubimpactpoint_hor != 0) {
    _internal_set_gaclubimpactpoint_hor(from._internal_gaclubimpactpoint_hor());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gaclubimpactpoint_ver = from._internal_gaclubimpactpoint_ver();
  uint32_t raw_gaclubimpactpoint_ver;
  memcpy(&raw_gaclubimpactpoint_ver, &tmp_gaclubimpactpoint_ver, sizeof(tmp_gaclubimpactpoint_ver));
  if (raw_gaclubimpactpoint_ver != 0) {
    _internal_set_gaclubimpactpoint_ver(from._internal_gaclubimpactpoint_ver());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorRunningMsg_ClubPathInfo_ImpactPoint::CopyFrom(const SensorRunningMsg_ClubPathInfo_ImpactPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.SensorRunningMsg.ClubPathInfo.ImpactPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorRunningMsg_ClubPathInfo_ImpactPoint::IsInitialized() const {
  return true;
}

void SensorRunningMsg_ClubPathInfo_ImpactPoint::InternalSwap(SensorRunningMsg_ClubPathInfo_ImpactPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorRunningMsg_ClubPathInfo_ImpactPoint, gaclubimpactpoint_ver_)
      + sizeof(SensorRunningMsg_ClubPathInfo_ImpactPoint::gaclubimpactpoint_ver_)
      - PROTOBUF_FIELD_OFFSET(SensorRunningMsg_ClubPathInfo_ImpactPoint, gaclubimpactpoint_hor_)>(
          reinterpret_cast<char*>(&gaclubimpactpoint_hor_),
          reinterpret_cast<char*>(&other->gaclubimpactpoint_hor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorRunningMsg_ClubPathInfo_ImpactPoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingInterface_2eproto_getter, &descriptor_table_IntelliSwingInterface_2eproto_once,
      file_level_metadata_IntelliSwingInterface_2eproto[8]);
}

// ===================================================================

class SensorRunningMsg_ClubPathInfo::_Internal {
 public:
  static const ::IntelliSwing::SensorRunningMsg_ClubPathInfo_Path& path(const SensorRunningMsg_ClubPathInfo* msg);
  static const ::IntelliSwing::SensorRunningMsg_ClubPathInfo_ImpactPoint& impactpoint(const SensorRunningMsg_ClubPathInfo* msg);
};

const ::IntelliSwing::SensorRunningMsg_ClubPathInfo_Path&
SensorRunningMsg_ClubPathInfo::_Internal::path(const SensorRunningMsg_ClubPathInfo* msg) {
  return *msg->path_;
}
const ::IntelliSwing::SensorRunningMsg_ClubPathInfo_ImpactPoint&
SensorRunningMsg_ClubPathInfo::_Internal::impactpoint(const SensorRunningMsg_ClubPathInfo* msg) {
  return *msg->impactpoint_;
}
SensorRunningMsg_ClubPathInfo::SensorRunningMsg_ClubPathInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.SensorRunningMsg.ClubPathInfo)
}
SensorRunningMsg_ClubPathInfo::SensorRunningMsg_ClubPathInfo(const SensorRunningMsg_ClubPathInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path()) {
    path_ = new ::IntelliSwing::SensorRunningMsg_ClubPathInfo_Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  if (from._internal_has_impactpoint()) {
    impactpoint_ = new ::IntelliSwing::SensorRunningMsg_ClubPathInfo_ImpactPoint(*from.impactpoint_);
  } else {
    impactpoint_ = nullptr;
  }
  ::memcpy(&shotid_, &from.shotid_,
    static_cast<size_t>(reinterpret_cast<char*>(&attackangle_) -
    reinterpret_cast<char*>(&shotid_)) + sizeof(attackangle_));
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.SensorRunningMsg.ClubPathInfo)
}

inline void SensorRunningMsg_ClubPathInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&path_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attackangle_) -
    reinterpret_cast<char*>(&path_)) + sizeof(attackangle_));
}

SensorRunningMsg_ClubPathInfo::~SensorRunningMsg_ClubPathInfo() {
  // @@protoc_insertion_point(destructor:IntelliSwing.SensorRunningMsg.ClubPathInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SensorRunningMsg_ClubPathInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete path_;
  if (this != internal_default_instance()) delete impactpoint_;
}

void SensorRunningMsg_ClubPathInfo::ArenaDtor(void* object) {
  SensorRunningMsg_ClubPathInfo* _this = reinterpret_cast< SensorRunningMsg_ClubPathInfo* >(object);
  (void)_this;
}
void SensorRunningMsg_ClubPathInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorRunningMsg_ClubPathInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SensorRunningMsg_ClubPathInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.SensorRunningMsg.ClubPathInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  if (GetArenaForAllocation() == nullptr && impactpoint_ != nullptr) {
    delete impactpoint_;
  }
  impactpoint_ = nullptr;
  ::memset(&shotid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attackangle_) -
      reinterpret_cast<char*>(&shotid_)) + sizeof(attackangle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorRunningMsg_ClubPathInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 shotId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          shotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float headSpeed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          headspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .IntelliSwing.SensorRunningMsg.ClubPathInfo.Path path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float faceAngle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          faceangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float attackAngle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          attackangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .IntelliSwing.SensorRunningMsg.ClubPathInfo.ImpactPoint impactPoint = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_impactpoint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorRunningMsg_ClubPathInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.SensorRunningMsg.ClubPathInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 shotId = 1;
  if (this->_internal_shotid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_shotid(), target);
  }

  // float headSpeed = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_headspeed = this->_internal_headspeed();
  uint32_t raw_headspeed;
  memcpy(&raw_headspeed, &tmp_headspeed, sizeof(tmp_headspeed));
  if (raw_headspeed != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_headspeed(), target);
  }

  // .IntelliSwing.SensorRunningMsg.ClubPathInfo.Path path = 3;
  if (this->_internal_has_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::path(this), target, stream);
  }

  // float faceAngle = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_faceangle = this->_internal_faceangle();
  uint32_t raw_faceangle;
  memcpy(&raw_faceangle, &tmp_faceangle, sizeof(tmp_faceangle));
  if (raw_faceangle != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_faceangle(), target);
  }

  // float attackAngle = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackangle = this->_internal_attackangle();
  uint32_t raw_attackangle;
  memcpy(&raw_attackangle, &tmp_attackangle, sizeof(tmp_attackangle));
  if (raw_attackangle != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_attackangle(), target);
  }

  // .IntelliSwing.SensorRunningMsg.ClubPathInfo.ImpactPoint impactPoint = 6;
  if (this->_internal_has_impactpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::impactpoint(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.SensorRunningMsg.ClubPathInfo)
  return target;
}

size_t SensorRunningMsg_ClubPathInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.SensorRunningMsg.ClubPathInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IntelliSwing.SensorRunningMsg.ClubPathInfo.Path path = 3;
  if (this->_internal_has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // .IntelliSwing.SensorRunningMsg.ClubPathInfo.ImpactPoint impactPoint = 6;
  if (this->_internal_has_impactpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *impactpoint_);
  }

  // int32 shotId = 1;
  if (this->_internal_shotid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_shotid());
  }

  // float headSpeed = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_headspeed = this->_internal_headspeed();
  uint32_t raw_headspeed;
  memcpy(&raw_headspeed, &tmp_headspeed, sizeof(tmp_headspeed));
  if (raw_headspeed != 0) {
    total_size += 1 + 4;
  }

  // float faceAngle = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_faceangle = this->_internal_faceangle();
  uint32_t raw_faceangle;
  memcpy(&raw_faceangle, &tmp_faceangle, sizeof(tmp_faceangle));
  if (raw_faceangle != 0) {
    total_size += 1 + 4;
  }

  // float attackAngle = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackangle = this->_internal_attackangle();
  uint32_t raw_attackangle;
  memcpy(&raw_attackangle, &tmp_attackangle, sizeof(tmp_attackangle));
  if (raw_attackangle != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorRunningMsg_ClubPathInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SensorRunningMsg_ClubPathInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorRunningMsg_ClubPathInfo::GetClassData() const { return &_class_data_; }

void SensorRunningMsg_ClubPathInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SensorRunningMsg_ClubPathInfo *>(to)->MergeFrom(
      static_cast<const SensorRunningMsg_ClubPathInfo &>(from));
}


void SensorRunningMsg_ClubPathInfo::MergeFrom(const SensorRunningMsg_ClubPathInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.SensorRunningMsg.ClubPathInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_path()) {
    _internal_mutable_path()->::IntelliSwing::SensorRunningMsg_ClubPathInfo_Path::MergeFrom(from._internal_path());
  }
  if (from._internal_has_impactpoint()) {
    _internal_mutable_impactpoint()->::IntelliSwing::SensorRunningMsg_ClubPathInfo_ImpactPoint::MergeFrom(from._internal_impactpoint());
  }
  if (from._internal_shotid() != 0) {
    _internal_set_shotid(from._internal_shotid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_headspeed = from._internal_headspeed();
  uint32_t raw_headspeed;
  memcpy(&raw_headspeed, &tmp_headspeed, sizeof(tmp_headspeed));
  if (raw_headspeed != 0) {
    _internal_set_headspeed(from._internal_headspeed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_faceangle = from._internal_faceangle();
  uint32_t raw_faceangle;
  memcpy(&raw_faceangle, &tmp_faceangle, sizeof(tmp_faceangle));
  if (raw_faceangle != 0) {
    _internal_set_faceangle(from._internal_faceangle());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attackangle = from._internal_attackangle();
  uint32_t raw_attackangle;
  memcpy(&raw_attackangle, &tmp_attackangle, sizeof(tmp_attackangle));
  if (raw_attackangle != 0) {
    _internal_set_attackangle(from._internal_attackangle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorRunningMsg_ClubPathInfo::CopyFrom(const SensorRunningMsg_ClubPathInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.SensorRunningMsg.ClubPathInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorRunningMsg_ClubPathInfo::IsInitialized() const {
  return true;
}

void SensorRunningMsg_ClubPathInfo::InternalSwap(SensorRunningMsg_ClubPathInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorRunningMsg_ClubPathInfo, attackangle_)
      + sizeof(SensorRunningMsg_ClubPathInfo::attackangle_)
      - PROTOBUF_FIELD_OFFSET(SensorRunningMsg_ClubPathInfo, path_)>(
          reinterpret_cast<char*>(&path_),
          reinterpret_cast<char*>(&other->path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorRunningMsg_ClubPathInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingInterface_2eproto_getter, &descriptor_table_IntelliSwingInterface_2eproto_once,
      file_level_metadata_IntelliSwingInterface_2eproto[9]);
}

// ===================================================================

class SensorRunningMsg::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const SensorRunningMsg* msg);
  static const ::IntelliSwing::SensorRunningMsg_Ready& ready(const SensorRunningMsg* msg);
  static const ::IntelliSwing::SensorRunningMsg_NotReady& notready(const SensorRunningMsg* msg);
  static const ::IntelliSwing::SensorRunningMsg_ShortTriggered& shottriggered(const SensorRunningMsg* msg);
  static const ::IntelliSwing::SensorRunningMsg_BallFlightInfo& ballinfo(const SensorRunningMsg* msg);
  static const ::IntelliSwing::SensorRunningMsg_ClubPathInfo& clubinfo(const SensorRunningMsg* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SensorRunningMsg::_Internal::timestamp(const SensorRunningMsg* msg) {
  return *msg->timestamp_;
}
const ::IntelliSwing::SensorRunningMsg_Ready&
SensorRunningMsg::_Internal::ready(const SensorRunningMsg* msg) {
  return *msg->runState_.ready_;
}
const ::IntelliSwing::SensorRunningMsg_NotReady&
SensorRunningMsg::_Internal::notready(const SensorRunningMsg* msg) {
  return *msg->runState_.notready_;
}
const ::IntelliSwing::SensorRunningMsg_ShortTriggered&
SensorRunningMsg::_Internal::shottriggered(const SensorRunningMsg* msg) {
  return *msg->runState_.shottriggered_;
}
const ::IntelliSwing::SensorRunningMsg_BallFlightInfo&
SensorRunningMsg::_Internal::ballinfo(const SensorRunningMsg* msg) {
  return *msg->runState_.ballinfo_;
}
const ::IntelliSwing::SensorRunningMsg_ClubPathInfo&
SensorRunningMsg::_Internal::clubinfo(const SensorRunningMsg* msg) {
  return *msg->runState_.clubinfo_;
}
void SensorRunningMsg::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void SensorRunningMsg::set_allocated_ready(::IntelliSwing::SensorRunningMsg_Ready* ready) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_runState();
  if (ready) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::IntelliSwing::SensorRunningMsg_Ready>::GetOwningArena(ready);
    if (message_arena != submessage_arena) {
      ready = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ready, submessage_arena);
    }
    set_has_ready();
    runState_.ready_ = ready;
  }
  // @@protoc_insertion_point(field_set_allocated:IntelliSwing.SensorRunningMsg.ready)
}
void SensorRunningMsg::set_allocated_notready(::IntelliSwing::SensorRunningMsg_NotReady* notready) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_runState();
  if (notready) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::IntelliSwing::SensorRunningMsg_NotReady>::GetOwningArena(notready);
    if (message_arena != submessage_arena) {
      notready = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notready, submessage_arena);
    }
    set_has_notready();
    runState_.notready_ = notready;
  }
  // @@protoc_insertion_point(field_set_allocated:IntelliSwing.SensorRunningMsg.notReady)
}
void SensorRunningMsg::set_allocated_shottriggered(::IntelliSwing::SensorRunningMsg_ShortTriggered* shottriggered) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_runState();
  if (shottriggered) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::IntelliSwing::SensorRunningMsg_ShortTriggered>::GetOwningArena(shottriggered);
    if (message_arena != submessage_arena) {
      shottriggered = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shottriggered, submessage_arena);
    }
    set_has_shottriggered();
    runState_.shottriggered_ = shottriggered;
  }
  // @@protoc_insertion_point(field_set_allocated:IntelliSwing.SensorRunningMsg.shotTriggered)
}
void SensorRunningMsg::set_allocated_ballinfo(::IntelliSwing::SensorRunningMsg_BallFlightInfo* ballinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_runState();
  if (ballinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::IntelliSwing::SensorRunningMsg_BallFlightInfo>::GetOwningArena(ballinfo);
    if (message_arena != submessage_arena) {
      ballinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ballinfo, submessage_arena);
    }
    set_has_ballinfo();
    runState_.ballinfo_ = ballinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:IntelliSwing.SensorRunningMsg.ballInfo)
}
void SensorRunningMsg::set_allocated_clubinfo(::IntelliSwing::SensorRunningMsg_ClubPathInfo* clubinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_runState();
  if (clubinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::IntelliSwing::SensorRunningMsg_ClubPathInfo>::GetOwningArena(clubinfo);
    if (message_arena != submessage_arena) {
      clubinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clubinfo, submessage_arena);
    }
    set_has_clubinfo();
    runState_.clubinfo_ = clubinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:IntelliSwing.SensorRunningMsg.clubInfo)
}
SensorRunningMsg::SensorRunningMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.SensorRunningMsg)
}
SensorRunningMsg::SensorRunningMsg(const SensorRunningMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  clear_has_runState();
  switch (from.runState_case()) {
    case kReady: {
      _internal_mutable_ready()->::IntelliSwing::SensorRunningMsg_Ready::MergeFrom(from._internal_ready());
      break;
    }
    case kNotReady: {
      _internal_mutable_notready()->::IntelliSwing::SensorRunningMsg_NotReady::MergeFrom(from._internal_notready());
      break;
    }
    case kShotTriggered: {
      _internal_mutable_shottriggered()->::IntelliSwing::SensorRunningMsg_ShortTriggered::MergeFrom(from._internal_shottriggered());
      break;
    }
    case kBallInfo: {
      _internal_mutable_ballinfo()->::IntelliSwing::SensorRunningMsg_BallFlightInfo::MergeFrom(from._internal_ballinfo());
      break;
    }
    case kClubInfo: {
      _internal_mutable_clubinfo()->::IntelliSwing::SensorRunningMsg_ClubPathInfo::MergeFrom(from._internal_clubinfo());
      break;
    }
    case RUNSTATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.SensorRunningMsg)
}

inline void SensorRunningMsg::SharedCtor() {
timestamp_ = nullptr;
clear_has_runState();
}

SensorRunningMsg::~SensorRunningMsg() {
  // @@protoc_insertion_point(destructor:IntelliSwing.SensorRunningMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SensorRunningMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
  if (has_runState()) {
    clear_runState();
  }
}

void SensorRunningMsg::ArenaDtor(void* object) {
  SensorRunningMsg* _this = reinterpret_cast< SensorRunningMsg* >(object);
  (void)_this;
}
void SensorRunningMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorRunningMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SensorRunningMsg::clear_runState() {
// @@protoc_insertion_point(one_of_clear_start:IntelliSwing.SensorRunningMsg)
  switch (runState_case()) {
    case kReady: {
      if (GetArenaForAllocation() == nullptr) {
        delete runState_.ready_;
      }
      break;
    }
    case kNotReady: {
      if (GetArenaForAllocation() == nullptr) {
        delete runState_.notready_;
      }
      break;
    }
    case kShotTriggered: {
      if (GetArenaForAllocation() == nullptr) {
        delete runState_.shottriggered_;
      }
      break;
    }
    case kBallInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete runState_.ballinfo_;
      }
      break;
    }
    case kClubInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete runState_.clubinfo_;
      }
      break;
    }
    case RUNSTATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RUNSTATE_NOT_SET;
}


void SensorRunningMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.SensorRunningMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  clear_runState();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorRunningMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timeStamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IntelliSwing.SensorRunningMsg.Ready ready = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ready(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IntelliSwing.SensorRunningMsg.NotReady notReady = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_notready(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IntelliSwing.SensorRunningMsg.ShortTriggered shotTriggered = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_shottriggered(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IntelliSwing.SensorRunningMsg.BallFlightInfo ballInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ballinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IntelliSwing.SensorRunningMsg.ClubPathInfo clubInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_clubinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorRunningMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.SensorRunningMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timeStamp = 1;
  if (this->_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  // .IntelliSwing.SensorRunningMsg.Ready ready = 2;
  if (_internal_has_ready()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ready(this), target, stream);
  }

  // .IntelliSwing.SensorRunningMsg.NotReady notReady = 3;
  if (_internal_has_notready()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::notready(this), target, stream);
  }

  // .IntelliSwing.SensorRunningMsg.ShortTriggered shotTriggered = 4;
  if (_internal_has_shottriggered()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::shottriggered(this), target, stream);
  }

  // .IntelliSwing.SensorRunningMsg.BallFlightInfo ballInfo = 5;
  if (_internal_has_ballinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ballinfo(this), target, stream);
  }

  // .IntelliSwing.SensorRunningMsg.ClubPathInfo clubInfo = 6;
  if (_internal_has_clubinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::clubinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.SensorRunningMsg)
  return target;
}

size_t SensorRunningMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.SensorRunningMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timeStamp = 1;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  switch (runState_case()) {
    // .IntelliSwing.SensorRunningMsg.Ready ready = 2;
    case kReady: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *runState_.ready_);
      break;
    }
    // .IntelliSwing.SensorRunningMsg.NotReady notReady = 3;
    case kNotReady: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *runState_.notready_);
      break;
    }
    // .IntelliSwing.SensorRunningMsg.ShortTriggered shotTriggered = 4;
    case kShotTriggered: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *runState_.shottriggered_);
      break;
    }
    // .IntelliSwing.SensorRunningMsg.BallFlightInfo ballInfo = 5;
    case kBallInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *runState_.ballinfo_);
      break;
    }
    // .IntelliSwing.SensorRunningMsg.ClubPathInfo clubInfo = 6;
    case kClubInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *runState_.clubinfo_);
      break;
    }
    case RUNSTATE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorRunningMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SensorRunningMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorRunningMsg::GetClassData() const { return &_class_data_; }

void SensorRunningMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SensorRunningMsg *>(to)->MergeFrom(
      static_cast<const SensorRunningMsg &>(from));
}


void SensorRunningMsg::MergeFrom(const SensorRunningMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.SensorRunningMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  switch (from.runState_case()) {
    case kReady: {
      _internal_mutable_ready()->::IntelliSwing::SensorRunningMsg_Ready::MergeFrom(from._internal_ready());
      break;
    }
    case kNotReady: {
      _internal_mutable_notready()->::IntelliSwing::SensorRunningMsg_NotReady::MergeFrom(from._internal_notready());
      break;
    }
    case kShotTriggered: {
      _internal_mutable_shottriggered()->::IntelliSwing::SensorRunningMsg_ShortTriggered::MergeFrom(from._internal_shottriggered());
      break;
    }
    case kBallInfo: {
      _internal_mutable_ballinfo()->::IntelliSwing::SensorRunningMsg_BallFlightInfo::MergeFrom(from._internal_ballinfo());
      break;
    }
    case kClubInfo: {
      _internal_mutable_clubinfo()->::IntelliSwing::SensorRunningMsg_ClubPathInfo::MergeFrom(from._internal_clubinfo());
      break;
    }
    case RUNSTATE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorRunningMsg::CopyFrom(const SensorRunningMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.SensorRunningMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorRunningMsg::IsInitialized() const {
  return true;
}

void SensorRunningMsg::InternalSwap(SensorRunningMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
  swap(runState_, other->runState_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorRunningMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingInterface_2eproto_getter, &descriptor_table_IntelliSwingInterface_2eproto_once,
      file_level_metadata_IntelliSwingInterface_2eproto[10]);
}

// ===================================================================

class ShotImageRequest::_Internal {
 public:
};

ShotImageRequest::ShotImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.ShotImageRequest)
}
ShotImageRequest::ShotImageRequest(const ShotImageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shotid_ = from.shotid_;
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.ShotImageRequest)
}

inline void ShotImageRequest::SharedCtor() {
shotid_ = 0;
}

ShotImageRequest::~ShotImageRequest() {
  // @@protoc_insertion_point(destructor:IntelliSwing.ShotImageRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShotImageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShotImageRequest::ArenaDtor(void* object) {
  ShotImageRequest* _this = reinterpret_cast< ShotImageRequest* >(object);
  (void)_this;
}
void ShotImageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShotImageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShotImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.ShotImageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shotid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShotImageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 shotId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          shotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShotImageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.ShotImageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 shotId = 1;
  if (this->_internal_shotid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_shotid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.ShotImageRequest)
  return target;
}

size_t ShotImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.ShotImageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 shotId = 1;
  if (this->_internal_shotid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_shotid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShotImageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShotImageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShotImageRequest::GetClassData() const { return &_class_data_; }

void ShotImageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ShotImageRequest *>(to)->MergeFrom(
      static_cast<const ShotImageRequest &>(from));
}


void ShotImageRequest::MergeFrom(const ShotImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.ShotImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shotid() != 0) {
    _internal_set_shotid(from._internal_shotid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShotImageRequest::CopyFrom(const ShotImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.ShotImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShotImageRequest::IsInitialized() const {
  return true;
}

void ShotImageRequest::InternalSwap(ShotImageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(shotid_, other->shotid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShotImageRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingInterface_2eproto_getter, &descriptor_table_IntelliSwingInterface_2eproto_once,
      file_level_metadata_IntelliSwingInterface_2eproto[11]);
}

// ===================================================================

class ImageData_Image_Marker::_Internal {
 public:
  static const ::IntelliSwing::Point2i& position(const ImageData_Image_Marker* msg);
};

const ::IntelliSwing::Point2i&
ImageData_Image_Marker::_Internal::position(const ImageData_Image_Marker* msg) {
  return *msg->position_;
}
void ImageData_Image_Marker::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
ImageData_Image_Marker::ImageData_Image_Marker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.ImageData.Image.Marker)
}
ImageData_Image_Marker::ImageData_Image_Marker(const ImageData_Image_Marker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag().empty()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_position()) {
    position_ = new ::IntelliSwing::Point2i(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.ImageData.Image.Marker)
}

inline void ImageData_Image_Marker::SharedCtor() {
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
position_ = nullptr;
}

ImageData_Image_Marker::~ImageData_Image_Marker() {
  // @@protoc_insertion_point(destructor:IntelliSwing.ImageData.Image.Marker)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ImageData_Image_Marker::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
}

void ImageData_Image_Marker::ArenaDtor(void* object) {
  ImageData_Image_Marker* _this = reinterpret_cast< ImageData_Image_Marker* >(object);
  (void)_this;
}
void ImageData_Image_Marker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageData_Image_Marker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageData_Image_Marker::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.ImageData.Image.Marker)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageData_Image_Marker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .IntelliSwing.Point2i position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IntelliSwing.ImageData.Image.Marker.tag"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageData_Image_Marker::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.ImageData.Image.Marker)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .IntelliSwing.Point2i position = 1;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // string tag = 2;
  if (!this->_internal_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IntelliSwing.ImageData.Image.Marker.tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.ImageData.Image.Marker)
  return target;
}

size_t ImageData_Image_Marker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.ImageData.Image.Marker)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 2;
  if (!this->_internal_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // .IntelliSwing.Point2i position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageData_Image_Marker::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImageData_Image_Marker::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageData_Image_Marker::GetClassData() const { return &_class_data_; }

void ImageData_Image_Marker::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ImageData_Image_Marker *>(to)->MergeFrom(
      static_cast<const ImageData_Image_Marker &>(from));
}


void ImageData_Image_Marker::MergeFrom(const ImageData_Image_Marker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.ImageData.Image.Marker)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tag().empty()) {
    _internal_set_tag(from._internal_tag());
  }
  if (from._internal_has_position()) {
    _internal_mutable_position()->::IntelliSwing::Point2i::MergeFrom(from._internal_position());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageData_Image_Marker::CopyFrom(const ImageData_Image_Marker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.ImageData.Image.Marker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageData_Image_Marker::IsInitialized() const {
  return true;
}

void ImageData_Image_Marker::InternalSwap(ImageData_Image_Marker* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tag_, lhs_arena,
      &other->tag_, rhs_arena
  );
  swap(position_, other->position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageData_Image_Marker::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingInterface_2eproto_getter, &descriptor_table_IntelliSwingInterface_2eproto_once,
      file_level_metadata_IntelliSwingInterface_2eproto[12]);
}

// ===================================================================

class ImageData_Image::_Internal {
 public:
};

ImageData_Image::ImageData_Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  markers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.ImageData.Image)
}
ImageData_Image::ImageData_Image(const ImageData_Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      markers_(from.markers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag().empty()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArenaForAllocation());
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.ImageData.Image)
}

inline void ImageData_Image::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
timestamp_ = uint64_t{0u};
}

ImageData_Image::~ImageData_Image() {
  // @@protoc_insertion_point(destructor:IntelliSwing.ImageData.Image)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ImageData_Image::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImageData_Image::ArenaDtor(void* object) {
  ImageData_Image* _this = reinterpret_cast< ImageData_Image* >(object);
  (void)_this;
}
void ImageData_Image::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageData_Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageData_Image::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.ImageData.Image)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  markers_.Clear();
  data_.ClearToEmpty();
  tag_.ClearToEmpty();
  timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageData_Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timeStamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IntelliSwing.ImageData.Image.tag"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .IntelliSwing.ImageData.Image.Marker markers = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_markers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageData_Image::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.ImageData.Image)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // uint64 timeStamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // string tag = 7;
  if (!this->_internal_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IntelliSwing.ImageData.Image.tag");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_tag(), target);
  }

  // repeated .IntelliSwing.ImageData.Image.Marker markers = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_markers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_markers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.ImageData.Image)
  return target;
}

size_t ImageData_Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.ImageData.Image)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IntelliSwing.ImageData.Image.Marker markers = 8;
  total_size += 1UL * this->_internal_markers_size();
  for (const auto& msg : this->markers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string tag = 7;
  if (!this->_internal_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // uint64 timeStamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageData_Image::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImageData_Image::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageData_Image::GetClassData() const { return &_class_data_; }

void ImageData_Image::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ImageData_Image *>(to)->MergeFrom(
      static_cast<const ImageData_Image &>(from));
}


void ImageData_Image::MergeFrom(const ImageData_Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.ImageData.Image)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  markers_.MergeFrom(from.markers_);
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (!from._internal_tag().empty()) {
    _internal_set_tag(from._internal_tag());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageData_Image::CopyFrom(const ImageData_Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.ImageData.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageData_Image::IsInitialized() const {
  return true;
}

void ImageData_Image::InternalSwap(ImageData_Image* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  markers_.InternalSwap(&other->markers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tag_, lhs_arena,
      &other->tag_, rhs_arena
  );
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageData_Image::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingInterface_2eproto_getter, &descriptor_table_IntelliSwingInterface_2eproto_once,
      file_level_metadata_IntelliSwingInterface_2eproto[13]);
}

// ===================================================================

class ImageData::_Internal {
 public:
};

ImageData::ImageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  datas_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.ImageData)
}
ImageData::ImageData(const ImageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      datas_(from.datas_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&fps_) -
    reinterpret_cast<char*>(&width_)) + sizeof(fps_));
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.ImageData)
}

inline void ImageData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fps_) -
    reinterpret_cast<char*>(&width_)) + sizeof(fps_));
}

ImageData::~ImageData() {
  // @@protoc_insertion_point(destructor:IntelliSwing.ImageData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ImageData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ImageData::ArenaDtor(void* object) {
  ImageData* _this = reinterpret_cast< ImageData* >(object);
  (void)_this;
}
void ImageData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageData::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.ImageData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.Clear();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fps_) -
      reinterpret_cast<char*>(&width_)) + sizeof(fps_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 data_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          data_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 image_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          image_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float fps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .IntelliSwing.ImageData.Image datas = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.ImageData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // int32 channel = 3;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_channel(), target);
  }

  // int32 data_type = 4;
  if (this->_internal_data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_data_type(), target);
  }

  // int32 image_type = 5;
  if (this->_internal_image_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_image_type(), target);
  }

  // float fps = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fps = this->_internal_fps();
  uint32_t raw_fps;
  memcpy(&raw_fps, &tmp_fps, sizeof(tmp_fps));
  if (raw_fps != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_fps(), target);
  }

  // repeated .IntelliSwing.ImageData.Image datas = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_datas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.ImageData)
  return target;
}

size_t ImageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.ImageData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IntelliSwing.ImageData.Image datas = 7;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  // int32 channel = 3;
  if (this->_internal_channel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  // int32 data_type = 4;
  if (this->_internal_data_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_data_type());
  }

  // int32 image_type = 5;
  if (this->_internal_image_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_image_type());
  }

  // float fps = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fps = this->_internal_fps();
  uint32_t raw_fps;
  memcpy(&raw_fps, &tmp_fps, sizeof(tmp_fps));
  if (raw_fps != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImageData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageData::GetClassData() const { return &_class_data_; }

void ImageData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ImageData *>(to)->MergeFrom(
      static_cast<const ImageData &>(from));
}


void ImageData::MergeFrom(const ImageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.ImageData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  datas_.MergeFrom(from.datas_);
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  if (from._internal_data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
  if (from._internal_image_type() != 0) {
    _internal_set_image_type(from._internal_image_type());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fps = from._internal_fps();
  uint32_t raw_fps;
  memcpy(&raw_fps, &tmp_fps, sizeof(tmp_fps));
  if (raw_fps != 0) {
    _internal_set_fps(from._internal_fps());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageData::CopyFrom(const ImageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.ImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageData::IsInitialized() const {
  return true;
}

void ImageData::InternalSwap(ImageData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  datas_.InternalSwap(&other->datas_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageData, fps_)
      + sizeof(ImageData::fps_)
      - PROTOBUF_FIELD_OFFSET(ImageData, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingInterface_2eproto_getter, &descriptor_table_IntelliSwingInterface_2eproto_once,
      file_level_metadata_IntelliSwingInterface_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace IntelliSwing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IntelliSwing::InitializeMsg* Arena::CreateMaybeMessage< ::IntelliSwing::InitializeMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::InitializeMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::ReleaseMsg* Arena::CreateMaybeMessage< ::IntelliSwing::ReleaseMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::ReleaseMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::StartMsg* Arena::CreateMaybeMessage< ::IntelliSwing::StartMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::StartMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::SensorRunningMsg_Ready* Arena::CreateMaybeMessage< ::IntelliSwing::SensorRunningMsg_Ready >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::SensorRunningMsg_Ready >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::SensorRunningMsg_NotReady* Arena::CreateMaybeMessage< ::IntelliSwing::SensorRunningMsg_NotReady >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::SensorRunningMsg_NotReady >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::SensorRunningMsg_ShortTriggered* Arena::CreateMaybeMessage< ::IntelliSwing::SensorRunningMsg_ShortTriggered >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::SensorRunningMsg_ShortTriggered >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::SensorRunningMsg_BallFlightInfo* Arena::CreateMaybeMessage< ::IntelliSwing::SensorRunningMsg_BallFlightInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::SensorRunningMsg_BallFlightInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::SensorRunningMsg_ClubPathInfo_Path* Arena::CreateMaybeMessage< ::IntelliSwing::SensorRunningMsg_ClubPathInfo_Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::SensorRunningMsg_ClubPathInfo_Path >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::SensorRunningMsg_ClubPathInfo_ImpactPoint* Arena::CreateMaybeMessage< ::IntelliSwing::SensorRunningMsg_ClubPathInfo_ImpactPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::SensorRunningMsg_ClubPathInfo_ImpactPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::SensorRunningMsg_ClubPathInfo* Arena::CreateMaybeMessage< ::IntelliSwing::SensorRunningMsg_ClubPathInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::SensorRunningMsg_ClubPathInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::SensorRunningMsg* Arena::CreateMaybeMessage< ::IntelliSwing::SensorRunningMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::SensorRunningMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::ShotImageRequest* Arena::CreateMaybeMessage< ::IntelliSwing::ShotImageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::ShotImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::ImageData_Image_Marker* Arena::CreateMaybeMessage< ::IntelliSwing::ImageData_Image_Marker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::ImageData_Image_Marker >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::ImageData_Image* Arena::CreateMaybeMessage< ::IntelliSwing::ImageData_Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::ImageData_Image >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::ImageData* Arena::CreateMaybeMessage< ::IntelliSwing::ImageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::ImageData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
