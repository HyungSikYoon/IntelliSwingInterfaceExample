syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "type.proto";
import "IntelliSwingService.proto";
//
package IntelliSwing;

service IntelliSwingProtocol
{
// Common
	rpc Initialize (InitializeMsg) returns (ReturnMsg) {}
	rpc Release (ReleaseMsg) returns (ReturnMsg) {}
	rpc Reboot(google.protobuf.Empty) returns (ReturnMsg) {}

// Sensor
	rpc Start (StartMsg) returns (stream SensorRunningMsg) {}
	rpc Stop (google.protobuf.Empty) returns (ReturnMsg) {}
	rpc GetClubImage(ShotImageRequest) returns (ImageData) {}
	rpc GetBallImage(ShotImageRequest) returns (ImageData) {}

	rpc GetClubImageStream(ShotImageRequest) returns (stream ImageData) {}
	rpc GetBallImageStream(ShotImageRequest) returns (stream ImageData) {}
  
// Service
	rpc GetDeviceInfo(google.protobuf.Empty) returns (DeviceInfo) {}
	rpc GetDeviceStatus(google.protobuf.Empty) returns (DeviceStatus) {}
	rpc GetLog(LogRequest) returns (LogMessage){}
	rpc GetStatistics(StatisticsRequest) returns (SensorStatistics){}
	rpc RunSiteCalibration(SiteCalibrationRequest) returns (SiteCalibrationResult){}
	rpc UpdateFirmware(UpdateFirmwareRequest) returns (UpdateFirmwareResult){}
	rpc GetImage(CameraImageRequest) returns (ImageData){}
	rpc GetDebugImage(DebugImageRequest) returns (DebugImage){}
	rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty) {}
	rpc SendCommand(CMessage) returns (CMessage) {}
	rpc SetTime(TimeRequest) returns (google.protobuf.Empty){}
}

message InitializeMsg
{
	enum Client 
	{
		GDR		= 0;
		NextGDR = 1;
		Vision = 2;
		Ohter = 3;
	}

	enum HandType
	{
		Right	= 0;
		Left	= 1;
	}

	HandType handType	= 1; //{0 : right-hand, 1 : left_hand}
	Client client		= 4;
}

message ReleaseMsg
{
	int32 id = 1;
}

enum GroundAttr
{
	FAIRWAY   = 0;	//  : Fairway
	ROUGH     = 1;	//  : Rough
	BUNKER    = 2;	//  : Bunker
	TEE       = 3;	//  : Tee
	GREEN     = 4;	//  : Green
	NONE	  = 5; 
}

message StartMsg
{
	enum ClubInformation
	{
		NonPutting = 0;
		Putting	=   1;
		Wood	= 100;
		W1		= 101;
		W2		= 102;
		W3		= 103;
		W4		= 104; 
		W5		= 105;
		W6		= 106;
		W7		= 107;
		W8		= 108;
		W9		= 109;
		Iron	= 200;
		I2		= 202;
		I3		= 203;
		I4		= 204;
		I5		= 205;
		I6		= 206;
		I7		= 207;
		I8		= 208;
		I9		= 209;
		Wedge	= 300;
		PW		= 310;
		SW		= 320;
		LW		= 330;
		Hybrid	= 400;
		UTIL	= 420;
		UTIL2   = 422;
		UTIL3   = 423;
		UTIL4   = 424;
		UTIL5   = 425;
		UTIL6   = 426;
		UTIL7   = 427;
	}
	ClubInformation clubInformation = 1;
	GroundAttr		goundAttribution = 2;
}


message SensorRunningMsg
{
	google.protobuf.Timestamp timeStamp = 1;

	oneof runState
	{
		Ready			ready			= 2;
		NotReady		notReady		= 3;
		ShortTriggered	shotTriggered	= 4;
		BallFlightInfo	ballInfo		= 5;
		ClubPathInfo	clubInfo		= 6;
		SensorStopped	sensorStopped	= 7;
		ImageReady		imageReady		= 8;
	}

	message Ready
	{
		Point3f			position	= 1; //mm, sensor coordinate
		bool			isTee		= 2;
		GroundAttr		goundAttribution = 3;
	}

	message NotReady
	{
		enum NotReadyCause
		{
			NotDefined		=	0;
			OutBound		=   1;
			BallNotFound	=	2;
			MultiBall		=	3;
		}
		NotReadyCause notReadyCause = 1;
	}

	message ShortTriggered
	{
		int32 shotId		= 1;
		uint64 timestamp	= 2;
	}

	message BallFlightInfo
	{
		int32 shotId		= 1;
		float ballSpeed		= 2;	// m/s
		float Incidence		= 3;	// degree
		float direction		= 4;	// degree
		float backSpin		= 5;	// rpm
		float sideSpin		= 6;	// rpm
		float totalSpin		= 7;	// rpm
		float spinAxis		= 8;	// degree
	}

	message ClubPathInfo
	{
		message Path
		{
			float GAClubPath	= 1;//degree        클럽패스 각도(Out to In,  Straight, In to Out)
			float impactIndex	= 2;// impact index : ex 3.2, 
			repeated Point3f hoselTop	= 3;
			repeated Point3f shaftDir	= 4;
			repeated Point3f faceCenter	= 5;
			repeated Point3f faceNormal	= 6;
			repeated uint64	 timestamp	= 7;// us, frame timestamp 
			uint64 impactTimeStamp = 8;// us, impact timestamp 
		}

		message ImpactPoint
		{
			float GAClubImpactPoint_Hor		= 1;//수평성분의 임팩트포인트(음수값이 Heel방향, 양수값이 Toe방향)
			float GAClubImpactPoint_Ver		= 2;//수직성분의 임팩트포인트(음수값이 Bottom방향, 양수값이 Top방향)
			float GAClubImpactAreaWidth		= 3;//mm, area width
			float GAClubImpactAreaHeight	= 4;//mm, area height
		}
		int32 shotId			= 1;
		float headSpeed			= 2;	// m/s
		Path path				= 3;	
		float faceAngle			= 4;	// degree
		float attackAngle		= 5;	// degree
		ImpactPoint impactPoint = 6;	
		float dynamicLoft		= 7;	// amount of loft on the club face at impact and is measured relative to the horizon.
		float swingPlane		= 8;	// angle and path your club travels as you swing back from address to the top of your backswing and then back through the ball.
		float swingDirection	= 9;	// the angle between the base of the hulahoop and the target line.
		float lowPoint			= 10;	// Low Point
		float clubLie			= 11;	// Club Lie (Lie Toe)
		float clubClosureRate	= 12;	// how quickly the clubface is rotating from an open position to a closed position as it impacts the golf ball.
		float clubFAxis			= 13;	// The axis of rotation that affects the ball formed by the club at the moment of impact
		float toeHeelDiff		= 14;	// Height difference between toe and hill.
	}

	message SensorStopped
	{
		enum StopCause
		{
			Other		= 000;
			Sleep		= 001;
			Calibration	= 002;
			Device		= 100;
		}
		StopCause stopCause	= 1;
	}

	message ImageReady
	{
		int32 shotId	= 1;
		bool isBallImagePrepared = 2;
		bool isClubImagePrepared = 3;
	}
}

message ShotImageRequest
{
	int32 shotId = 1;
}


message ImageData
{
	
	int32 width			= 1;	// pixel, 음수 일 경우 data에서 크기 추출
	int32 height		= 2;	// pixel, 음수 일 경우 data에서 크기 추출
	int32 channel		= 3;	// channel {1 : gray, 3 : rgb, 4 : rgba}, 음수 일 경우 data에서 크기 추출
	int32 data_type		= 4;	// pixel data type : size of element(ex. byte : 8, short 16, int 32)음수 일 경우 data에서 크기 추출
	int32 image_type	= 5;	// {0 : raw RGBA order, 1 : raw BGRA order, 2 : jpg, 3 : png, }
	float fps			= 6;	// frame per second
	repeated Image	datas	= 7;
	message Image
	{
		message Marker
		{
			Point2i position	= 1;	// UV position
			string	tag			= 2;
		}
		bytes data			= 2;	// byte stream
		uint64 timeStamp    = 3;
		string tag			= 7;	// optional 
		repeated Marker markers = 8; // marker information
	}
	
}


message DebugImage
{
	float fps			= 6;	// frame per second
	repeated Image	datas	= 7;
	message Image
	{
		int32 id			= 1;
		bytes data			= 2;	// byte stream
		uint64 timeStamp    = 3;
		int32 width			= 4;	// pixel, 음수 일 경우 data에서 크기 추출
		int32 height		= 5;	// pixel, 음수 일 경우 data에서 크기 추출
		int32 channel		= 6;	// channel {1 : gray, 3 : rgb, 4 : rgba}, 음수 일 경우 data에서 크기 추출
		int32 data_type		= 7;	// 
		int32 image_type	= 8;	// {0 : raw RGBA order, 1 : raw BGRA order, 2 : jpg, 3 : png, }
		
	}
	
}


message CMessage
{
	int32			command	= 1;
	repeated int32	param	= 2;
	string			message	= 3;
}
