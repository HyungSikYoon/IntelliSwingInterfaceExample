// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IntelliSwingService.proto

#include "IntelliSwingService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace IntelliSwing {
constexpr DeviceInfo::DeviceInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devicever_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fpgaver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , softwarever_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serialnumber_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sensorname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , handtype_(0){}
struct DeviceInfoDefaultTypeInternal {
  constexpr DeviceInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceInfoDefaultTypeInternal() {}
  union {
    DeviceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
constexpr StatisticsRequest::StatisticsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0){}
struct StatisticsRequestDefaultTypeInternal {
  constexpr StatisticsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatisticsRequestDefaultTypeInternal() {}
  union {
    StatisticsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatisticsRequestDefaultTypeInternal _StatisticsRequest_default_instance_;
constexpr SiteCalibrationRequest::SiteCalibrationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0){}
struct SiteCalibrationRequestDefaultTypeInternal {
  constexpr SiteCalibrationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteCalibrationRequestDefaultTypeInternal() {}
  union {
    SiteCalibrationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteCalibrationRequestDefaultTypeInternal _SiteCalibrationRequest_default_instance_;
constexpr CameraImageRequest::CameraImageRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : camid_(0)
  , exposure_(0)
  , gain_(0){}
struct CameraImageRequestDefaultTypeInternal {
  constexpr CameraImageRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraImageRequestDefaultTypeInternal() {}
  union {
    CameraImageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraImageRequestDefaultTypeInternal _CameraImageRequest_default_instance_;
constexpr DebugImageRequest::DebugImageRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_()
  , _channel_cached_byte_size_(0)
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DebugImageRequestDefaultTypeInternal {
  constexpr DebugImageRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DebugImageRequestDefaultTypeInternal() {}
  union {
    DebugImageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DebugImageRequestDefaultTypeInternal _DebugImageRequest_default_instance_;
constexpr DeviceStatus::DeviceStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sensorstate_()
  , systemstate_(nullptr)
  , devicetemperature_(0)
  , batteryinfo_(0){}
struct DeviceStatusDefaultTypeInternal {
  constexpr DeviceStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceStatusDefaultTypeInternal() {}
  union {
    DeviceStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceStatusDefaultTypeInternal _DeviceStatus_default_instance_;
constexpr LogRequest::LogRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : systemrange_(0)
  , processinglogrange_(0){}
struct LogRequestDefaultTypeInternal {
  constexpr LogRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogRequestDefaultTypeInternal() {}
  union {
    LogRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogRequestDefaultTypeInternal _LogRequest_default_instance_;
constexpr LogMessage::LogMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : systemlog_()
  , processinglog_(){}
struct LogMessageDefaultTypeInternal {
  constexpr LogMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogMessageDefaultTypeInternal() {}
  union {
    LogMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogMessageDefaultTypeInternal _LogMessage_default_instance_;
constexpr SensorStatistics::SensorStatistics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : total_shot_count_(uint64_t{0u})
  , total_trigger_count_(uint64_t{0u})
  , total_missing_count_(uint64_t{0u})
  , shot_count_(uint64_t{0u})
  , trigger_count_(uint64_t{0u})
  , missing_count_(uint64_t{0u}){}
struct SensorStatisticsDefaultTypeInternal {
  constexpr SensorStatisticsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SensorStatisticsDefaultTypeInternal() {}
  union {
    SensorStatistics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SensorStatisticsDefaultTypeInternal _SensorStatistics_default_instance_;
constexpr SiteCalibrationResult::SiteCalibrationResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(nullptr){}
struct SiteCalibrationResultDefaultTypeInternal {
  constexpr SiteCalibrationResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SiteCalibrationResultDefaultTypeInternal() {}
  union {
    SiteCalibrationResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SiteCalibrationResultDefaultTypeInternal _SiteCalibrationResult_default_instance_;
constexpr UpdateFirmwareRequest::UpdateFirmwareRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sensorfirmware_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fpgafirmware_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UpdateFirmwareRequestDefaultTypeInternal {
  constexpr UpdateFirmwareRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateFirmwareRequestDefaultTypeInternal() {}
  union {
    UpdateFirmwareRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateFirmwareRequestDefaultTypeInternal _UpdateFirmwareRequest_default_instance_;
constexpr UpdateFirmwareResult::UpdateFirmwareResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fpgastate_(nullptr)
  , sensorsw_(nullptr){}
struct UpdateFirmwareResultDefaultTypeInternal {
  constexpr UpdateFirmwareResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateFirmwareResultDefaultTypeInternal() {}
  union {
    UpdateFirmwareResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateFirmwareResultDefaultTypeInternal _UpdateFirmwareResult_default_instance_;
constexpr TimeRequest::TimeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : year_(0)
  , month_(0)
  , day_(0)
  , hour_(0)
  , min_(0)
  , sec_(0)
  , msec_(0){}
struct TimeRequestDefaultTypeInternal {
  constexpr TimeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimeRequestDefaultTypeInternal() {}
  union {
    TimeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimeRequestDefaultTypeInternal _TimeRequest_default_instance_;
}  // namespace IntelliSwing
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_IntelliSwingService_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_IntelliSwingService_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_IntelliSwingService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_IntelliSwingService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::DeviceInfo, devicever_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::DeviceInfo, fpgaver_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::DeviceInfo, softwarever_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::DeviceInfo, serialnumber_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::DeviceInfo, sensorname_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::DeviceInfo, handtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::StatisticsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::StatisticsRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SiteCalibrationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SiteCalibrationRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::CameraImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::CameraImageRequest, camid_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::CameraImageRequest, exposure_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::CameraImageRequest, gain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::DebugImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::DebugImageRequest, channel_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::DebugImageRequest, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::DeviceStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::DeviceStatus, sensorstate_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::DeviceStatus, systemstate_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::DeviceStatus, devicetemperature_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::DeviceStatus, batteryinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::LogRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::LogRequest, systemrange_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::LogRequest, processinglogrange_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::LogMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::LogMessage, systemlog_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::LogMessage, processinglog_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorStatistics, total_shot_count_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorStatistics, total_trigger_count_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorStatistics, total_missing_count_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorStatistics, shot_count_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorStatistics, trigger_count_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SensorStatistics, missing_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SiteCalibrationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::SiteCalibrationResult, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::UpdateFirmwareRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::UpdateFirmwareRequest, sensorfirmware_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::UpdateFirmwareRequest, fpgafirmware_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::UpdateFirmwareResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::UpdateFirmwareResult, fpgastate_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::UpdateFirmwareResult, sensorsw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::TimeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::TimeRequest, year_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::TimeRequest, month_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::TimeRequest, day_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::TimeRequest, hour_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::TimeRequest, min_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::TimeRequest, sec_),
  PROTOBUF_FIELD_OFFSET(::IntelliSwing::TimeRequest, msec_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::IntelliSwing::DeviceInfo)},
  { 12, -1, -1, sizeof(::IntelliSwing::StatisticsRequest)},
  { 19, -1, -1, sizeof(::IntelliSwing::SiteCalibrationRequest)},
  { 26, -1, -1, sizeof(::IntelliSwing::CameraImageRequest)},
  { 35, -1, -1, sizeof(::IntelliSwing::DebugImageRequest)},
  { 43, -1, -1, sizeof(::IntelliSwing::DeviceStatus)},
  { 53, -1, -1, sizeof(::IntelliSwing::LogRequest)},
  { 61, -1, -1, sizeof(::IntelliSwing::LogMessage)},
  { 69, -1, -1, sizeof(::IntelliSwing::SensorStatistics)},
  { 81, -1, -1, sizeof(::IntelliSwing::SiteCalibrationResult)},
  { 88, -1, -1, sizeof(::IntelliSwing::UpdateFirmwareRequest)},
  { 96, -1, -1, sizeof(::IntelliSwing::UpdateFirmwareResult)},
  { 104, -1, -1, sizeof(::IntelliSwing::TimeRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_DeviceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_StatisticsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_SiteCalibrationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_CameraImageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_DebugImageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_DeviceStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_LogRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_LogMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_SensorStatistics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_SiteCalibrationResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_UpdateFirmwareRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_UpdateFirmwareResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IntelliSwing::_TimeRequest_default_instance_),
};

const char descriptor_table_protodef_IntelliSwingService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031IntelliSwingService.proto\022\014IntelliSwin"
  "g\032\ntype.proto\"\201\001\n\nDeviceInfo\022\021\n\tdeviceVe"
  "r\030\001 \001(\t\022\017\n\007fpgaVer\030\002 \001(\t\022\023\n\013softwareVer\030"
  "\003 \001(\t\022\024\n\014serialNumber\030\004 \001(\t\022\022\n\nsensorNam"
  "e\030\005 \001(\t\022\020\n\010handType\030\006 \001(\005\"!\n\021StatisticsR"
  "equest\022\014\n\004type\030\001 \001(\005\"&\n\026SiteCalibrationR"
  "equest\022\014\n\004type\030\001 \001(\005\"C\n\022CameraImageReque"
  "st\022\r\n\005camId\030\001 \001(\005\022\020\n\010exposure\030\002 \001(\002\022\014\n\004g"
  "ain\030\003 \001(\002\"1\n\021DebugImageRequest\022\017\n\007channe"
  "l\030\001 \003(\005\022\013\n\003key\030\002 \001(\t\"\232\001\n\014DeviceStatus\022,\n"
  "\013sensorState\030\001 \003(\0132\027.IntelliSwing.Return"
  "Msg\022,\n\013systemState\030\002 \001(\0132\027.IntelliSwing."
  "ReturnMsg\022\031\n\021deviceTemperature\030\005 \001(\002\022\023\n\013"
  "batteryInfo\030\006 \001(\002\"=\n\nLogRequest\022\023\n\013syste"
  "mRange\030\001 \001(\005\022\032\n\022processingLogrange\030\002 \001(\005"
  "\"6\n\nLogMessage\022\021\n\tsystemLog\030\001 \003(\t\022\025\n\rpro"
  "cessingLog\030\002 \003(\t\"\250\001\n\020SensorStatistics\022\030\n"
  "\020total_shot_count\030\001 \001(\004\022\033\n\023total_trigger"
  "_count\030\002 \001(\004\022\033\n\023total_missing_count\030\003 \001("
  "\004\022\022\n\nshot_count\030\004 \001(\004\022\025\n\rtrigger_count\030\005"
  " \001(\004\022\025\n\rmissing_count\030\006 \001(\004\"\?\n\025SiteCalib"
  "rationResult\022&\n\005state\030\001 \001(\0132\027.IntelliSwi"
  "ng.ReturnMsg\"E\n\025UpdateFirmwareRequest\022\026\n"
  "\016sensorFirmware\030\001 \001(\014\022\024\n\014fpgaFirmware\030\002 "
  "\001(\014\"m\n\024UpdateFirmwareResult\022*\n\tFpgaState"
  "\030\001 \001(\0132\027.IntelliSwing.ReturnMsg\022)\n\010Senso"
  "rSW\030\002 \001(\0132\027.IntelliSwing.ReturnMsg\"m\n\013Ti"
  "meRequest\022\014\n\004year\030\001 \001(\005\022\r\n\005month\030\002 \001(\005\022\013"
  "\n\003day\030\003 \001(\005\022\014\n\004hour\030\004 \001(\005\022\013\n\003min\030\005 \001(\005\022\013"
  "\n\003sec\030\006 \001(\005\022\014\n\004msec\030\007 \001(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_IntelliSwingService_2eproto_deps[1] = {
  &::descriptor_table_type_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_IntelliSwingService_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IntelliSwingService_2eproto = {
  false, false, 1193, descriptor_table_protodef_IntelliSwingService_2eproto, "IntelliSwingService.proto", 
  &descriptor_table_IntelliSwingService_2eproto_once, descriptor_table_IntelliSwingService_2eproto_deps, 1, 13,
  schemas, file_default_instances, TableStruct_IntelliSwingService_2eproto::offsets,
  file_level_metadata_IntelliSwingService_2eproto, file_level_enum_descriptors_IntelliSwingService_2eproto, file_level_service_descriptors_IntelliSwingService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_IntelliSwingService_2eproto_getter() {
  return &descriptor_table_IntelliSwingService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_IntelliSwingService_2eproto(&descriptor_table_IntelliSwingService_2eproto);
namespace IntelliSwing {

// ===================================================================

class DeviceInfo::_Internal {
 public:
};

DeviceInfo::DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devicever_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devicever().empty()) {
    devicever_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devicever(), 
      GetArenaForAllocation());
  }
  fpgaver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fpgaver().empty()) {
    fpgaver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fpgaver(), 
      GetArenaForAllocation());
  }
  softwarever_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_softwarever().empty()) {
    softwarever_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_softwarever(), 
      GetArenaForAllocation());
  }
  serialnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serialnumber().empty()) {
    serialnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serialnumber(), 
      GetArenaForAllocation());
  }
  sensorname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sensorname().empty()) {
    sensorname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sensorname(), 
      GetArenaForAllocation());
  }
  handtype_ = from.handtype_;
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.DeviceInfo)
}

void DeviceInfo::SharedCtor() {
devicever_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fpgaver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
softwarever_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
serialnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sensorname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
handtype_ = 0;
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:IntelliSwing.DeviceInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devicever_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fpgaver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  softwarever_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialnumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sensorname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceInfo::ArenaDtor(void* object) {
  DeviceInfo* _this = reinterpret_cast< DeviceInfo* >(object);
  (void)_this;
}
void DeviceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.DeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devicever_.ClearToEmpty();
  fpgaver_.ClearToEmpty();
  softwarever_.ClearToEmpty();
  serialnumber_.ClearToEmpty();
  sensorname_.ClearToEmpty();
  handtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string deviceVer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devicever();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IntelliSwing.DeviceInfo.deviceVer"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fpgaVer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fpgaver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IntelliSwing.DeviceInfo.fpgaVer"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string softwareVer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_softwarever();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IntelliSwing.DeviceInfo.softwareVer"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string serialNumber = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_serialnumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IntelliSwing.DeviceInfo.serialNumber"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sensorName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sensorname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IntelliSwing.DeviceInfo.sensorName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 handType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          handtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.DeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string deviceVer = 1;
  if (!this->_internal_devicever().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devicever().data(), static_cast<int>(this->_internal_devicever().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IntelliSwing.DeviceInfo.deviceVer");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devicever(), target);
  }

  // string fpgaVer = 2;
  if (!this->_internal_fpgaver().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fpgaver().data(), static_cast<int>(this->_internal_fpgaver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IntelliSwing.DeviceInfo.fpgaVer");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fpgaver(), target);
  }

  // string softwareVer = 3;
  if (!this->_internal_softwarever().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_softwarever().data(), static_cast<int>(this->_internal_softwarever().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IntelliSwing.DeviceInfo.softwareVer");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_softwarever(), target);
  }

  // string serialNumber = 4;
  if (!this->_internal_serialnumber().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serialnumber().data(), static_cast<int>(this->_internal_serialnumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IntelliSwing.DeviceInfo.serialNumber");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_serialnumber(), target);
  }

  // string sensorName = 5;
  if (!this->_internal_sensorname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sensorname().data(), static_cast<int>(this->_internal_sensorname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IntelliSwing.DeviceInfo.sensorName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sensorname(), target);
  }

  // int32 handType = 6;
  if (this->_internal_handtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_handtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.DeviceInfo)
  return target;
}

size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.DeviceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceVer = 1;
  if (!this->_internal_devicever().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devicever());
  }

  // string fpgaVer = 2;
  if (!this->_internal_fpgaver().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fpgaver());
  }

  // string softwareVer = 3;
  if (!this->_internal_softwarever().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_softwarever());
  }

  // string serialNumber = 4;
  if (!this->_internal_serialnumber().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serialnumber());
  }

  // string sensorName = 5;
  if (!this->_internal_sensorname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sensorname());
  }

  // int32 handType = 6;
  if (this->_internal_handtype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_handtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceInfo::GetClassData() const { return &_class_data_; }

void DeviceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceInfo *>(to)->MergeFrom(
      static_cast<const DeviceInfo &>(from));
}


void DeviceInfo::MergeFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devicever().empty()) {
    _internal_set_devicever(from._internal_devicever());
  }
  if (!from._internal_fpgaver().empty()) {
    _internal_set_fpgaver(from._internal_fpgaver());
  }
  if (!from._internal_softwarever().empty()) {
    _internal_set_softwarever(from._internal_softwarever());
  }
  if (!from._internal_serialnumber().empty()) {
    _internal_set_serialnumber(from._internal_serialnumber());
  }
  if (!from._internal_sensorname().empty()) {
    _internal_set_sensorname(from._internal_sensorname());
  }
  if (from._internal_handtype() != 0) {
    _internal_set_handtype(from._internal_handtype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  return true;
}

void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devicever_, lhs_arena,
      &other->devicever_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fpgaver_, lhs_arena,
      &other->fpgaver_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &softwarever_, lhs_arena,
      &other->softwarever_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serialnumber_, lhs_arena,
      &other->serialnumber_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sensorname_, lhs_arena,
      &other->sensorname_, rhs_arena
  );
  swap(handtype_, other->handtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingService_2eproto_getter, &descriptor_table_IntelliSwingService_2eproto_once,
      file_level_metadata_IntelliSwingService_2eproto[0]);
}

// ===================================================================

class StatisticsRequest::_Internal {
 public:
};

StatisticsRequest::StatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.StatisticsRequest)
}
StatisticsRequest::StatisticsRequest(const StatisticsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.StatisticsRequest)
}

void StatisticsRequest::SharedCtor() {
type_ = 0;
}

StatisticsRequest::~StatisticsRequest() {
  // @@protoc_insertion_point(destructor:IntelliSwing.StatisticsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StatisticsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StatisticsRequest::ArenaDtor(void* object) {
  StatisticsRequest* _this = reinterpret_cast< StatisticsRequest* >(object);
  (void)_this;
}
void StatisticsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatisticsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatisticsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.StatisticsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatisticsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatisticsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.StatisticsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.StatisticsRequest)
  return target;
}

size_t StatisticsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.StatisticsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatisticsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatisticsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatisticsRequest::GetClassData() const { return &_class_data_; }

void StatisticsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StatisticsRequest *>(to)->MergeFrom(
      static_cast<const StatisticsRequest &>(from));
}


void StatisticsRequest::MergeFrom(const StatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.StatisticsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatisticsRequest::CopyFrom(const StatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.StatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticsRequest::IsInitialized() const {
  return true;
}

void StatisticsRequest::InternalSwap(StatisticsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatisticsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingService_2eproto_getter, &descriptor_table_IntelliSwingService_2eproto_once,
      file_level_metadata_IntelliSwingService_2eproto[1]);
}

// ===================================================================

class SiteCalibrationRequest::_Internal {
 public:
};

SiteCalibrationRequest::SiteCalibrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.SiteCalibrationRequest)
}
SiteCalibrationRequest::SiteCalibrationRequest(const SiteCalibrationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.SiteCalibrationRequest)
}

void SiteCalibrationRequest::SharedCtor() {
type_ = 0;
}

SiteCalibrationRequest::~SiteCalibrationRequest() {
  // @@protoc_insertion_point(destructor:IntelliSwing.SiteCalibrationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteCalibrationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SiteCalibrationRequest::ArenaDtor(void* object) {
  SiteCalibrationRequest* _this = reinterpret_cast< SiteCalibrationRequest* >(object);
  (void)_this;
}
void SiteCalibrationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteCalibrationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteCalibrationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.SiteCalibrationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteCalibrationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteCalibrationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.SiteCalibrationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.SiteCalibrationRequest)
  return target;
}

size_t SiteCalibrationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.SiteCalibrationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteCalibrationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteCalibrationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteCalibrationRequest::GetClassData() const { return &_class_data_; }

void SiteCalibrationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteCalibrationRequest *>(to)->MergeFrom(
      static_cast<const SiteCalibrationRequest &>(from));
}


void SiteCalibrationRequest::MergeFrom(const SiteCalibrationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.SiteCalibrationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteCalibrationRequest::CopyFrom(const SiteCalibrationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.SiteCalibrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteCalibrationRequest::IsInitialized() const {
  return true;
}

void SiteCalibrationRequest::InternalSwap(SiteCalibrationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteCalibrationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingService_2eproto_getter, &descriptor_table_IntelliSwingService_2eproto_once,
      file_level_metadata_IntelliSwingService_2eproto[2]);
}

// ===================================================================

class CameraImageRequest::_Internal {
 public:
};

CameraImageRequest::CameraImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.CameraImageRequest)
}
CameraImageRequest::CameraImageRequest(const CameraImageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&camid_, &from.camid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gain_) -
    reinterpret_cast<char*>(&camid_)) + sizeof(gain_));
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.CameraImageRequest)
}

void CameraImageRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&camid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gain_) -
    reinterpret_cast<char*>(&camid_)) + sizeof(gain_));
}

CameraImageRequest::~CameraImageRequest() {
  // @@protoc_insertion_point(destructor:IntelliSwing.CameraImageRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CameraImageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CameraImageRequest::ArenaDtor(void* object) {
  CameraImageRequest* _this = reinterpret_cast< CameraImageRequest* >(object);
  (void)_this;
}
void CameraImageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraImageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.CameraImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&camid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gain_) -
      reinterpret_cast<char*>(&camid_)) + sizeof(gain_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraImageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 camId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          camid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float exposure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          exposure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float gain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraImageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.CameraImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 camId = 1;
  if (this->_internal_camid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_camid(), target);
  }

  // float exposure = 2;
  if (!(this->_internal_exposure() <= 0 && this->_internal_exposure() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_exposure(), target);
  }

  // float gain = 3;
  if (!(this->_internal_gain() <= 0 && this->_internal_gain() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_gain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.CameraImageRequest)
  return target;
}

size_t CameraImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.CameraImageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 camId = 1;
  if (this->_internal_camid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_camid());
  }

  // float exposure = 2;
  if (!(this->_internal_exposure() <= 0 && this->_internal_exposure() >= 0)) {
    total_size += 1 + 4;
  }

  // float gain = 3;
  if (!(this->_internal_gain() <= 0 && this->_internal_gain() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraImageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CameraImageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraImageRequest::GetClassData() const { return &_class_data_; }

void CameraImageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CameraImageRequest *>(to)->MergeFrom(
      static_cast<const CameraImageRequest &>(from));
}


void CameraImageRequest::MergeFrom(const CameraImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.CameraImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_camid() != 0) {
    _internal_set_camid(from._internal_camid());
  }
  if (!(from._internal_exposure() <= 0 && from._internal_exposure() >= 0)) {
    _internal_set_exposure(from._internal_exposure());
  }
  if (!(from._internal_gain() <= 0 && from._internal_gain() >= 0)) {
    _internal_set_gain(from._internal_gain());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraImageRequest::CopyFrom(const CameraImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.CameraImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraImageRequest::IsInitialized() const {
  return true;
}

void CameraImageRequest::InternalSwap(CameraImageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraImageRequest, gain_)
      + sizeof(CameraImageRequest::gain_)
      - PROTOBUF_FIELD_OFFSET(CameraImageRequest, camid_)>(
          reinterpret_cast<char*>(&camid_),
          reinterpret_cast<char*>(&other->camid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraImageRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingService_2eproto_getter, &descriptor_table_IntelliSwingService_2eproto_once,
      file_level_metadata_IntelliSwingService_2eproto[3]);
}

// ===================================================================

class DebugImageRequest::_Internal {
 public:
};

DebugImageRequest::DebugImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channel_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.DebugImageRequest)
}
DebugImageRequest::DebugImageRequest(const DebugImageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channel_(from.channel_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.DebugImageRequest)
}

void DebugImageRequest::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DebugImageRequest::~DebugImageRequest() {
  // @@protoc_insertion_point(destructor:IntelliSwing.DebugImageRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DebugImageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DebugImageRequest::ArenaDtor(void* object) {
  DebugImageRequest* _this = reinterpret_cast< DebugImageRequest* >(object);
  (void)_this;
}
void DebugImageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DebugImageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DebugImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.DebugImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_.Clear();
  key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugImageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_channel(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_channel(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IntelliSwing.DebugImageRequest.key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DebugImageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.DebugImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 channel = 1;
  {
    int byte_size = _channel_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_channel(), byte_size, target);
    }
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IntelliSwing.DebugImageRequest.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.DebugImageRequest)
  return target;
}

size_t DebugImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.DebugImageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 channel = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->channel_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _channel_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugImageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DebugImageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugImageRequest::GetClassData() const { return &_class_data_; }

void DebugImageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DebugImageRequest *>(to)->MergeFrom(
      static_cast<const DebugImageRequest &>(from));
}


void DebugImageRequest::MergeFrom(const DebugImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.DebugImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_.MergeFrom(from.channel_);
  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugImageRequest::CopyFrom(const DebugImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.DebugImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugImageRequest::IsInitialized() const {
  return true;
}

void DebugImageRequest::InternalSwap(DebugImageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channel_.InternalSwap(&other->channel_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugImageRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingService_2eproto_getter, &descriptor_table_IntelliSwingService_2eproto_once,
      file_level_metadata_IntelliSwingService_2eproto[4]);
}

// ===================================================================

class DeviceStatus::_Internal {
 public:
  static const ::IntelliSwing::ReturnMsg& systemstate(const DeviceStatus* msg);
};

const ::IntelliSwing::ReturnMsg&
DeviceStatus::_Internal::systemstate(const DeviceStatus* msg) {
  return *msg->systemstate_;
}
void DeviceStatus::clear_sensorstate() {
  sensorstate_.Clear();
}
void DeviceStatus::clear_systemstate() {
  if (GetArenaForAllocation() == nullptr && systemstate_ != nullptr) {
    delete systemstate_;
  }
  systemstate_ = nullptr;
}
DeviceStatus::DeviceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sensorstate_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.DeviceStatus)
}
DeviceStatus::DeviceStatus(const DeviceStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sensorstate_(from.sensorstate_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_systemstate()) {
    systemstate_ = new ::IntelliSwing::ReturnMsg(*from.systemstate_);
  } else {
    systemstate_ = nullptr;
  }
  ::memcpy(&devicetemperature_, &from.devicetemperature_,
    static_cast<size_t>(reinterpret_cast<char*>(&batteryinfo_) -
    reinterpret_cast<char*>(&devicetemperature_)) + sizeof(batteryinfo_));
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.DeviceStatus)
}

void DeviceStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&systemstate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&batteryinfo_) -
    reinterpret_cast<char*>(&systemstate_)) + sizeof(batteryinfo_));
}

DeviceStatus::~DeviceStatus() {
  // @@protoc_insertion_point(destructor:IntelliSwing.DeviceStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete systemstate_;
}

void DeviceStatus::ArenaDtor(void* object) {
  DeviceStatus* _this = reinterpret_cast< DeviceStatus* >(object);
  (void)_this;
}
void DeviceStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.DeviceStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensorstate_.Clear();
  if (GetArenaForAllocation() == nullptr && systemstate_ != nullptr) {
    delete systemstate_;
  }
  systemstate_ = nullptr;
  ::memset(&devicetemperature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batteryinfo_) -
      reinterpret_cast<char*>(&devicetemperature_)) + sizeof(batteryinfo_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .IntelliSwing.ReturnMsg sensorState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensorstate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .IntelliSwing.ReturnMsg systemState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_systemstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float deviceTemperature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          devicetemperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float batteryInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          batteryinfo_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.DeviceStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IntelliSwing.ReturnMsg sensorState = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sensorstate_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sensorstate(i), target, stream);
  }

  // .IntelliSwing.ReturnMsg systemState = 2;
  if (this->_internal_has_systemstate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::systemstate(this), target, stream);
  }

  // float deviceTemperature = 5;
  if (!(this->_internal_devicetemperature() <= 0 && this->_internal_devicetemperature() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_devicetemperature(), target);
  }

  // float batteryInfo = 6;
  if (!(this->_internal_batteryinfo() <= 0 && this->_internal_batteryinfo() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_batteryinfo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.DeviceStatus)
  return target;
}

size_t DeviceStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.DeviceStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IntelliSwing.ReturnMsg sensorState = 1;
  total_size += 1UL * this->_internal_sensorstate_size();
  for (const auto& msg : this->sensorstate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .IntelliSwing.ReturnMsg systemState = 2;
  if (this->_internal_has_systemstate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *systemstate_);
  }

  // float deviceTemperature = 5;
  if (!(this->_internal_devicetemperature() <= 0 && this->_internal_devicetemperature() >= 0)) {
    total_size += 1 + 4;
  }

  // float batteryInfo = 6;
  if (!(this->_internal_batteryinfo() <= 0 && this->_internal_batteryinfo() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceStatus::GetClassData() const { return &_class_data_; }

void DeviceStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceStatus *>(to)->MergeFrom(
      static_cast<const DeviceStatus &>(from));
}


void DeviceStatus::MergeFrom(const DeviceStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.DeviceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensorstate_.MergeFrom(from.sensorstate_);
  if (from._internal_has_systemstate()) {
    _internal_mutable_systemstate()->::IntelliSwing::ReturnMsg::MergeFrom(from._internal_systemstate());
  }
  if (!(from._internal_devicetemperature() <= 0 && from._internal_devicetemperature() >= 0)) {
    _internal_set_devicetemperature(from._internal_devicetemperature());
  }
  if (!(from._internal_batteryinfo() <= 0 && from._internal_batteryinfo() >= 0)) {
    _internal_set_batteryinfo(from._internal_batteryinfo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceStatus::CopyFrom(const DeviceStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.DeviceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStatus::IsInitialized() const {
  return true;
}

void DeviceStatus::InternalSwap(DeviceStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sensorstate_.InternalSwap(&other->sensorstate_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceStatus, batteryinfo_)
      + sizeof(DeviceStatus::batteryinfo_)
      - PROTOBUF_FIELD_OFFSET(DeviceStatus, systemstate_)>(
          reinterpret_cast<char*>(&systemstate_),
          reinterpret_cast<char*>(&other->systemstate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingService_2eproto_getter, &descriptor_table_IntelliSwingService_2eproto_once,
      file_level_metadata_IntelliSwingService_2eproto[5]);
}

// ===================================================================

class LogRequest::_Internal {
 public:
};

LogRequest::LogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.LogRequest)
}
LogRequest::LogRequest(const LogRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&systemrange_, &from.systemrange_,
    static_cast<size_t>(reinterpret_cast<char*>(&processinglogrange_) -
    reinterpret_cast<char*>(&systemrange_)) + sizeof(processinglogrange_));
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.LogRequest)
}

void LogRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&systemrange_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&processinglogrange_) -
    reinterpret_cast<char*>(&systemrange_)) + sizeof(processinglogrange_));
}

LogRequest::~LogRequest() {
  // @@protoc_insertion_point(destructor:IntelliSwing.LogRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LogRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LogRequest::ArenaDtor(void* object) {
  LogRequest* _this = reinterpret_cast< LogRequest* >(object);
  (void)_this;
}
void LogRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.LogRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&systemrange_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&processinglogrange_) -
      reinterpret_cast<char*>(&systemrange_)) + sizeof(processinglogrange_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 systemRange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          systemrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 processingLogrange = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          processinglogrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.LogRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 systemRange = 1;
  if (this->_internal_systemrange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_systemrange(), target);
  }

  // int32 processingLogrange = 2;
  if (this->_internal_processinglogrange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_processinglogrange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.LogRequest)
  return target;
}

size_t LogRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.LogRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 systemRange = 1;
  if (this->_internal_systemrange() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_systemrange());
  }

  // int32 processingLogrange = 2;
  if (this->_internal_processinglogrange() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_processinglogrange());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogRequest::GetClassData() const { return &_class_data_; }

void LogRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LogRequest *>(to)->MergeFrom(
      static_cast<const LogRequest &>(from));
}


void LogRequest::MergeFrom(const LogRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.LogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_systemrange() != 0) {
    _internal_set_systemrange(from._internal_systemrange());
  }
  if (from._internal_processinglogrange() != 0) {
    _internal_set_processinglogrange(from._internal_processinglogrange());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogRequest::CopyFrom(const LogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.LogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRequest::IsInitialized() const {
  return true;
}

void LogRequest::InternalSwap(LogRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogRequest, processinglogrange_)
      + sizeof(LogRequest::processinglogrange_)
      - PROTOBUF_FIELD_OFFSET(LogRequest, systemrange_)>(
          reinterpret_cast<char*>(&systemrange_),
          reinterpret_cast<char*>(&other->systemrange_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingService_2eproto_getter, &descriptor_table_IntelliSwingService_2eproto_once,
      file_level_metadata_IntelliSwingService_2eproto[6]);
}

// ===================================================================

class LogMessage::_Internal {
 public:
};

LogMessage::LogMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  systemlog_(arena),
  processinglog_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.LogMessage)
}
LogMessage::LogMessage(const LogMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      systemlog_(from.systemlog_),
      processinglog_(from.processinglog_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.LogMessage)
}

void LogMessage::SharedCtor() {
}

LogMessage::~LogMessage() {
  // @@protoc_insertion_point(destructor:IntelliSwing.LogMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LogMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LogMessage::ArenaDtor(void* object) {
  LogMessage* _this = reinterpret_cast< LogMessage* >(object);
  (void)_this;
}
void LogMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.LogMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  systemlog_.Clear();
  processinglog_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string systemLog = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_systemlog();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IntelliSwing.LogMessage.systemLog"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string processingLog = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_processinglog();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IntelliSwing.LogMessage.processingLog"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.LogMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string systemLog = 1;
  for (int i = 0, n = this->_internal_systemlog_size(); i < n; i++) {
    const auto& s = this->_internal_systemlog(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IntelliSwing.LogMessage.systemLog");
    target = stream->WriteString(1, s, target);
  }

  // repeated string processingLog = 2;
  for (int i = 0, n = this->_internal_processinglog_size(); i < n; i++) {
    const auto& s = this->_internal_processinglog(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IntelliSwing.LogMessage.processingLog");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.LogMessage)
  return target;
}

size_t LogMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.LogMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string systemLog = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(systemlog_.size());
  for (int i = 0, n = systemlog_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      systemlog_.Get(i));
  }

  // repeated string processingLog = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(processinglog_.size());
  for (int i = 0, n = processinglog_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      processinglog_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogMessage::GetClassData() const { return &_class_data_; }

void LogMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LogMessage *>(to)->MergeFrom(
      static_cast<const LogMessage &>(from));
}


void LogMessage::MergeFrom(const LogMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.LogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  systemlog_.MergeFrom(from.systemlog_);
  processinglog_.MergeFrom(from.processinglog_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogMessage::CopyFrom(const LogMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.LogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMessage::IsInitialized() const {
  return true;
}

void LogMessage::InternalSwap(LogMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  systemlog_.InternalSwap(&other->systemlog_);
  processinglog_.InternalSwap(&other->processinglog_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingService_2eproto_getter, &descriptor_table_IntelliSwingService_2eproto_once,
      file_level_metadata_IntelliSwingService_2eproto[7]);
}

// ===================================================================

class SensorStatistics::_Internal {
 public:
};

SensorStatistics::SensorStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.SensorStatistics)
}
SensorStatistics::SensorStatistics(const SensorStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_shot_count_, &from.total_shot_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&missing_count_) -
    reinterpret_cast<char*>(&total_shot_count_)) + sizeof(missing_count_));
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.SensorStatistics)
}

void SensorStatistics::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_shot_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&missing_count_) -
    reinterpret_cast<char*>(&total_shot_count_)) + sizeof(missing_count_));
}

SensorStatistics::~SensorStatistics() {
  // @@protoc_insertion_point(destructor:IntelliSwing.SensorStatistics)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SensorStatistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SensorStatistics::ArenaDtor(void* object) {
  SensorStatistics* _this = reinterpret_cast< SensorStatistics* >(object);
  (void)_this;
}
void SensorStatistics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SensorStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.SensorStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_shot_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&missing_count_) -
      reinterpret_cast<char*>(&total_shot_count_)) + sizeof(missing_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorStatistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 total_shot_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_shot_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_trigger_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_trigger_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_missing_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_missing_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 shot_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          shot_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 trigger_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          trigger_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 missing_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          missing_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorStatistics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.SensorStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 total_shot_count = 1;
  if (this->_internal_total_shot_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_total_shot_count(), target);
  }

  // uint64 total_trigger_count = 2;
  if (this->_internal_total_trigger_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_total_trigger_count(), target);
  }

  // uint64 total_missing_count = 3;
  if (this->_internal_total_missing_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_total_missing_count(), target);
  }

  // uint64 shot_count = 4;
  if (this->_internal_shot_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_shot_count(), target);
  }

  // uint64 trigger_count = 5;
  if (this->_internal_trigger_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_trigger_count(), target);
  }

  // uint64 missing_count = 6;
  if (this->_internal_missing_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_missing_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.SensorStatistics)
  return target;
}

size_t SensorStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.SensorStatistics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 total_shot_count = 1;
  if (this->_internal_total_shot_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total_shot_count());
  }

  // uint64 total_trigger_count = 2;
  if (this->_internal_total_trigger_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total_trigger_count());
  }

  // uint64 total_missing_count = 3;
  if (this->_internal_total_missing_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total_missing_count());
  }

  // uint64 shot_count = 4;
  if (this->_internal_shot_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_shot_count());
  }

  // uint64 trigger_count = 5;
  if (this->_internal_trigger_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_trigger_count());
  }

  // uint64 missing_count = 6;
  if (this->_internal_missing_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_missing_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorStatistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SensorStatistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorStatistics::GetClassData() const { return &_class_data_; }

void SensorStatistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SensorStatistics *>(to)->MergeFrom(
      static_cast<const SensorStatistics &>(from));
}


void SensorStatistics::MergeFrom(const SensorStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.SensorStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_total_shot_count() != 0) {
    _internal_set_total_shot_count(from._internal_total_shot_count());
  }
  if (from._internal_total_trigger_count() != 0) {
    _internal_set_total_trigger_count(from._internal_total_trigger_count());
  }
  if (from._internal_total_missing_count() != 0) {
    _internal_set_total_missing_count(from._internal_total_missing_count());
  }
  if (from._internal_shot_count() != 0) {
    _internal_set_shot_count(from._internal_shot_count());
  }
  if (from._internal_trigger_count() != 0) {
    _internal_set_trigger_count(from._internal_trigger_count());
  }
  if (from._internal_missing_count() != 0) {
    _internal_set_missing_count(from._internal_missing_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorStatistics::CopyFrom(const SensorStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.SensorStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorStatistics::IsInitialized() const {
  return true;
}

void SensorStatistics::InternalSwap(SensorStatistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorStatistics, missing_count_)
      + sizeof(SensorStatistics::missing_count_)
      - PROTOBUF_FIELD_OFFSET(SensorStatistics, total_shot_count_)>(
          reinterpret_cast<char*>(&total_shot_count_),
          reinterpret_cast<char*>(&other->total_shot_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorStatistics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingService_2eproto_getter, &descriptor_table_IntelliSwingService_2eproto_once,
      file_level_metadata_IntelliSwingService_2eproto[8]);
}

// ===================================================================

class SiteCalibrationResult::_Internal {
 public:
  static const ::IntelliSwing::ReturnMsg& state(const SiteCalibrationResult* msg);
};

const ::IntelliSwing::ReturnMsg&
SiteCalibrationResult::_Internal::state(const SiteCalibrationResult* msg) {
  return *msg->state_;
}
void SiteCalibrationResult::clear_state() {
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
SiteCalibrationResult::SiteCalibrationResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.SiteCalibrationResult)
}
SiteCalibrationResult::SiteCalibrationResult(const SiteCalibrationResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_state()) {
    state_ = new ::IntelliSwing::ReturnMsg(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.SiteCalibrationResult)
}

void SiteCalibrationResult::SharedCtor() {
state_ = nullptr;
}

SiteCalibrationResult::~SiteCalibrationResult() {
  // @@protoc_insertion_point(destructor:IntelliSwing.SiteCalibrationResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SiteCalibrationResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete state_;
}

void SiteCalibrationResult::ArenaDtor(void* object) {
  SiteCalibrationResult* _this = reinterpret_cast< SiteCalibrationResult* >(object);
  (void)_this;
}
void SiteCalibrationResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteCalibrationResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SiteCalibrationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.SiteCalibrationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteCalibrationResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .IntelliSwing.ReturnMsg state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteCalibrationResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.SiteCalibrationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IntelliSwing.ReturnMsg state = 1;
  if (this->_internal_has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.SiteCalibrationResult)
  return target;
}

size_t SiteCalibrationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.SiteCalibrationResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IntelliSwing.ReturnMsg state = 1;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SiteCalibrationResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SiteCalibrationResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SiteCalibrationResult::GetClassData() const { return &_class_data_; }

void SiteCalibrationResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SiteCalibrationResult *>(to)->MergeFrom(
      static_cast<const SiteCalibrationResult &>(from));
}


void SiteCalibrationResult::MergeFrom(const SiteCalibrationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.SiteCalibrationResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_state()) {
    _internal_mutable_state()->::IntelliSwing::ReturnMsg::MergeFrom(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SiteCalibrationResult::CopyFrom(const SiteCalibrationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.SiteCalibrationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteCalibrationResult::IsInitialized() const {
  return true;
}

void SiteCalibrationResult::InternalSwap(SiteCalibrationResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteCalibrationResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingService_2eproto_getter, &descriptor_table_IntelliSwingService_2eproto_once,
      file_level_metadata_IntelliSwingService_2eproto[9]);
}

// ===================================================================

class UpdateFirmwareRequest::_Internal {
 public:
};

UpdateFirmwareRequest::UpdateFirmwareRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.UpdateFirmwareRequest)
}
UpdateFirmwareRequest::UpdateFirmwareRequest(const UpdateFirmwareRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sensorfirmware_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sensorfirmware().empty()) {
    sensorfirmware_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sensorfirmware(), 
      GetArenaForAllocation());
  }
  fpgafirmware_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fpgafirmware().empty()) {
    fpgafirmware_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fpgafirmware(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.UpdateFirmwareRequest)
}

void UpdateFirmwareRequest::SharedCtor() {
sensorfirmware_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fpgafirmware_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateFirmwareRequest::~UpdateFirmwareRequest() {
  // @@protoc_insertion_point(destructor:IntelliSwing.UpdateFirmwareRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateFirmwareRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sensorfirmware_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fpgafirmware_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateFirmwareRequest::ArenaDtor(void* object) {
  UpdateFirmwareRequest* _this = reinterpret_cast< UpdateFirmwareRequest* >(object);
  (void)_this;
}
void UpdateFirmwareRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateFirmwareRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateFirmwareRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.UpdateFirmwareRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensorfirmware_.ClearToEmpty();
  fpgafirmware_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateFirmwareRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes sensorFirmware = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sensorfirmware();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes fpgaFirmware = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fpgafirmware();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateFirmwareRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.UpdateFirmwareRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sensorFirmware = 1;
  if (!this->_internal_sensorfirmware().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sensorfirmware(), target);
  }

  // bytes fpgaFirmware = 2;
  if (!this->_internal_fpgafirmware().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_fpgafirmware(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.UpdateFirmwareRequest)
  return target;
}

size_t UpdateFirmwareRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.UpdateFirmwareRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sensorFirmware = 1;
  if (!this->_internal_sensorfirmware().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sensorfirmware());
  }

  // bytes fpgaFirmware = 2;
  if (!this->_internal_fpgafirmware().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_fpgafirmware());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateFirmwareRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateFirmwareRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateFirmwareRequest::GetClassData() const { return &_class_data_; }

void UpdateFirmwareRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateFirmwareRequest *>(to)->MergeFrom(
      static_cast<const UpdateFirmwareRequest &>(from));
}


void UpdateFirmwareRequest::MergeFrom(const UpdateFirmwareRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.UpdateFirmwareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sensorfirmware().empty()) {
    _internal_set_sensorfirmware(from._internal_sensorfirmware());
  }
  if (!from._internal_fpgafirmware().empty()) {
    _internal_set_fpgafirmware(from._internal_fpgafirmware());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateFirmwareRequest::CopyFrom(const UpdateFirmwareRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.UpdateFirmwareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFirmwareRequest::IsInitialized() const {
  return true;
}

void UpdateFirmwareRequest::InternalSwap(UpdateFirmwareRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sensorfirmware_, lhs_arena,
      &other->sensorfirmware_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fpgafirmware_, lhs_arena,
      &other->fpgafirmware_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateFirmwareRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingService_2eproto_getter, &descriptor_table_IntelliSwingService_2eproto_once,
      file_level_metadata_IntelliSwingService_2eproto[10]);
}

// ===================================================================

class UpdateFirmwareResult::_Internal {
 public:
  static const ::IntelliSwing::ReturnMsg& fpgastate(const UpdateFirmwareResult* msg);
  static const ::IntelliSwing::ReturnMsg& sensorsw(const UpdateFirmwareResult* msg);
};

const ::IntelliSwing::ReturnMsg&
UpdateFirmwareResult::_Internal::fpgastate(const UpdateFirmwareResult* msg) {
  return *msg->fpgastate_;
}
const ::IntelliSwing::ReturnMsg&
UpdateFirmwareResult::_Internal::sensorsw(const UpdateFirmwareResult* msg) {
  return *msg->sensorsw_;
}
void UpdateFirmwareResult::clear_fpgastate() {
  if (GetArenaForAllocation() == nullptr && fpgastate_ != nullptr) {
    delete fpgastate_;
  }
  fpgastate_ = nullptr;
}
void UpdateFirmwareResult::clear_sensorsw() {
  if (GetArenaForAllocation() == nullptr && sensorsw_ != nullptr) {
    delete sensorsw_;
  }
  sensorsw_ = nullptr;
}
UpdateFirmwareResult::UpdateFirmwareResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.UpdateFirmwareResult)
}
UpdateFirmwareResult::UpdateFirmwareResult(const UpdateFirmwareResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fpgastate()) {
    fpgastate_ = new ::IntelliSwing::ReturnMsg(*from.fpgastate_);
  } else {
    fpgastate_ = nullptr;
  }
  if (from._internal_has_sensorsw()) {
    sensorsw_ = new ::IntelliSwing::ReturnMsg(*from.sensorsw_);
  } else {
    sensorsw_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.UpdateFirmwareResult)
}

void UpdateFirmwareResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fpgastate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sensorsw_) -
    reinterpret_cast<char*>(&fpgastate_)) + sizeof(sensorsw_));
}

UpdateFirmwareResult::~UpdateFirmwareResult() {
  // @@protoc_insertion_point(destructor:IntelliSwing.UpdateFirmwareResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateFirmwareResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete fpgastate_;
  if (this != internal_default_instance()) delete sensorsw_;
}

void UpdateFirmwareResult::ArenaDtor(void* object) {
  UpdateFirmwareResult* _this = reinterpret_cast< UpdateFirmwareResult* >(object);
  (void)_this;
}
void UpdateFirmwareResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateFirmwareResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateFirmwareResult::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.UpdateFirmwareResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && fpgastate_ != nullptr) {
    delete fpgastate_;
  }
  fpgastate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && sensorsw_ != nullptr) {
    delete sensorsw_;
  }
  sensorsw_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateFirmwareResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .IntelliSwing.ReturnMsg FpgaState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fpgastate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IntelliSwing.ReturnMsg SensorSW = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensorsw(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateFirmwareResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.UpdateFirmwareResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IntelliSwing.ReturnMsg FpgaState = 1;
  if (this->_internal_has_fpgastate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fpgastate(this), target, stream);
  }

  // .IntelliSwing.ReturnMsg SensorSW = 2;
  if (this->_internal_has_sensorsw()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sensorsw(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.UpdateFirmwareResult)
  return target;
}

size_t UpdateFirmwareResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.UpdateFirmwareResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IntelliSwing.ReturnMsg FpgaState = 1;
  if (this->_internal_has_fpgastate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fpgastate_);
  }

  // .IntelliSwing.ReturnMsg SensorSW = 2;
  if (this->_internal_has_sensorsw()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sensorsw_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateFirmwareResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateFirmwareResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateFirmwareResult::GetClassData() const { return &_class_data_; }

void UpdateFirmwareResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateFirmwareResult *>(to)->MergeFrom(
      static_cast<const UpdateFirmwareResult &>(from));
}


void UpdateFirmwareResult::MergeFrom(const UpdateFirmwareResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.UpdateFirmwareResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fpgastate()) {
    _internal_mutable_fpgastate()->::IntelliSwing::ReturnMsg::MergeFrom(from._internal_fpgastate());
  }
  if (from._internal_has_sensorsw()) {
    _internal_mutable_sensorsw()->::IntelliSwing::ReturnMsg::MergeFrom(from._internal_sensorsw());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateFirmwareResult::CopyFrom(const UpdateFirmwareResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.UpdateFirmwareResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFirmwareResult::IsInitialized() const {
  return true;
}

void UpdateFirmwareResult::InternalSwap(UpdateFirmwareResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateFirmwareResult, sensorsw_)
      + sizeof(UpdateFirmwareResult::sensorsw_)
      - PROTOBUF_FIELD_OFFSET(UpdateFirmwareResult, fpgastate_)>(
          reinterpret_cast<char*>(&fpgastate_),
          reinterpret_cast<char*>(&other->fpgastate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateFirmwareResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingService_2eproto_getter, &descriptor_table_IntelliSwingService_2eproto_once,
      file_level_metadata_IntelliSwingService_2eproto[11]);
}

// ===================================================================

class TimeRequest::_Internal {
 public:
};

TimeRequest::TimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IntelliSwing.TimeRequest)
}
TimeRequest::TimeRequest(const TimeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&year_, &from.year_,
    static_cast<size_t>(reinterpret_cast<char*>(&msec_) -
    reinterpret_cast<char*>(&year_)) + sizeof(msec_));
  // @@protoc_insertion_point(copy_constructor:IntelliSwing.TimeRequest)
}

void TimeRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&year_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msec_) -
    reinterpret_cast<char*>(&year_)) + sizeof(msec_));
}

TimeRequest::~TimeRequest() {
  // @@protoc_insertion_point(destructor:IntelliSwing.TimeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TimeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TimeRequest::ArenaDtor(void* object) {
  TimeRequest* _this = reinterpret_cast< TimeRequest* >(object);
  (void)_this;
}
void TimeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:IntelliSwing.TimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msec_) -
      reinterpret_cast<char*>(&year_)) + sizeof(msec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 year = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 month = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 day = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hour = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 min = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 msec = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          msec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntelliSwing.TimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->_internal_year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_year(), target);
  }

  // int32 month = 2;
  if (this->_internal_month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_month(), target);
  }

  // int32 day = 3;
  if (this->_internal_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_day(), target);
  }

  // int32 hour = 4;
  if (this->_internal_hour() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_hour(), target);
  }

  // int32 min = 5;
  if (this->_internal_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_min(), target);
  }

  // int32 sec = 6;
  if (this->_internal_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_sec(), target);
  }

  // int32 msec = 7;
  if (this->_internal_msec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_msec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntelliSwing.TimeRequest)
  return target;
}

size_t TimeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntelliSwing.TimeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->_internal_year() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_year());
  }

  // int32 month = 2;
  if (this->_internal_month() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_month());
  }

  // int32 day = 3;
  if (this->_internal_day() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_day());
  }

  // int32 hour = 4;
  if (this->_internal_hour() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hour());
  }

  // int32 min = 5;
  if (this->_internal_min() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_min());
  }

  // int32 sec = 6;
  if (this->_internal_sec() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_sec());
  }

  // int32 msec = 7;
  if (this->_internal_msec() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msec());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TimeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeRequest::GetClassData() const { return &_class_data_; }

void TimeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TimeRequest *>(to)->MergeFrom(
      static_cast<const TimeRequest &>(from));
}


void TimeRequest::MergeFrom(const TimeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntelliSwing.TimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_year() != 0) {
    _internal_set_year(from._internal_year());
  }
  if (from._internal_month() != 0) {
    _internal_set_month(from._internal_month());
  }
  if (from._internal_day() != 0) {
    _internal_set_day(from._internal_day());
  }
  if (from._internal_hour() != 0) {
    _internal_set_hour(from._internal_hour());
  }
  if (from._internal_min() != 0) {
    _internal_set_min(from._internal_min());
  }
  if (from._internal_sec() != 0) {
    _internal_set_sec(from._internal_sec());
  }
  if (from._internal_msec() != 0) {
    _internal_set_msec(from._internal_msec());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeRequest::CopyFrom(const TimeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntelliSwing.TimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeRequest::IsInitialized() const {
  return true;
}

void TimeRequest::InternalSwap(TimeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeRequest, msec_)
      + sizeof(TimeRequest::msec_)
      - PROTOBUF_FIELD_OFFSET(TimeRequest, year_)>(
          reinterpret_cast<char*>(&year_),
          reinterpret_cast<char*>(&other->year_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_IntelliSwingService_2eproto_getter, &descriptor_table_IntelliSwingService_2eproto_once,
      file_level_metadata_IntelliSwingService_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace IntelliSwing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IntelliSwing::DeviceInfo* Arena::CreateMaybeMessage< ::IntelliSwing::DeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::DeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::StatisticsRequest* Arena::CreateMaybeMessage< ::IntelliSwing::StatisticsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::StatisticsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::SiteCalibrationRequest* Arena::CreateMaybeMessage< ::IntelliSwing::SiteCalibrationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::SiteCalibrationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::CameraImageRequest* Arena::CreateMaybeMessage< ::IntelliSwing::CameraImageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::CameraImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::DebugImageRequest* Arena::CreateMaybeMessage< ::IntelliSwing::DebugImageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::DebugImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::DeviceStatus* Arena::CreateMaybeMessage< ::IntelliSwing::DeviceStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::DeviceStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::LogRequest* Arena::CreateMaybeMessage< ::IntelliSwing::LogRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::LogRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::LogMessage* Arena::CreateMaybeMessage< ::IntelliSwing::LogMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::LogMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::SensorStatistics* Arena::CreateMaybeMessage< ::IntelliSwing::SensorStatistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::SensorStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::SiteCalibrationResult* Arena::CreateMaybeMessage< ::IntelliSwing::SiteCalibrationResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::SiteCalibrationResult >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::UpdateFirmwareRequest* Arena::CreateMaybeMessage< ::IntelliSwing::UpdateFirmwareRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::UpdateFirmwareRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::UpdateFirmwareResult* Arena::CreateMaybeMessage< ::IntelliSwing::UpdateFirmwareResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::UpdateFirmwareResult >(arena);
}
template<> PROTOBUF_NOINLINE ::IntelliSwing::TimeRequest* Arena::CreateMaybeMessage< ::IntelliSwing::TimeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntelliSwing::TimeRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
